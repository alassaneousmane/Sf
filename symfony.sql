-- phpMyAdmin SQL Dump
-- version 4.5.2
-- http://www.phpmyadmin.net
--
-- Client :  localhost
-- Généré le :  Lun 17 Septembre 2018 à 22:08
-- Version du serveur :  10.1.19-MariaDB
-- Version de PHP :  5.6.24

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Base de données :  `symfony`
--

-- --------------------------------------------------------

--
-- Structure de la table `advert`
--

CREATE TABLE `advert` (
  `id` int(11) NOT NULL,
  `image_id` int(11) DEFAULT NULL,
  `published` tinyint(1) NOT NULL,
  `date` datetime NOT NULL,
  `title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `author` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `content` longtext COLLATE utf8_unicode_ci NOT NULL,
  `updated_at` datetime DEFAULT NULL,
  `nb_applications` int(11) NOT NULL,
  `slug` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `email` varchar(150) COLLATE utf8_unicode_ci DEFAULT NULL,
  `ip` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Contenu de la table `advert`
--

INSERT INTO `advert` (`id`, `image_id`, `published`, `date`, `title`, `author`, `content`, `updated_at`, `nb_applications`, `slug`, `email`, `ip`) VALUES
(54, 50, 1, '2017-02-13 20:13:00', 'CKEditorBundle', 'Ousmane ALASSANE', '<p>Je dois trouver une solution pour l&#39;affichage des erreurs correctement et &eacute;ventuellement un bon affichage pour le contenu.</p>', NULL, 5, 'ckeditorbundle-2017-02-13-20-13', 'alassaneousmane071@gmail.com', NULL),
(56, 52, 1, '2017-02-14 00:16:00', 'Gestionnaire d''évènement de Symfony', 'Ousmane ALASSANE', '<p>Des services se font connaitre du gestionnaire d&#39;&eacute;v&egrave;nement. D&egrave;s que l&#39;&eacute;v&egrave;nement s&#39;est d&eacute;clench&eacute;, il se chargera de propager cela sur les services qui se sont pr&eacute;alabl&eacute;ment enregistr&eacute;s comme &eacute;couteurs.</p>\r\n\r\n<p><img alt="Gestionnaire d''évènement de Symfony" src="https://user.oc-static.com/files/420001_421000/420506.png" style="height:473px; width:592px" /></p>', NULL, 0, 'gestionnaire-d-evenement-de-symfony-2017-02-14-00-16', 'alassaneousmane071@gmail.com', NULL),
(58, 54, 1, '2017-02-16 18:39:00', 'List project master IRCOMS, Cybersécurité', 'Ousmane ALASSANE', '<p>Bonjour,</p>\r\n\r\n<p>Je&nbsp; voulais partager avec vous des liens int&eacute;ressants pour booster la s&eacute;curit&eacute; de vos donn&eacute;es fragiles.</p>\r\n\r\n<p>Laissez vos mails et je vous reponderai</p>', NULL, 0, 'list-project-master-ircoms-cybersecurite-2017-02-16-18-39', 'alassaneousmane071@gmail.com', NULL),
(60, 56, 1, '2017-02-17 00:21:00', 'Evaluation Partie 4', 'Ousmane ALASSANE', '<p>R&eacute;ponse 1:</p>\r\n\r\n<p>Pour cr&eacute;er directement un formulaire, et non un constructeur de formulaire (<em>formBuilder</em>), il faut utiliser la m&eacute;thode <em>create</em> du service <em>form.factory</em>. Cette m&eacute;thode prend en argument le type de formulaire, dans notre cas <em>MoocType::class</em>, ainsi qu&rsquo;un objet sur lequel se baser, ici la variable <em>$mooc</em> (qui contiendrait une instance de l&rsquo;entit&eacute; <em>Mooc</em>).</p>\r\n\r\n<p><br />\r\nDepuis le contr&ocirc;leur, il existe un raccourci pour ex&eacute;cuter cette m&eacute;thode du service <em>form.factory</em>, il s&rsquo;agit de la m&eacute;thode <em>createForm</em>, qui prend les m&ecirc;mes arguments et dans l&rsquo;ordre (d&rsquo;abord le type de formulaire, et ensuite l&rsquo;objet, donc la r&eacute;ponse 4 n&rsquo;&eacute;tait pas correcte).</p>\r\n\r\n<p>R&eacute;ponse 2:</p>\r\n\r\n<p>Dans un formulaire, le type de champ qui permet de s&eacute;lectionner une ou plusieurs entit&eacute;s d&eacute;j&agrave; existantes est le type <em>entity</em>. Ses options sont nombreuses, et on note particuli&egrave;rement :</p>\r\n\r\n<ul>\r\n	<li>L&rsquo;option multiple qui, d&eacute;finie &agrave; true, permet de s&eacute;lectionner une liste d&rsquo;entit&eacute;s et non une unique entit&eacute; ;</li>\r\n	<li>L&rsquo;option expanded qui, d&eacute;finie &agrave; true, permet d&rsquo;afficher de mani&egrave;re &eacute;tendue le(s) choix possible(s) parmis les entit&eacute;s. Coupl&eacute;e avec l&rsquo;option multiple &agrave; true, le champ est rendu sous forme de checkbox ;</li>\r\n	<li>L&rsquo;option query_builder, qui permet de pr&eacute;ciser une m&eacute;thode du repository &agrave; utiliser lors de la r&eacute;cup&eacute;ration des choix possibles. Ici, cela nous permet de filtrer les th&egrave;mes disponibles via la m&eacute;thode getThemesDisponibles.</li>\r\n</ul>\r\n\r\n<p>R&eacute;ponse 3:</p>\r\n\r\n<p>Pour valider la valeur d&rsquo;un nombre, c&rsquo;est l&rsquo;annotation <em>Range</em> qu&rsquo;il faut utiliser. Elle permet de v&eacute;rifier que la valeur soumise est sup&eacute;rieure &agrave; son option <em>min</em>, et inf&eacute;rieure &agrave; son option <em>max.</em> L&rsquo;option <em>minMessage</em> est affich&eacute;e lorsque la valeur soumise est inf&eacute;rieure &agrave; l&rsquo;option <em>min</em> ; inversement pour <em>maxMessage</em>. Lorsque la valeur soumise n&rsquo;est pas un nombre, c&rsquo;est le contenu de l&rsquo;option <em>invalidMessage</em> qui est affich&eacute;.</p>\r\n\r\n<p>L&rsquo;annotation <em>Length</em> valide le nombre de caract&egrave;res d&rsquo;une cha&icirc;ne de caract&egrave;res, et non la valeur d&rsquo;un nombre. Quant aux annotations <em>Min</em> et <em>Max</em>, elles n&rsquo;existent plus depuis la version 2.3 de Symfony.</p>', NULL, 0, 'evaluation-partie-4-2017-02-17-00-21', 'alassaneousmane071@gmail.com', NULL),
(61, 57, 1, '2017-02-17 00:23:00', 'Evaluation Partie 4-02', 'Ousmane ALASSANE', '<p>R&eacute;ponse 4:</p>\r\n\r\n<p>Attention &agrave; toutes les options pour la cr&eacute;ation d&rsquo;un firewall:</p>\r\n\r\n<ul>\r\n	<li>pattern est le format des URL sur lequel le firewall s&rsquo;applique. Ici on veut prot&eacute;ger la section Administration du site, il faut donc rentrer l&rsquo;expression r&eacute;guli&egrave;re ^/admin/ (toutes les URL commen&ccedil;ant par &ldquo;/admin/&rdquo;)</li>\r\n	<li>anonymous doit &ecirc;tre d&eacute;fini &agrave; false dans notre cas, pour ne pas accepter les visiteurs non authentifi&eacute;s</li>\r\n	<li>provider est le fournisseur d&rsquo;utilisateurs, ici adminProvider pour l&rsquo;exemple</li>\r\n	<li>form_login repr&eacute;sente la m&eacute;thode d&rsquo;identification par formulaire HTML. L&rsquo;option http_basic la remplace dans le cas d&rsquo;une identification HTTP (la popup qui vient par dessus la page pour demander les identifiants HTTP)</li>\r\n	<li>remember_me, contenant l&rsquo;option secret, active l&rsquo;option pour l&rsquo;identification par cookie.</li>\r\n</ul>\r\n\r\n<p>Toute la configuration possible est disponible dans la <a href="http://symfony.com/doc/current/reference/configuration/security.html">documentation</a>.</p>\r\n\r\n<p>R&eacute;ponse 5:</p>\r\n\r\n<p>Les tags sont des points d&rsquo;extension : c&rsquo;est-&agrave;-dire qu&rsquo;ils permettent d&rsquo;ajouter des fonctionnnalit&eacute;s &agrave; un bundle existant sans toucher &agrave; son code. Concr&egrave;tement, chaque bundle se servant du levier des tags ouvre la porte &agrave; des fonctionnalit&eacute;s venues de l&rsquo;ext&eacute;rieur.</p>\r\n\r\n<p>Par exemple, Twig en utilisant les tags, permet &agrave; quiconque d&rsquo;ajouter des fonctions Twig en impl&eacute;mentant un service avec le tag appropri&eacute;.</p>\r\n\r\n<p>Si le syst&egrave;me de tag n&rsquo;a pas &eacute;t&eacute; con&ccedil;u pour Twig ni les formulaires en particulier, son utilisation est bien plus large.</p>\r\n\r\n<p>R&eacute;ponse 6:</p>\r\n\r\n<div class="mcqQuestion__explanation  space-top richContainer">\r\n<p>Les &eacute;v&egrave;nements permettent d&rsquo;ex&eacute;cuter certaines de nos actions &agrave; des moments cl&eacute;s de l&rsquo;ex&eacute;cution d&rsquo;une page ou d&rsquo;un code ; le tout sans changer d&rsquo;un iota le code du framework ou des bundles tiers.</p>\r\n\r\n<p>Le framework d&eacute;clenche certains &eacute;v&egrave;nements &agrave; des moments strat&eacute;giques de son ex&eacute;cution, et on a la possibilit&eacute; d&rsquo;&eacute;couter ces &eacute;v&egrave;nements pour effectuer des actions pr&eacute;cises lorsqu&rsquo;ils sont d&eacute;clench&eacute;s.</p>\r\n\r\n<p>Il est bien s&ucirc;r possible de d&eacute;clencher nos propres &eacute;v&egrave;nements !</p>\r\n\r\n<p>R&eacute;ponse 7:</p>\r\n\r\n<div class="mcqQuestion__explanation  space-top richContainer">\r\n<p>Le tag &agrave; utiliser est bien <em>kernel.event_listener</em> qui permet &agrave; un service d&rsquo;&ecirc;tre enregistr&eacute; en tant que listener aupr&egrave;s du gestionnaire d&rsquo;&eacute;v&egrave;nements (<em>event dispatcher</em>).</p>\r\n\r\n<p><br />\r\nL&rsquo;&eacute;v&egrave;nement qui permet de modifier le contr&ocirc;leur que le noyau est sur le point d&rsquo;ex&eacute;cuter est <em>kernel.controller</em>. Il est d&eacute;clench&eacute; apr&egrave;s que le routeur ait fait la correspondance avec une route, le contr&ocirc;leur est donc connu, mais pas encore ex&eacute;cut&eacute;. C&rsquo;est donc le bon moment pour intervenir et le changer si n&eacute;cessaire (suivant votre besoin).</p>\r\n\r\n<p><br />\r\nEnfin, la priorit&eacute; maximale est 255 (ce n&rsquo;est en fait qu&rsquo;une convention, vous pouvez tout &agrave; fait mettre une priorit&eacute; de 99999 !). Le listener sera donc ex&eacute;cut&eacute; avant tous les autres listeners. Une priorit&eacute; n&eacute;gative de -255 ferait de ce listener le dernier &agrave; &ecirc;tre ex&eacute;cut&eacute;.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>R&eacute;ponse 8:</p>\r\n\r\n<p>La syntaxe compl&egrave;te du filtre trans est la suivante :</p>\r\n\r\n<p><code>{{ &#39;maCha&icirc;ne&#39;|trans({&#39;%placeholder%&#39;: placeholderValue}, &#39;domaine&#39;, &lsquo;locale&rsquo;) }}</code></p>\r\n</div>\r\n</div>', NULL, 0, 'evaluation-partie-4-02-2017-02-17-00-23', 'alassaneousmane071@gmail.com', NULL),
(62, 58, 1, '2017-02-18 19:05:00', 'Fin lecture du mooc-symfony', 'Ousmane ALASSANE', '<p>J&#39;ai fini la lecture de tous les chapitres</p>', NULL, 0, 'fin-lecture-du-mooc-symfony-2017-02-18-19-05', 'alassaneousmane071@gmail.com', NULL),
(63, 59, 1, '2017-02-27 22:47:00', 'Développeur français en Symfony', 'Ousmane ALASSANE', '<p>Recherche d&eacute;veloppeur fran&ccedil;ais en Symfony</p>', NULL, 0, 'developpeur-francais-en-symfony-2017-02-27-22-47', 'alassaneousmane071@gmail.com', NULL),
(65, 61, 1, '2017-03-02 18:17:00', 'Programme du Master 2 - Ingénierie des réseaux', 'Dhavy Gantsou', '<h2><span style="color:#ff0000">Objectif du Master 2, Ing&eacute;nierie des R&eacute;seaux, Communications Mobiles et S&eacute;curit&eacute;</span></h2>\r\n\r\n<p>Enjeu strat&eacute;gique et &eacute;conomique, la cybers&eacute;curit&eacute; s&rsquo;articule autour des m&eacute;thodes et outils organisationnels, r&eacute;glementaires et techniques concourant &agrave; la garantie de la confidentialit&eacute;, l&rsquo;int&eacute;grit&eacute; et la disponibilit&eacute; des ressources du syst&egrave;me d&rsquo;informations d&rsquo;un organisme. Le master IRCOMS, <strong>labellis&eacute; ANSSI-17-003</strong>, forme des cadres hautement qualifi&eacute;s en mesure d&rsquo;appr&eacute;hender et de&nbsp; ma&icirc;triser les aspects n&eacute;cessaires pour la satisfaction de ces exigences.&nbsp;</p>\r\n\r\n<h2><span style="color:#ff0000">Les plus de la formation</span></h2>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Notre exp&eacute;rience : Pour ce master cr&eacute;&eacute; en 2006, alors un des rares dans la th&eacute;matique s&eacute;curit&eacute;, l&#39;offre de formation symbolise le souci d&#39;adapter les enseignements aux &eacute;volutions imputables &agrave; la n&eacute;cessit&eacute; de relever les d&eacute;fis pos&eacute;s par des menaces et des attaques diverses, et de plus en plus sophistiqu&eacute;es.</p>\r\n	</li>\r\n	<li>\r\n	<p>Des intervenants de haut niveau : Cours dispens&eacute;s par des enseignants-chercheurs du d&eacute;partement informatique du laboratoire de recherche LAMIH, CNRS UMR 8201 et des industriels experts en cybers&eacute;curit&eacute;, pour la plupart, des anciens dipl&ocirc;m&eacute;s du master.</p>\r\n	</li>\r\n	<li>\r\n	<p>Le master 2 IRCOMS se focalise exclusivement sur les comp&eacute;tences techniques, allant de la s&eacute;curit&eacute; d&eacute;fensive et offensive, en passant par la gestion des identit&eacute;s et des acc&egrave;s, jusqu&rsquo;&agrave; la s&eacute;curit&eacute; des objets connect&eacute;s,&nbsp; n&eacute;cessaires pour&nbsp; la mise en &oelig;uvre et le d&eacute;ploiement de la s&eacute;curit&eacute; d&rsquo;un syst&egrave;me d&rsquo;information. Les connaissances constituant le socle de la cybers&eacute;curit&eacute; &agrave; l&rsquo;instar des r&eacute;seaux, de la compilation, du syst&egrave;me d&rsquo;exploitation, des bases de donn&eacute;es, de la cryptographie pour ne citer que celles-l&agrave; sont dispens&eacute;es en&nbsp;<a href="http://www.univ-valenciennes.fr/ISTV/master-1-informatique-parcours-ingenierie-des-reseaux-communications-mobiles-et-securite-ircoms">master 1</a>.</p>\r\n	</li>\r\n	<li>\r\n	<p>Des projets industriels ou de recherche sanctionnant aussi bien chaque unit&eacute; d&rsquo;enseignement (mini-projet) que la formation. Les mini-projets ont lieu parall&egrave;lement aux enseignements de septembre &agrave; janvier, contrairement au projet de fin d&rsquo;&eacute;tudes ayant lieu au mois de f&eacute;vrier qui lui est enti&egrave;rement consacr&eacute;. Tous les projets sont r&eacute;alis&eacute;s en &eacute;quipe d&rsquo;au plus 4 &eacute;tudiants, &agrave; l&rsquo;exception du projet de recherche (seul ou en bin&ocirc;me), sous la conduite d&rsquo;un chef de projet d&eacute;sign&eacute; par ses pairs et qui sert d&rsquo;interm&eacute;diaire entre le groupe et l&rsquo;enseignant-chercheur ou l&rsquo;industriel ayant propos&eacute; le sujet. Cela permet aux &eacute;tudiants d&rsquo;approfondir leurs connaissances et de se familiariser avec les aspects organisationnels, humains et techniques de la r&eacute;alisation d&rsquo;un projet.</p>\r\n	</li>\r\n	<li>\r\n	<p>Des dipl&ocirc;m&eacute;s polyvalents, &#39;&#39;couteaux suisses&#39;&#39; de la cybers&eacute;curit&eacute;.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2><span style="color:#b22222">Programme</span></h2>\r\n\r\n<h3>Septembre - Janvier : Cours, TD/TP, Mini-projets</h3>\r\n\r\n<h4>Unit&eacute;s d&#39;enseignements</h4>\r\n\r\n<p>Le pr&eacute;sentiel dans le cadre&nbsp; des unit&eacute;s d&rsquo;enseignement&nbsp; constituant le p&ocirc;le de comp&eacute;tence cybers&eacute;curit&eacute; est de 14 heures de cours magistral, 15 heures de travaux dirig&eacute;s et pratiques. Le temps de r&eacute;alisation d&rsquo;un mini-projet est estim&eacute; &agrave; 40 heures.</p>\r\n\r\n<ul>\r\n	<li><strong>IoT (objets connect&eacute;s) et s&eacute;curit&eacute;</strong>\r\n\r\n	<ul>\r\n		<li>Concepts fondamentaux</li>\r\n		<li>Vuln&eacute;rabilit&eacute;s et attaques</li>\r\n		<li>Collecte des flux r&eacute;seau</li>\r\n		<li>Transmission et stockage des flux r&eacute;seaux (Cloud)</li>\r\n		<li>Analyse des flux r&eacute;seau (ELK, Big Data)</li>\r\n		<li>Tests de vuln&eacute;rabilit&eacute; des objets connect&eacute;s<br />\r\n		&nbsp;</li>\r\n	</ul>\r\n	</li>\r\n	<li><strong>S&eacute;curit&eacute; des r&eacute;seaux et des communications</strong>\r\n	<ul>\r\n		<li>Concepts fondamentaux</li>\r\n		<li>Les r&eacute;seaux distants d&#39;entreprise et leur s&eacute;curit&eacute;</li>\r\n		<li>Les firewall\r\n		<ul>\r\n			<li>FW classiques et Next GenFW</li>\r\n			<li>Mode de d&eacute;ploiement (StandAlone, Cluster, haute disponibilit&eacute;)</li>\r\n			<li>Mode d&#39;administration, reporting .</li>\r\n		</ul>\r\n		</li>\r\n		<li>Sonde IPS (principes et limites)</li>\r\n		<li>Loadbalancer</li>\r\n		<li>WAF (Web application firewall)\r\n		<ul>\r\n			<li>Attaques visant les flux applicatifs</li>\r\n			<li>S&eacute;curisation des flux applicatifs<br />\r\n			&nbsp;</li>\r\n		</ul>\r\n		</li>\r\n	</ul>\r\n	</li>\r\n	<li><strong>Supervision de la s&eacute;curit&eacute; (SIEM/SOC)</strong>\r\n	<ul>\r\n		<li>Concepts fondamentaux</li>\r\n		<li>D&eacute;couverte des ressources</li>\r\n		<li>Collecte et analyse des log</li>\r\n		<li>Tests d&#39;int&eacute;grit&eacute; des syst&egrave;mes</li>\r\n		<li>D&eacute;tection d&#39;attaques</li>\r\n		<li>Dashbord</li>\r\n		<li>Gestion des alertes<br />\r\n		&nbsp;</li>\r\n	</ul>\r\n	</li>\r\n	<li><strong>Audit et Pentesting </strong>\r\n	<ul>\r\n		<li>Concepts de base</li>\r\n		<li>Audit</li>\r\n		<li>Techniques du pentesting,</li>\r\n		<li>Traitement des exploits et incidents</li>\r\n		<li>Pentesting r&eacute;seau</li>\r\n		<li>Pentesting des applications web</li>\r\n		<li>Pentesting des r&eacute;seaux sans fil<br />\r\n		&nbsp;</li>\r\n	</ul>\r\n	</li>\r\n	<li><strong>S&eacute;curit&eacute; des acc&egrave;s sans fil et des mobiles</strong>\r\n	<ul>\r\n		<li>Vuln&eacute;rabilit&eacute;s et attaques</li>\r\n		<li>S&eacute;curit&eacute; des r&eacute;seaux sans fil (IEEE802.11i, IEEE802.1x/M&eacute;thodes EAP)</li>\r\n		<li>BYOD et S&eacute;curit&eacute;</li>\r\n		<li>S&eacute;curit&eacute; des smartphones/tablettes</li>\r\n		<li>Gestion des la s&eacute;curit&eacute; des mobiles (MDM)<br />\r\n		&nbsp;</li>\r\n	</ul>\r\n	</li>\r\n	<li><strong>IAM &amp; Gouvernance des donn&eacute;es</strong>\r\n	<ul>\r\n		<li>Gestion d&#39;identit&eacute;s (Annuaires)</li>\r\n		<li>Mise &agrave; jour des donn&eacute;es, r&eacute;plication d&#39;annuaires</li>\r\n		<li>F&eacute;d&eacute;ration d&#39;identit&eacute;s (SSO)</li>\r\n		<li>S&eacute;curit&eacute; des acc&egrave;s aux applications (authentification multi-facteur)<br />\r\n		&nbsp;</li>\r\n	</ul>\r\n	</li>\r\n	<li><strong>Programmation s&eacute;curis&eacute;e &amp; s&eacute;curit&eacute; syst&egrave;me</strong>\r\n	<ul>\r\n		<li>S&eacute;curit&eacute; du code</li>\r\n		<li>S&eacute;curit&eacute; des applications</li>\r\n		<li>S&eacute;curit&eacute; syst&egrave;me<br />\r\n		&nbsp;</li>\r\n	</ul>\r\n	</li>\r\n	<li><strong>Aspects juridiques et l&eacute;gaux de la s&eacute;curit&eacute; </strong>(Cours : 18 h, TD : 18h)<br />\r\n	&nbsp;</li>\r\n	<li><strong>Anglais</strong> (TD : 18h, TP : 18h)</li>\r\n</ul>\r\n\r\n<h3>F&eacute;vrier - Ao&ucirc;t : projet et stage&nbsp;</h3>\r\n\r\n<ul>\r\n	<li>Projet de fin d&#39;&eacute;tudes (environ 140h) - F&eacute;vrier</li>\r\n	<li>Stage en entreprise ou en laboratoire de recherches (6 mois) - Mars &agrave; Ao&ucirc;t</li>\r\n</ul>\r\n\r\n<h2>Partenaires</h2>\r\n\r\n<p>Pour la d&eacute;finition, le suivi et la mise en application de ses programmes, le master IRCOMS travaille en &eacute;troite collaboration avec les experts issus des &eacute;quipes cybers&eacute;curit&eacute; des entreprises de la r&eacute;gion :</p>\r\n\r\n<ul>\r\n	<li>ADVENS</li>\r\n	<li>Voyages SNCF</li>\r\n	<li>YOURAX</li>\r\n	<li>DECATHLON</li>\r\n</ul>\r\n\r\n<h2>D&eacute;bouch&eacute;s</h2>\r\n\r\n<p>Les dipl&ocirc;m&eacute;s du master IRCOMS peuvent :</p>\r\n\r\n<ul>\r\n	<li>s&#39;orienter vers la recherche et pr&eacute;parer une th&egrave;se de doctorat, pour les plus comp&eacute;tents</li>\r\n	<li>int&eacute;grer le monde de l&#39;entreprise o&ugrave; ils travaillent g&eacute;n&eacute;ralement comme consultants, ing&eacute;nieurs s&eacute;curit&eacute; ou Ing&eacute;nieurs r&eacute;seaux et s&eacute;curit&eacute; dans des grands groupes, dans des SSII sp&eacute;cialis&eacute;es de la cybers&eacute;curit&eacute; chez des int&eacute;grateurs, des distributeurs, des clients finaux ou, apr&egrave;s des ann&eacute;es d&#39;exp&eacute;rience, chez des &eacute;diteurs.</li>\r\n</ul>\r\n\r\n<h3>M&eacute;tiers exerc&eacute;s</h3>\r\n\r\n<ul>\r\n	<li>Ing&eacute;nieur s&eacute;curit&eacute;/Analyste SOC</li>\r\n	<li>Ing&eacute;nieur S&eacute;curit&eacute; / Int&eacute;grateur</li>\r\n	<li>Ing&eacute;nieur R&eacute;seau &amp; S&eacute;curit&eacute;</li>\r\n	<li>Ing&eacute;nieur S&eacute;curit&eacute; /Expert IAM (Identity &amp; Access Management)</li>\r\n	<li>Ing&eacute;nieur S&eacute;curit&eacute; R &amp; D</li>\r\n	<li>Ing&eacute;nieur S&eacute;curit&eacute; /Expert Audit &amp; Pentesting</li>\r\n	<li>Consultant s&eacute;curit&eacute;</li>\r\n</ul>\r\n\r\n<p>Apr&egrave;s quelques ann&eacute;es d&#39;activit&eacute;, les plus exp&eacute;riment&eacute;s de nos dipl&ocirc;m&eacute;s sont aujourd&#39;hui :</p>\r\n\r\n<ul>\r\n	<li>RSSI (Responsable de la s&eacute;curit&eacute; des syst&egrave;mes d&#39;information),</li>\r\n	<li>Architecte R&eacute;seaux &amp; S&eacute;curit&eacute;,</li>\r\n	<li>Expert PCI DSS,</li>\r\n	<li>Ing&eacute;nieur avant-vente.</li>\r\n</ul>\r\n\r\n<h3>Principaux employeurs</h3>\r\n\r\n<p>On retrouve des dipl&ocirc;m&eacute;s du master IRCOMS dans de grands groupes, dans des SSII sp&eacute;cialis&eacute;es de la cybers&eacute;curit&eacute;, chez des clients finaux,&nbsp; des int&eacute;grateurs, des distributeurs et des &eacute;diteurs, &agrave; l&rsquo;instar de Thales, Morpho SAFRAN,&nbsp; IBM, Sogeti, Orange, Assystem, Worldline, BT, Voyages SNCF, Advens, Yourax, D&eacute;cathlon, SFR Business Solutions, Cr&eacute;dit Agricole, GFI, Stormshield, Nomios, Modis, etc.</p>\r\n\r\n<h2>Admission</h2>\r\n\r\n<ul>\r\n	<li>de plein droit pour les titulaires du <a href="http://www.univ-valenciennes.fr/ISTV/master-1-informatique-parcours-ingenierie-des-reseaux-communications-mobiles-et-securite-ircoms">master1 IRCOMS</a>.</li>\r\n	<li>sur dossier et entretien pour les titulaires d&#39;un master 1 informatique ou tout autre dipl&ocirc;me &eacute;quivalent en cybers&eacute;curit&eacute;,</li>\r\n	<li>par validation des acquis de l&#39;exp&eacute;rience (VAE).</li>\r\n</ul>\r\n\r\n<h3>Inscription</h3>\r\n\r\n<p>en deux &eacute;tapes :</p>\r\n\r\n<ol>\r\n	<li><strong>Dossier de candidature</strong> &agrave; retirer &agrave; l&#39;ISTV ou &agrave; <a href="http://candidature.univ-valenciennes.fr/candidats-sceve" rel="noreferrer" target="_blank">t&eacute;l&eacute;charger sur le site de l&#39;universit&eacute;</a></li>\r\n	<li><strong>Dossier administratif</strong>, lorsque le dossier de candidature est accept&eacute; : inscription en ligne sur <a href="http://www.univ-valenciennes.fr/candidature-inscription" rel="noreferrer" target="_blank">www.univ-valenciennes.fr/candidature-inscription</a></li>\r\n</ol>\r\n\r\n<h2>Alternance</h2>\r\n\r\n<p>Possibilit&eacute; d&#39;alternance.</p>\r\n\r\n<h2>International</h2>\r\n\r\n<p>Possibilit&eacute; d&#39;effectuer un stage dans un laboratoire universitaire ou en entreprise &agrave; l&#39;&eacute;tranger. La validation des r&eacute;sultats est obtenue gr&acirc;ce au syst&egrave;me ECTS. La ma&icirc;trise de l&#39;anglais et/ou de la langue du pays d&#39;accueil est recommand&eacute;e (niveau B1 minimum). Possibilit&eacute; de valider votre niveau de langue par un CLES (en anglais, allemand, espagnol, italien et russe) ou un TOEIC (Test Of English for International Communication).</p>\r\n\r\n<h3>Type de mobilit&eacute;</h3>\r\n\r\n<ul>\r\n	<li>Mobilit&eacute; Acad&eacute;mique</li>\r\n</ul>\r\n\r\n<h3>Pays d&#39;accueil</h3>\r\n\r\n<p>ERASMUS : Allemagne, Autriche, Belgique, Espagne, Finlande, Italie, Norv&egrave;ge, Pologne, Portugal, Roumanie, Royaume-Uni, R&eacute;publique Tch&egrave;que. CREPUQ : toutes universit&eacute;s qu&eacute;b&eacute;coises. Accords bilat&eacute;raux : Br&eacute;sil, Canada, Chili, Mexique, Russie.</p>\r\n\r\n<ul>\r\n	<li><a href="http://www.univ-valenciennes.fr/etudiants/etudier-a-l-etranger">Toutes les informations concernant les &eacute;tudes &agrave; l&#39;&eacute;tranger</a></li>\r\n</ul>\r\n\r\n<h3>Principaux pays partenaires</h3>\r\n\r\n<p>UE , Canada , USA , Br&eacute;sil</p>\r\n\r\n<h2>Fiche de la formation</h2>\r\n\r\n<ul>\r\n	<li><a href="http://www.univ-valenciennes.fr/formations/plaquettes/istv-master-informatique-ingenierie-reseaux-communications-mobiles-securite.pdf" rel="noreferrer" target="_blank">T&eacute;l&eacute;charger la plaquette de la formation</a></li>\r\n</ul>\r\n\r\n<h2>Contacts</h2>\r\n\r\n<p><strong>Responsable p&eacute;dagogique</strong><br />\r\nDhavy GANTSOU<br />\r\nTel : +33 3 27 51 19 44<br />\r\nCouriel : <a class="spamspan" href="mailto:dhavy.gantsou@univ-valenciennes.fr">dhavy.gantsou@univ-valenciennes.fr</a></p>\r\n\r\n<p><strong>Secr&eacute;tariat de la formation initiale</strong><br />\r\nTel : +33 3 27 51 18 20<br />\r\nCouriel : <a class="spamspan" href="mailto:istv-master-ircoms@univ-valenciennes.fr">istv-master-ircoms@univ-valenciennes.fr</a></p>\r\n\r\n<p><strong>Secr&eacute;tariat de la formation continue (alternance)</strong><br />\r\nTel : +33 3 27 51 18 55<br />\r\nCouriel : <a class="spamspan" href="mailto:istv-fc@univ-valenciennes.fr">istv-fc@univ-valenciennes.fr</a></p>', NULL, 0, 'programme-du-master-2-ingenierie-des-reseaux-2017-03-02-18-17', 'Dhavy.Gantsou@univ-valenciennes.fr', NULL);
INSERT INTO `advert` (`id`, `image_id`, `published`, `date`, `title`, `author`, `content`, `updated_at`, `nb_applications`, `slug`, `email`, `ip`) VALUES
(66, 62, 1, '2017-03-07 17:41:00', 'HONORE - Python par la pratique', 'Honoré Hounwanou', '<h3>L&rsquo;auteur</h3>\r\n\r\n<p>Honor&eacute; Hounwanou est un d&eacute;veloppeur, formateur et entrepreneur r&eacute;sidant au Canada.</p>\r\n\r\n<p>Titulaire d&rsquo;un Master en T&eacute;l&eacute;communications, il effectue actuellement un Doctorat en S&eacute;curit&eacute; Informatique &agrave; l&rsquo;Universit&eacute; LAVAL.</p>\r\n\r\n<p>Il a fond&eacute; il y a de cela 4 ans, la plateforme d&rsquo;E-learning <a href="http://teachersdunet.com/">LES TEACHERS DU NET</a> offrant des formations et tutoriels de cat&eacute;gories diverses expliqu&eacute;s de mani&egrave;re simple et chirurgicale.</p>\r\n\r\n<p>Il est Co-fondateur et Directeur Technique du D&eacute;partement D&eacute;veloppement &amp; Recherche de la startup <a href="https://paydunya.com">PAYDUNYA</a> (Solution de paiement en ligne via T&eacute;l&eacute;phone Mobile).</p>\r\n\r\n<p>Il parle couramment le Python, Java, PHP, Ruby, HTML/CSS/JavaScript, C/C++, C#, SQL, Scratch.</p>\r\n\r\n<h2>1. Introduction</h2>\r\n\r\n<p>Tr&egrave;s souvent lorsque nous nous lan&ccedil;ons dans l&rsquo;apprentissage d&rsquo;un nouveau langage de programmation, nous commen&ccedil;ons par une phase th&eacute;orique dans laquelle nous essayons un tant soit peu de comprendre le principe de fonctionnement dudit langage et tout le jargon informatique associ&eacute;. Ce n&rsquo;est qu&rsquo;apr&egrave;s cela, que nous pensons g&eacute;n&eacute;ralement &agrave; <strong>r&eacute;ellement pratiquer</strong>.</p>\r\n\r\n<p>Mais vu d&rsquo;un autre angle et &eacute;tant donn&eacute; que l&rsquo;objectif final consiste habituellement &agrave; r&eacute;aliser plus tard quelques projets avec ce fameux langage, je me suis dit qu&rsquo;il pourrait &ecirc;tre &eacute;galement int&eacute;ressant, de faire pourquoi pas, d&rsquo;une pierre deux coups. <strong>C&rsquo;est-&agrave;-dire apprendre, mais cette fois-ci en pratiquant</strong>!</p>\r\n\r\n<p>Ainsi, gr&acirc;ce &agrave; ce livre, nous apprendrons &agrave; programmer en Python en nous amusant &agrave; cr&eacute;er une s&eacute;rie d&rsquo;applications ludiques. Python est un langage tr&egrave;s simple d&rsquo;apprentissage et vous pouvez l&rsquo;utiliser pour cr&eacute;er par exemple des applications Web, des jeux vid&eacute;os, des applications mobiles, voir m&ecirc;me un moteur de recherche!</p>\r\n\r\n<p>Histoire de vous donner une id&eacute;e des diff&eacute;rents types d&rsquo;applications que vous pourrez r&eacute;aliser avec le langage Python, je vous invite &agrave; visiter la page <a href="https://www.python.org/about/success/">Histoires &agrave; succ&egrave;s</a> du site officiel de Python &mdash; D&eacute;sol&eacute; aux allergiques &agrave; la langue de Shakespeare :).</p>\r\n\r\n<p>Nous commencerons en douceur, en abordant les notions les plus simples afin de ne perdre personne en chemin. Ce sera ensuite le moment de nous int&eacute;resser &agrave; des notions beaucoup plus avanc&eacute;es comme celles des structures de donn&eacute;es (les listes, les tuples, les dictionnaires&hellip;), des modules, des packages, des fichiers, du concept de programmation orient&eacute;e objet&hellip;</p>\r\n\r\n<p>Hmm sacr&eacute; programme n&rsquo;est-ce pas? Alors ready? Let&rsquo;s go!</p>\r\n\r\n<h3>1.1 Faire un don</h3>\r\n\r\n<p>J&rsquo;ai mis des mois &agrave; travailler sur ce livre et je suis s&ucirc;r que vous allez l&rsquo;adorer. Il est enti&egrave;rement <strong>GRATUIT</strong> et il le restera! Toutefois, vous pouvez m&rsquo;aider dans cette mission de partage gratuit du savoir en faisant un <a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=LGFM78CBR2J2Q">don</a> symbolique. Sachez que j&rsquo;appr&eacute;cierai &eacute;norm&eacute;ment. Voici encore le <a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=LGFM78CBR2J2Q">lien</a>. Merci :).</p>\r\n\r\n<h3>1.2 Pr&eacute;requis</h3>\r\n\r\n<p>Il vous faut tout simplement avoir un ordinateur avec n&rsquo;importe lequel des principaux syst&egrave;mes d&rsquo;exploitation &mdash; Windows, Linux, Mac et je crois que ce sera tout :).</p>\r\n\r\n<h3>1.3 Corrections et suggestions</h3>\r\n\r\n<p>Nul n&rsquo;est parfait, surtout lorsqu&rsquo;il s&rsquo;agit d&rsquo;&eacute;crire un document technique. Si vous trouvez des fautes d&rsquo;orthographe ou de grammaire, des erreurs de programmation etc, je vous prie de bien vouloir me le notifier par mail. Si l&rsquo;erreur s&rsquo;av&egrave;re verifi&eacute;e, une modification sera apport&eacute;e au document afin de corriger ladite erreur. Mon adresse e-mail personnelle: mercuryseries@gmail.com.</p>\r\n\r\n<p>Merci.</p>\r\n\r\n<h3>1.4 R&eacute;sum&eacute;</h3>\r\n\r\n<p>Dans ce premier chapitre, nous avons appris que:</p>\r\n\r\n<ul>\r\n	<li>Python est actuellement l&rsquo;un des meilleurs langages de programmation. Il est &agrave; la fois simple, &eacute;l&eacute;gant et puissant.</li>\r\n	<li>Python est un langage de programmation fascinant et id&eacute;al pour des personnes qui souhaitent d&eacute;couvrir le monde de la programmation.</li>\r\n	<li>Python est un langage polyvalent. On peut l&rsquo;utiliser pour concevoir des applications vari&eacute;es: sites Web, jeux vid&eacute;os, applications mobiles&hellip;</li>\r\n</ul>\r\n\r\n<h2>2. Jargon Informatique</h2>\r\n\r\n<p>Ce chapitre aurait d&ucirc; avoir pour titre &ldquo;De la pure th&eacute;orie!&rdquo; car c&rsquo;est ce &agrave; quoi vous aurez droit tout au long de ce chapitre. L&rsquo;id&eacute;e est de pouvoir d&eacute;couvrir un tant soit peu le jargon informatique affili&eacute; au monde de la programmation et ce via des exemples concrets.</p>\r\n\r\n<p>Si vous &ecirc;tes d&eacute;butant, les quelques petits termes techniques dont regorge ce chapitre pourront vous donner l&rsquo;impression que les choses ont l&rsquo;air un tantinet compliqu&eacute;es. Soyez sans crainte, ce n&rsquo;est pas du tout le cas. <em>Programmer a toujours &eacute;t&eacute; fun!</em></p>\r\n\r\n<p>D&rsquo;autre part, si vous n&rsquo;&ecirc;tes pas &agrave; votre premier langage de programmation, vous risquez d&rsquo;avoir l&rsquo;air de vous ennuyer en lisant ce chapitre. Mais comme on le dit, la r&eacute;p&eacute;tition est p&eacute;dagogique et je peux vous garantir que vous apprendrez forc&eacute;ment quelque chose de nouveau.</p>\r\n\r\n<p>Vous &ecirc;tes toutefois libres de passer directement &agrave; la section consacr&eacute;e &agrave; <a href="https://leanpub.com/premiers-pas-avec-python/read#installation-python">l&rsquo;installation de Python</a>.</p>\r\n\r\n<h3>2.1 Qu&rsquo;est-ce que la programmation ?</h3>\r\n\r\n<p>Comme vous le savez s&ucirc;rement, il existe une pl&eacute;thore de langages de programmation &agrave; savoir le C, C++, Java, Perl, PHP, Python, Ruby pour ne citer que ceux-l&agrave;. Jugez-en par vous m&ecirc;me, <a href="https://fr.wikipedia.org/wiki/Liste_des_langages_de_programmation">la liste est longue</a> :). Mon choix s&rsquo;est plut&ocirc;t port&eacute; sur le dernier <strong>PYTHON</strong> pour son dynamisme, sa portabilit&eacute; et sa syntaxe assez &eacute;l&eacute;gante.</p>\r\n\r\n<p>Alors qu&rsquo;est-ce que cela signifie : langage de programmation, portabilit&eacute;, dynamisme, syntaxe ?</p>\r\n\r\n<p>Si ces termes vous semblent abstraits et repr&eacute;sentent des boites noires &agrave; vos yeux, ne vous inqui&eacute;tez surtout pas, nous apporterons lumi&egrave;re &agrave; tout ceci dans les sections suivantes. C&rsquo;est en effet l&rsquo;objectif de ce chapitre.</p>\r\n\r\n<h4>2.1.1 Connaissances d&eacute;clarative et imp&eacute;rative</h4>\r\n\r\n<p>Dans la vie r&eacute;elle, il existe deux types de connaissances. Nous avons la connaissance dite <em>d&eacute;clarative</em> et celle dite <em>imp&eacute;rative</em>.</p>\r\n\r\n<p><strong>La connaissance d&eacute;clarative</strong> est compos&eacute;e d&rsquo;&eacute;nonciations &agrave; priori vraies. Par exemple:</p>\r\n\r\n<ul>\r\n	<li>Il faut bien manger pour &ecirc;tre en bonne sant&eacute;.</li>\r\n	<li>Quand le feu est rouge, les voitures doivent s&rsquo;arr&ecirc;ter et laisser les pi&eacute;tons passer.</li>\r\n	<li>Ou encore y est une racine carr&eacute;e de x si et seulement si y*y = x.</li>\r\n</ul>\r\n\r\n<p>Le dernier exemple semble plut&ocirc;t int&eacute;ressant, mais peut d&eacute;j&agrave; faire rougir les allergiques aux math&eacute;matiques.</p>\r\n\r\n<p>D&eacute;taillons un peu, histoire d&rsquo;&ecirc;tre sur la m&ecirc;me longueur d&rsquo;onde. M&ecirc;me si je sais tr&egrave;s bien que cela n&rsquo;en vaut pas la peine, je me dis que &ccedil;a peut arriver de temps en temps quelques petites fuites de cerveau :).</p>\r\n\r\n<p>Alors voil&agrave;:</p>\r\n\r\n<ul>\r\n	<li>4 est une racine carr&eacute;e de 16 car 4*4 = 16</li>\r\n	<li>3 est une racine carr&eacute;e de 9 car 3*3 = 9 &mdash; aussi simple que cela.</li>\r\n</ul>\r\n\r\n<p><strong>La connaissance imp&eacute;rative</strong> quant &agrave; elle fait r&eacute;f&eacute;rence &agrave; un proc&eacute;d&eacute; permettant d&rsquo;accomplir une t&acirc;che. C&rsquo;est un peu comme une recette.</p>\r\n\r\n<p>Je vous donne un petit exemple pour &eacute;claircir les choses.</p>\r\n\r\n<p>Pour calculer le double du tiers d&rsquo;un nombre, il faut:</p>\r\n\r\n<ol>\r\n	<li>Avoir le nombre lui-m&ecirc;me (Et c&rsquo;est &agrave; ce moment l&agrave; que vous vous dites: c&rsquo;est &eacute;vident !).</li>\r\n	<li>Le diviser par 3 pour avoir son tiers.</li>\r\n	<li>Multiplier ensuite par 2 le r&eacute;sultat obtenu en <strong>2.</strong>, pour avoir le double du tiers dudit nombre.</li>\r\n</ol>\r\n\r\n<p>A priori, en suivant cette petite recette, on peut avoir le double du tiers de n&rsquo;importe quel nombre.</p>\r\n\r\n<p>C&rsquo;est cela en quelque sorte la connaissance imp&eacute;rative.</p>\r\n\r\n<p>Si je vous ai d&eacute;fini ce que sont la connaissance d&eacute;clarative et la connaissance imp&eacute;rative, c&rsquo;est parce qu&rsquo;un bon programmeur doit avoir ces deux types de connaissances, du moins en fonction de ce qu&rsquo;il souhaite r&eacute;aliser comme programme.</p>\r\n\r\n<p>Je m&rsquo;explique. Si vous voulez &eacute;crire un programme qui calcule l&rsquo;intensit&eacute; de la force &eacute;lectrostatique entre deux charges &eacute;lectriques q1 et q2 s&eacute;par&eacute;es par une distance r.</p>\r\n\r\n<p>Il faut avoir premi&egrave;rement la connaissance d&eacute;clarative, c&rsquo;est-&agrave;-dire qu&rsquo;est-ce que l&rsquo;intensit&eacute; de la force &eacute;lectrostatique ?</p>\r\n\r\n<h4>La force &eacute;lectrostatique</h4>\r\n\r\n<p>L&rsquo;intensit&eacute; de la force &eacute;lectrostatique entre deux charges &eacute;lectriques est proportionnelle au produit des deux charges et est inversement proportionnelle au carr&eacute; de la distance entre les deux charges. - Cf Wikip&eacute;dia</p>\r\n\r\n<p>Et deuxi&egrave;mement la connaissance imp&eacute;rative, c&rsquo;est-&agrave;-dire comment calculer la force &eacute;lectrostatique cr&eacute;&eacute;e par 2 charges?</p>\r\n\r\n<ol>\r\n	<li>Avoir les valeurs num&eacute;riques de q1 et q2.</li>\r\n	<li>Multiplier q1 et q2.</li>\r\n	<li>Multiplier ensuite le r&eacute;sultat obtenu en <strong>2.</strong> par la constante de coulomb K</li>\r\n	<li>Diviser le r&eacute;sultat obtenu en <strong>3.</strong> par le carr&eacute; de la distance entre les deux charges (r<sup>2</sup>).</li>\r\n</ol>\r\n\r\n<p>Bah ne vous inqui&eacute;tez surtout pas si vous ne savez toujours pas ce qu&rsquo;est la force &eacute;lectrostatique :). Ceci n&rsquo;est pas l&rsquo;objectif recherch&eacute; dans cet ouvrage. Comprenez plut&ocirc;t la logique qui est derri&egrave;re cet exemple. Nous avons eu besoin des connaissances d&eacute;clarative et imp&eacute;rative pour r&eacute;soudre notre probl&egrave;me pr&eacute;c&eacute;dent. C&rsquo;est tout ce qu&rsquo;il y a &agrave; comprendre!</p>\r\n\r\n<h4>2.1.2 Algorithme, programme et instruction</h4>\r\n\r\n<p>Voici trois d&eacute;finitions fondamentales que vous devrez absolument retenir. N&rsquo;h&eacute;sitez pas &agrave; les relire plusieurs fois s&rsquo;il le faut :).</p>\r\n\r\n<ul>\r\n	<li>Un algorithme est tout simplement un proc&eacute;d&eacute; permettant de r&eacute;soudre un probl&egrave;me donn&eacute;.</li>\r\n	<li>Un programme quant &agrave; lui est un ensemble d&rsquo;instructions ex&eacute;cut&eacute;es par l&rsquo;ordinateur. (C&rsquo;est en effet la traduction de votre algorithme dans un langage de programmation).</li>\r\n	<li>Une instruction est une t&acirc;che que doit ex&eacute;cuter l&rsquo;ordinateur.</li>\r\n</ul>\r\n\r\n<p>Certains programmeurs parlent plut&ocirc;t de <strong>script</strong> en lieu et place de programme. On peut dire que programme = script. Ce ne sont en grosso-modo que des synonymes.</p>\r\n\r\n<h3>2.2 Qu&rsquo;est-ce qu&rsquo;un langage de programmation?</h3>\r\n\r\n<p>Rappelons qu&rsquo;un programme est juste une s&eacute;quence d&rsquo;instructions disant &agrave; l&rsquo;ordinateur ce qu&rsquo;il doit faire. &Eacute;videmment, nous avons besoin de fournir ces instructions dans un langage que l&rsquo;ordinateur peut comprendre. Il aurait &eacute;t&eacute; tr&egrave;s int&eacute;ressant si nous pouvions juste dire &agrave; un ordinateur ce qu&rsquo;il doit faire dans notre langue maternelle, comme dans les films de science-fiction. Malheureusement, en d&eacute;pit de plusieurs efforts des informaticiens (y compris moi :) ), cr&eacute;er des ordinateurs capables de comprendre le langage humain est un probl&egrave;me encore non r&eacute;solu.</p>\r\n\r\n<p>M&ecirc;me si les ordinateurs pouvaient nous comprendre, le langage humain n&rsquo;est vraiment pas commode pour d&eacute;crire des algorithmes assez complexes car il est rempli d&rsquo;ambigu&iuml;t&eacute; et d&rsquo;imperfection.</p>\r\n\r\n<p>Prenons un petit exemple (j&rsquo;aime bien les exemples :) ). Si je disais &ldquo;J&rsquo;ai vu un homme dans le parc avec des jumelles&rdquo;. Est-ce que cela veut dire que j&rsquo;avais des jumelles dans les mains? Ou plut&ocirc;t c&rsquo;&eacute;tait l&rsquo;homme en question que j&rsquo;ai vu dans le parc qui avait des jumelles? Et de plus qui est-ce qui &eacute;tait dans le parc?</p>\r\n\r\n<p>J&rsquo;ose esp&eacute;rer que vous comprenez &agrave; pr&eacute;sent ce que je voulais dire. Les informaticiens ont donc essay&eacute; de r&eacute;soudre ce probl&egrave;me en cr&eacute;ant des notations sp&eacute;ciales pour exprimer nos intentions de mani&egrave;re pr&eacute;cise et non ambigu&euml;. L&rsquo;ensemble de ces notations sp&eacute;ciales forme ce qu&rsquo;on appelle un <strong>langage de programmation</strong>.</p>\r\n\r\n<p>Chaque structure dans un langage de programmation a une forme pr&eacute;cise (syntaxe) et une signification correcte.</p>\r\n\r\n<p>Python est un exemple de langage de programmation et c&rsquo;est ce dernier que nous allons d&eacute;couvrir dans ce livre. Vous avez peut &ecirc;tre d&eacute;j&agrave; entendu parler d&rsquo;autres langages de programmation comme le C++, C#, Ruby, Java&hellip;</p>\r\n\r\n<p>Bien que ces langages diff&egrave;rent de beaucoup de d&eacute;tails, ils partagent la propri&eacute;t&eacute; d&rsquo;avoir une syntaxe bien d&eacute;finie et non ambigu&euml; et une s&eacute;mantique.</p>\r\n\r\n<p>Tous les langages cit&eacute;s plus haut sont des exemples de langages de haut niveau. En fait, plus le langage de programmation se rapproche du langage humain, plus on dit qu&rsquo;il est de haut niveau. (mais &eacute;videmment la traduction en binaire prendra un peu plus de temps :) )</p>\r\n\r\n<p>Binaire? L&rsquo;ordinateur ne comprend en r&eacute;alit&eacute; qu&rsquo;un seul langage qu&rsquo;on appelle commun&eacute;ment <strong>langage machine ou langage binaire</strong>. Ce langage n&rsquo;est compos&eacute; que de deux chiffres 0 et 1 appel&eacute;s aussi <strong>bits (&eacute;l&eacute;ment binaire)</strong>. En d&rsquo;autres termes, l&rsquo;ordinateur ne comprend que des 0 et 1. &Eacute;crire un programme avec des 0 et 1 est un vrai parcours de combattant.</p>\r\n\r\n<p>Ainsi gr&acirc;ce au langage de programmation qui se rapproche un peu plus du langage naturel (anglais, fran&ccedil;ais &hellip;), nous pourrons &eacute;crire nos programmes (on dit aussi coder) plus ais&eacute;ment. Ce code sera ensuite traduit en langage machine afin que l&rsquo;ordinateur puisse le comprendre.</p>\r\n\r\n<p>Alors comment est-ce que notre code est traduit en langage machine ??</p>\r\n\r\n<h4>2.2.1 Compilateur Vs Interpr&eacute;teur</h4>\r\n\r\n<p>Il existe de mani&egrave;re g&eacute;n&eacute;rale deux moyens principaux pour traduire un code &eacute;crit dans un langage de programmation en langage machine. Un langage de programmation peut &ecirc;tre soit compil&eacute; ou soit interpr&eacute;t&eacute;.</p>\r\n\r\n<h5>Compilateur</h5>\r\n\r\n<p>Un compilateur est un programme complexe qui prend un programme &eacute;crit dans un langage de programmation (en C par exemple) et le traduit en un programme &eacute;quivalent en langage machine.</p>\r\n\r\n<p>Le programme &eacute;crit dans un langage de programmation est appel&eacute; <strong>code source</strong> et le r&eacute;sultat obtenu apr&egrave;s traduction en code machine est un programme que l&rsquo;ordinateur peut directement ex&eacute;cuter.</p>\r\n\r\n<p><img alt="Processus de compilation d''un programme" src="https://leanpub.com/site_images/premiers-pas-avec-python/compilation.png" /></p>\r\n\r\n<p>Processus de compilation d&rsquo;un programme</p>\r\n\r\n<h5>Interpr&eacute;teur</h5>\r\n\r\n<p>Un interpr&eacute;teur est un programme qui simule un ordinateur qui comprend un langage de haut-niveau. Plut&ocirc;t que traduire le code source du programme en langage machine, l&rsquo;interpr&eacute;teur analyse et ex&eacute;cute le code source instruction par instruction.</p>\r\n\r\n<p><strong>Python est un exemple de langage interpr&eacute;t&eacute;</strong>. Ce qui revient &agrave; dire que nous aurons besoin d&rsquo;un interpr&eacute;teur Python afin de pouvoir ex&eacute;cuter nos futurs programmes. Nous verrons comment l&rsquo;installer dans le prochain chapitre.</p>\r\n\r\n<p><img alt="Processus d''interprétation d''un programme" src="https://leanpub.com/site_images/premiers-pas-avec-python/interpretation.png" /></p>\r\n\r\n<p>Processus d&rsquo;interpr&eacute;tation d&rsquo;un programme</p>\r\n\r\n<p>La diff&eacute;rence entre l&rsquo;interpr&eacute;tation et la compilation est que la compilation est un peu plus courte lors de la traduction en langage machine. Une fois le programme compil&eacute; et que tout fonctionne, il peut &ecirc;tre ex&eacute;cut&eacute; plusieurs fois sans avoir besoin de compiler &agrave; nouveau le code source. Alors que dans le cas de l&rsquo;interpr&eacute;teur, il a besoin d&rsquo;&ecirc;tre lanc&eacute; &agrave; chaque fois qu&rsquo;on ex&eacute;cute le programme vu qu&rsquo;il devra de nouveau analyser et ex&eacute;cuter le code source instruction par instruction. Les programmes compil&eacute;s ont donc tendance &agrave; &ecirc;tre plus rapide &agrave; l&rsquo;ex&eacute;cution, vu que la traduction est faite une fois pour toute, mais les langages interpr&eacute;t&eacute;s permettent une plus grande flexibilit&eacute; pour l&rsquo;environnement de programmation car les programmes peuvent &ecirc;tre d&eacute;velopp&eacute;es et ex&eacute;cut&eacute;s de mani&egrave;re interactive.</p>\r\n\r\n<p>Le processus d&rsquo;interpr&eacute;tation fait ressortir un autre avantage, c&rsquo;est que les programmes &eacute;crits pourront &ecirc;tre g&eacute;n&eacute;ralement ex&eacute;cut&eacute;s sur plusieurs plateformes (plusieurs syst&egrave;mes d&rsquo;exploitation diff&eacute;rents); on parle de <strong>portabilit&eacute;</strong>.</p>\r\n\r\n<p>Pour r&eacute;sumer, sachez qu&rsquo;un programme &eacute;crit dans un langage de programmation peut &ecirc;tre ex&eacute;cut&eacute; sur plusieurs sortes d&rsquo;ordinateurs tant qu&rsquo;il y a un compilateur ou interpr&eacute;teur appropri&eacute;.</p>\r\n\r\n<h4>2.2.2 Syntaxe, s&eacute;mantique statique, s&eacute;mantique</h4>\r\n\r\n<h5>Syntaxe</h5>\r\n\r\n<p><strong>La syntaxe</strong> permet de d&eacute;finir les s&eacute;quences de caract&egrave;res et de symboles constituants une cha&icirc;ne bien form&eacute;e.</p>\r\n\r\n<p>Exemple:</p>\r\n\r\n<ul>\r\n	<li>3 + 5 (Bonne syntaxe)</li>\r\n	<li>3 5 (Mauvaise syntaxe)</li>\r\n</ul>\r\n\r\n<p>En effet, une expression est compos&eacute;e d&rsquo;une op&eacute;rande suivi d&rsquo;un op&eacute;rateur suivi &agrave; son tour d&rsquo;une autre op&eacute;rande. Pour faire simple, <strong>3 + 5</strong> est une expression car nous avons bel et bien une op&eacute;rande (3) , un op&eacute;rateur (+) et une autre op&eacute;rande (5). Ce qui n&rsquo;est pas le cas dans la deuxi&egrave;me expression (elle n&rsquo;en n&rsquo;est pas une) o&ugrave; il n&rsquo;y a pas d&rsquo;op&eacute;rateur.</p>\r\n\r\n<h5>S&eacute;mantique statique</h5>\r\n\r\n<p><strong>La s&eacute;mantique statique</strong> quant &agrave; elle v&eacute;rifie si les chaines bien form&eacute;es ont une signification.</p>\r\n\r\n<p>Exemple:</p>\r\n\r\n<ul>\r\n	<li>&lsquo;Premier&rsquo; + &lsquo;cours&rsquo; (Bonne syntaxe et bonne s&eacute;mantique statique) car on peut additionner deux textes. On parle en jargon informatique de <strong>concat&eacute;nation</strong>. Mais soyez sans crainte, nous en reparlerons.</li>\r\n	<li>3 + &lsquo;abc&rsquo; (Bonne syntaxe mais mauvaise s&eacute;mantique statique) cela n&rsquo;a aucun sens! On ne peut additionner banane et pomme :)</li>\r\n</ul>\r\n\r\n<h5>S&eacute;mantique</h5>\r\n\r\n<p><strong>La s&eacute;mantique</strong>, une fois l&rsquo;expression &eacute;valu&eacute;e, v&eacute;rifie si l&rsquo;op&eacute;ration est possible ou non.</p>\r\n\r\n<p>Exemple: 3 / 0. Ici la syntaxe et la s&eacute;mantique statique sont correctes mais par contre la s&eacute;mantique est mauvaise car on ne peut diviser un nombre par 0.</p>\r\n\r\n<p>Tous ces termes ne sont que techniques. Donnez vous le temps de les assimiler ou de les oublier :).</p>\r\n\r\n<h3>2.3 Le langage Python</h3>\r\n\r\n<p>Dans cette section, nous parlerons du langage Python. Nous verrons de fa&ccedil;on sommaire son histoire et ses forces.</p>\r\n\r\n<h4>2.3.1 Naissance de Python</h4>\r\n\r\n<p>Comme vous le savez maintenant, Python est un langage de programmation. Il a &eacute;t&eacute; cr&eacute;&eacute; en 1991 par le d&eacute;veloppeur n&eacute;erlandais <strong>Guido van Rossum</strong>.</p>\r\n\r\n<p><img alt="Guido van Rossum" src="https://leanpub.com/site_images/premiers-pas-avec-python/guido_van_rossum.jpg" /></p>\r\n\r\n<p>Guido van Rossum</p>\r\n\r\n<p>Guido a d&eacute;cid&eacute; de baptiser son projet <strong>Python</strong> en r&eacute;f&eacute;rence &agrave; la s&eacute;rie t&eacute;l&eacute;vis&eacute;e des <a href="https://fr.wikipedia.org/wiki/Monty_Python">Monty Python</a> dont il en est un grand fan.</p>\r\n\r\n<p>La syntaxe de Python ressemble un tant soit peu &agrave; celle de Perl, Ruby ou encore Smalltalk.</p>\r\n\r\n<p>Ne vous inqui&eacute;tez surtout pas si vous ne connaissez aucun de ces trois langages de progammation. Je vous expliquerai tout ce que vous devez savoir sur Python. Mais si par contre vous connaissez l&rsquo;un de ces langages, il va s&rsquo;en dire que votre apprentissage de Python en sera facilit&eacute;.</p>\r\n\r\n<h4>2.3.2 Pourquoi choisir Python?</h4>\r\n\r\n<p>Vous avez probablement choisi d&rsquo;apprendre &agrave; programmer en Python parce que vous avez entendu du bien de ce langage ou tout simplement parce que vous souhaitez le d&eacute;couvrir par pure curiosit&eacute;. Toutefois, il peut vous sembler encore difficile &agrave; ce moment pr&eacute;cis de r&eacute;pondre &agrave; la question suivante: <em>&ldquo;Pourquoi Python et pas l&rsquo;un des autres langages?&rdquo;</em>.</p>\r\n\r\n<p>Laissez moi vous donnez quelques raisons de choisir le langage Python:</p>\r\n\r\n<ul>\r\n	<li>Python est facile d&rsquo;apprentissage.</li>\r\n	<li>Python est un langage orient&eacute; objet. Si le concept de programmation orient&eacute;e objet ne vous est pas familier, ne vous inqui&eacute;tez surtout pas, un chapitre tout entier y sera d&eacute;di&eacute;. Apr&egrave;s l&rsquo;avoir lu, vous comprendrez pourquoi c&rsquo;est une bonne chose que Python soit orient&eacute; objet. Mais si vous avez d&eacute;j&agrave; eu &agrave; faire de la programmation orient&eacute;e objet dans un langage autre que Python, vous verrez que Python poss&egrave;de certaines particularit&eacute;s.</li>\r\n	<li>Python a une &eacute;l&eacute;gante syntaxe, ce qui facilitera grandement la lisibilit&eacute; de tous vos scripts Python.</li>\r\n	<li>Python d&eacute;pend fortement des espaces, ce qui vous contraint en quelque sorte &agrave; &eacute;crire des programmes plus lisibles.</li>\r\n	<li>Pas d&rsquo;obligation &agrave; utiliser des points virgules comme en langage C ou encore PHP. Python fera le travail pour vous.</li>\r\n	<li>Avec Python vous n&rsquo;avez qu&rsquo;&agrave; dire ce que vous souhaitez faire, et le travail sera fait. Par exemple si je veux trier un ensemble de valeurs, je n&rsquo;aurai qu&rsquo;&agrave; dire <em>&ldquo;sort&rdquo;</em> (trier en anglais). Si je veux rechercher une valeur, je n&rsquo;aurai qu&rsquo;&agrave; dire <em>&ldquo;find&rdquo;</em> (rechercher en anglais)&hellip;</li>\r\n</ul>\r\n\r\n<h3>2.4 R&eacute;sum&eacute;</h3>\r\n\r\n<p>Dans ce second chapitre, nous avons appris que:</p>\r\n\r\n<ul>\r\n	<li>Un bon programmeur doit s&rsquo;assurer de toujours avoir les connaissances d&eacute;clarative et imp&eacute;rative affili&eacute;es au programme qu&rsquo;il souhaite r&eacute;aliser.</li>\r\n	<li>L&rsquo;ordinateur ne comprend que le langage binaire. C&rsquo;est-&agrave;-dire que des 0 et des 1.</li>\r\n	<li>Un langage de programmation est un ensemble de notations sp&eacute;ciales nous permettant de dialoguer avec notre ordinateur de mani&egrave;re non ambigu&euml;.</li>\r\n	<li>Python est un langage de programmation.</li>\r\n	<li>Python n&rsquo;est pas le seul langage de programmation. Il existe d&rsquo;autres langages de programmation comme le C, C++, Java, C#, Ruby&hellip;</li>\r\n	<li>Il existe de mani&egrave;re g&eacute;n&eacute;rale, deux moyens principaux pour traduire un code &eacute;crit dans un langage de programmation en langage machine: la compilation et l&rsquo;interpr&eacute;tation.</li>\r\n	<li>Python est un langage interpr&eacute;t&eacute; &agrave; la diff&eacute;rence des langages comme le C, C++, Visual Basic&hellip; qui quant &agrave; eux sont des langages dits compil&eacute;s.</li>\r\n	<li>Python a &eacute;t&eacute; cr&eacute;&eacute; en 1991 par le programmeur n&eacute;erlandais Guido van Rossum.</li>\r\n	<li>Python est un langage de programmation orient&eacute; objet.</li>\r\n	<li>Python poss&egrave;de une &eacute;l&eacute;gante syntaxe et encourage grandement la lisibilit&eacute; de votre code source.</li>\r\n</ul>\r\n\r\n<h2>3. Installation de Python</h2>\r\n\r\n<p>Enfin, les choses s&eacute;rieuses peuvent d&eacute;marrer&hellip;</p>\r\n\r\n<p>Comme nous allons le voir dans les lignes qui suivent, installer Python est la chose la plus facile qui puisse exister au monde! Je ne le dis pas uniquement pour ceux qui sont sous Windows, mais &eacute;galement pour les linuxiens et les fanatiques Mac OS.</p>\r\n\r\n<p>Quelque soit votre syst&egrave;me d&rsquo;exploitation, la premi&egrave;re &eacute;tape consiste &agrave; vous rendre sur le site officiel de Python: <a href="http://python.org">http://python.org</a></p>\r\n\r\n<h3>3.1 Installer Python sous Windows</h3>\r\n\r\n<ol>\r\n	<li>Cliquez sur le lien <em>Downloads</em> au niveau du menu principal de la page d&rsquo;accueil</li>\r\n	<li>S&eacute;lectionnez la version de Python que vous souhaitez installer. (Je vous conseille d&rsquo;opter pour la derni&egrave;re version en date.)</li>\r\n	<li>Sans grande surprise, le t&eacute;l&eacute;chargement du fichier d&rsquo;installation de Python va alors d&eacute;buter.</li>\r\n	<li>Une fois le t&eacute;l&eacute;chargement termin&eacute;, ex&eacute;cutez ensuite le fichier d&rsquo;installation et suivez les diff&eacute;rentes &eacute;tapes. Pensez &agrave; cocher la case &ldquo;Add Python 3.x to PATH&rdquo; lors de l&rsquo;installation afin que Python soit accessible en ligne de commandes. Cela s&rsquo;av&eacute;ra utile plus tard si vous souhaitez cr&eacute;er des sites web en un temps record avec <a href="http://djangoproject.com/">Django</a>.</li>\r\n	<li>A pr&eacute;sent, votre installation est normalement termin&eacute;e. Vous pouvez, histoire d&rsquo;avoir confirmation, vous rendre dans le menu <em>D&eacute;marrer &gt; Tous les programmes</em>, un dossier Python devrait normalement &ecirc;tre pr&eacute;sent au niveau de la liste.</li>\r\n</ol>\r\n\r\n<p><img alt="Dossier Python dans le menu Démarrer " src="https://leanpub.com/site_images/premiers-pas-avec-python/python_folder_in_list.png" /></p>\r\n\r\n<p>Dossier Python dans le menu D&eacute;marrer</p>\r\n\r\n<h3>Quel lien choisir?</h3>\r\n\r\n<p>Si vous avez &agrave; faire un choix entre plusieurs liens d&rsquo;installation. S&eacute;lectionner celui qui correspondra &agrave; votre type de processeur. Au cas o&ugrave;, vous ne connaissez pas le type de votre syst&egrave;me (32 bits ou 64 bits), choisissez tout simplement la version &lt;&lt; x86 &gt;&gt;. Si vous aimez &eacute;galement les vid&eacute;os, <a href="https://www.youtube.com/watch?v=exwWzZ5VhQI">celle-ci</a> fera l&rsquo;affaire!</p>\r\n\r\n<h3>3.2 Installer Python sous Linux</h3>\r\n\r\n<p>Sur la plupart des distributions Linux, Python est g&eacute;n&eacute;ralement pr&eacute;-install&eacute;. Cependant, il est possible que vous n&rsquo;ayez pas la derni&egrave;re version en date.</p>\r\n\r\n<h4>Version de Python install&eacute;e</h4>\r\n\r\n<p>Afin de connaitre la version de Python install&eacute;e, tapez dans un terminal la commande <code>python -V</code></p>\r\n\r\n<p>Il est tr&egrave;s probable que ce soit une version de la branche 2.x, comme 2.6 ou 2.7, pour des raisons de compatibilit&eacute;. Dans tous les cas, je vous conseille d&rsquo;installer la derni&egrave;re version en date de la branche 3.x.</p>\r\n\r\n<p>Cliquez sur <em>Downloads</em> et t&eacute;l&eacute;chargez la derni&egrave;re version de Python. Ouvrez un terminal, puis rendez-vous dans le dossier o&ugrave; se trouve l&rsquo;archive :</p>\r\n\r\n<ol>\r\n	<li>D&eacute;compressez l&rsquo;archive en tapant : <code>tar -xvfz Python-3.4.1.tar.bz2</code> (cette commande est bien entendu &agrave; adapter suivant la version et le type de compression).</li>\r\n	<li>Une fois la d&eacute;compression termin&eacute;e, vous devez vous rendre dans le dossier qui vient d&rsquo;&ecirc;tre cr&eacute;&eacute; dans le r&eacute;pertoire courant (<code>Python-3.4.1</code> dans mon cas).</li>\r\n	<li>Il faudra lancer le script de configuration en tapant <code>./configure</code> dans la console. Une fois que la configuration termin&eacute;e, il n&rsquo;y a plus qu&rsquo;&agrave; compiler en tapant <code>make</code> puis <code>make install</code> en tant que root (super-utilisateur) pour installer Python &agrave; proprement dit.</li>\r\n</ol>\r\n\r\n<h3>Quelqu&rsquo;un peut-il m&rsquo;aider?</h3>\r\n\r\n<p>Si vous rencontrez des difficult&eacute;s, <a href="https://www.youtube.com/watch?v=exwWzZ5VhQI">cette vid&eacute;o</a> pourra vous guider dans votre installation de Python.</p>\r\n\r\n<h3>3.3 Installer Python sous Mac OS X</h3>\r\n\r\n<p>Sur le site officiel de Python, vous trouverez des paquetages pour Mac OS similaires &agrave; ceux propos&eacute;s sous Windows.</p>\r\n\r\n<p>T&eacute;l&eacute;chargez la derni&egrave;re version en date. Ouvrez le fichier <code>.dmg</code> et faites un double-clic sur le paquet d&rsquo;installation <code>Python.mpkg</code>.</p>\r\n\r\n<p>Suivez les diff&eacute;rentes &eacute;tapes de l&rsquo;assistant d&rsquo;installation et vous aurez Python install&eacute; sur votre pr&eacute;cieux Mac :).</p>\r\n\r\n<h3>3.4 La console d&rsquo;interpr&eacute;tation de Python</h3>\r\n\r\n<p>Est-ce vrai ce qu&rsquo;on dit ? Python est install&eacute; sur votre machine? C&rsquo;est l&rsquo;information que je viens de recevoir en regardant le JT de 20h :). Qu&rsquo;est-ce qu&rsquo;on attend donc pour le lancer?</p>\r\n\r\n<h4>3.4.1 Sous Windows</h4>\r\n\r\n<p>Vous disposez de plusieurs moyens pour acc&eacute;der &agrave; la ligne de commande Python.</p>\r\n\r\n<h5>M&eacute;thode 1</h5>\r\n\r\n<p>Cette m&eacute;thode est la plus simple! Il vous faut passer par les menus <code>D&eacute;marrer &gt; Tous les programmes &gt; Python 3.4 &gt; Python (command line)</code>. Vous devriez voir cette sublime console:</p>\r\n\r\n<p><img alt="Ligne de commande Python " src="https://leanpub.com/site_images/premiers-pas-avec-python/python_command_line.PNG" /></p>\r\n\r\n<p>Ligne de commande Python</p>\r\n\r\n<h5>M&eacute;thode 2</h5>\r\n\r\n<p>Il faudra premi&egrave;rement utiliser le raccourci clavier <code>Windows + R</code> ou si vous pr&eacute;f&eacute;rez passer par les menus <code>D&eacute;marrer &gt; Tous les programmes &gt; Accessoires &gt; Ex&eacute;cuter</code>.</p>\r\n\r\n<p>Dans la fen&ecirc;tre qui s&rsquo;affiche, tapez tout simplement <code>python</code> afin de lancer la ligne de commande Python.</p>\r\n\r\n<p>Choisissez la m&eacute;thode qui vous plaira et comme nous venons de le voir tout chemin m&egrave;ne &agrave; Rome :).</p>\r\n\r\n<h4>3.4.2 Sous Linux</h4>\r\n\r\n<p>Une fois install&eacute;, un lien vers l&rsquo;interpr&eacute;teur Python a &eacute;t&eacute; normalement cr&eacute;&eacute;. Ce dernier aura comme libell&eacute; <strong>python3.X</strong> (o&ugrave; X repr&eacute;sente le num&eacute;ro de la version install&eacute;e). Si, par exemple, vous avez install&eacute; Python 3.4, vous pourrez y acc&eacute;der gr&acirc;ce &agrave; la commande <code>python3.4</code> comme pr&eacute;sent&eacute; ci-dessous:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>$</code> <code>python3</code><code>.</code><code>4</code>\r\n<code>2 </code><code>Python</code> <code>3.4</code><code>.</code><code>1</code> <code>(</code><code>v3</code><code>.</code><code>4.1</code><code>:</code><code>c0e311e010fc</code><code>,</code> <code>Lun</code>  <code>11</code> <code>2014</code><code>,</code> <code>21</code><code>:</code><code>34</code><code>:</code><code>56</code><code>)</code>\r\n<code>3 </code><code>[</code><code>GCC</code> <code>4.3</code><code>.</code><code>3</code><code>]</code> <code>on</code> <code>linux2</code>\r\n<code>4 </code><code>Type</code> <code>&quot;help&quot;</code><code>,</code> <code>&quot;copyright&quot;</code><code>,</code> <code>&quot;credits&quot;</code> <code>or</code> <code>&quot;license&quot;</code> <code>for</code> <code>more</code> <code>information</code><code>.</code>\r\n<code>5 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Pour fermer la ligne de commande, il vous suffira d&rsquo;utiliser le combinaison clavier <code>CTRL + D</code>.</p>\r\n\r\n<h4>3.4.3 Sous Mac OS X</h4>\r\n\r\n<p>Dans le dossier <code>Applications</code>, recherchez un r&eacute;pertoire nomm&eacute; <code>Python</code>. Une fois que vous l&rsquo;avez trouv&eacute;, il suffira d&rsquo;ouvrir l&rsquo;application <code>IDLE</code> pr&eacute;sente dans ce r&eacute;pertoire afin de lancer Python.</p>\r\n\r\n<h3>3.5 R&eacute;sum&eacute;</h3>\r\n\r\n<p>Dans ce chapitre, nous avons pu voir que quelque soit le syst&egrave;me d&rsquo;exploitation utilis&eacute;, installer Python est chose facile!</p>\r\n\r\n<h2>4. Notre premier jeu</h2>\r\n\r\n<h3>4.1 Le principe du jeu</h3>\r\n\r\n<p>Le jeu que nous allons concevoir dans ce chapitre est extr&ecirc;mement simple. Comme je vous l&rsquo;avais dit, nous allons commencer en douceur. Eh bien, c&rsquo;est de cette douceur dont il &eacute;tait question :).</p>\r\n\r\n<p>Ce que nous allons faire, c&rsquo;est demander &agrave; l&rsquo;utilisateur d&rsquo;entrer son nom, puis afficher &ldquo;Mama Miya&rdquo; suivi de son nom.</p>\r\n\r\n<p>Un exemple d&rsquo;ex&eacute;cution de notre programme serait le suivant:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code>\r\n<code>2 </code><code>Entrer</code> <code>votre</code> <code>nom</code><code>:</code>\r\n<code>3 </code><code>Honore</code> <code>Hounwanou</code>\r\n<code>4 </code><code>Mama</code> <code>Miya</code> <code>Honore</code> <code>Hounwanou</code>\r\n<code>5 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Alors bien avant de se lancer &agrave; t&ecirc;te baiss&eacute;e dans l&rsquo;&eacute;criture de notre script, il va nous falloir r&eacute;pondre dans un premier temps &agrave; un bon nombre de questions.</p>\r\n\r\n<p>Comment afficher quelque chose &agrave; l&rsquo;&eacute;cran? Comment recueillir une valeur provenant de l&rsquo;utilisateur? Comment conserver une valeur en m&eacute;moire?</p>\r\n\r\n<p>Pour ce faire, ouvrez rapidement votre console d&rsquo;interpr&eacute;tation de Python si ce n&rsquo;est pas d&eacute;j&agrave; fait!</p>\r\n\r\n<p>Vous l&rsquo;avez oubli&eacute;e? Je veux parler de cette fameuse console que nous avons vu dans le chapitre pr&eacute;c&eacute;dent:</p>\r\n\r\n<p><img alt="Ligne de commandes Python " src="https://leanpub.com/site_images/premiers-pas-avec-python/python_command_line.PNG" /></p>\r\n\r\n<p>Ligne de commandes Python</p>\r\n\r\n<p>Amusez vous &agrave; pr&eacute;sent &agrave; entrer des valeurs num&eacute;riques puis valider:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>2</code>\r\n<code>2 </code><code>2</code>\r\n<code>3 </code><code>&gt;&gt;&gt;</code> <code>9</code>\r\n<code>4 </code><code>9</code>\r\n<code>5 </code><code>&gt;&gt;&gt;</code> <code>14</code>\r\n<code>6 </code><code>14</code>\r\n<code>7 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Qu&rsquo;est-ce que vous remarquez? La valeur entr&eacute;e vous est tout simplement retourn&eacute;e! En effet, quel que soit ce que vous tapez la console d&rsquo;interpr&eacute;tation essaie de vous fournir un r&eacute;sultat. Dans notre cas, elle nous retourne le nombre saisi vu qu&rsquo;il n&rsquo;y a quasiment rien &agrave; faire.</p>\r\n\r\n<p>Ce que vous pouvez &agrave; pr&eacute;sent faire, c&rsquo;est utiliser l&rsquo;interpr&eacute;teur comme une simple calculatrice:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>&gt;&gt;&gt;</code> <code>12</code> <code>+</code> <code>6</code>\r\n<code> 2 </code><code>18</code>\r\n<code> 3 </code><code>&gt;&gt;&gt;</code> <code>11</code> <code>-</code> <code>2</code>\r\n<code> 4 </code><code>9</code>\r\n<code> 5 </code><code>&gt;&gt;&gt;</code> <code>39</code> <code>*</code> <code>2</code>\r\n<code> 6 </code><code>78</code>\r\n<code> 7 </code><code>&gt;&gt;&gt;</code> <code>5</code> <code>/</code> <code>2</code>\r\n<code> 8 </code><code>2.5</code>\r\n<code> 9 </code><code>&gt;&gt;&gt;</code> <code>5</code> <code>//</code> <code>2</code>\r\n<code>10 </code><code>2</code>\r\n<code>11 </code><code>&gt;&gt;&gt;</code> <code>9</code> <code>%</code> <code>2</code>\r\n<code>12 </code><code>1</code>\r\n<code>13 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Vous connaissez sans doute les quatre op&eacute;rations arithm&eacute;tiques de base +, -, *, /. Mais c&rsquo;est quoi ces mushibishis (choses) <strong>//</strong> et <strong>%</strong>.</p>\r\n\r\n<p>Le // vous retourne le r&eacute;sultat de la division enti&egrave;re entre deux nombres. Il n&rsquo;y aura donc pas de valeur comportant une virgule vu que cette partie est supprim&eacute;e. En gros que des entiers comme r&eacute;sultat.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>12</code> <code>//</code> <code>5</code>\r\n<code>2 </code><code>2</code>\r\n<code>3 </code><code>&gt;&gt;&gt;</code> <code>15</code> <code>//</code> <code>2</code>\r\n<code>4 </code><code>7</code>\r\n<code>5 </code><code>&gt;&gt;&gt;</code> <code>9</code> <code>//</code> <code>2</code>\r\n<code>6 </code><code>4</code>\r\n<code>7 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Le % quant &agrave; lui est ce qu&rsquo;on appelle l&rsquo;op&eacute;rateur <strong>modulo</strong>. Il vous retourne le reste de la division enti&egrave;re entre deux nombres. Il peut vous servir par exemple &agrave; d&eacute;terminer la parit&eacute; d&rsquo;un nombre. En effet, un nombre pair s&rsquo;il est divisible par 2. Ainsi si 5 % 2 = 0 alors 5 est pair, dans le cas contraire 5 est impair. Aussi simple que cela !</p>\r\n\r\n<p><img alt="L’opérateur modulo" src="https://leanpub.com/site_images/premiers-pas-avec-python/modulo.png" /></p>\r\n\r\n<p>L&rsquo;op&eacute;rateur modulo</p>\r\n\r\n<h3>4.2 Les chaines de caract&egrave;res</h3>\r\n\r\n<p>Si vous aimez bidouiller, c&rsquo;est s&ucirc;r et certain que vous avez tent&eacute; d&rsquo;entrer du texte. Et &agrave; votre grande surprise, vous avez eu une erreur du genre:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>toto</code>\r\n<code>2 </code><code>Traceback</code> <code>(</code><code>most</code> <code>recent</code> <code>call</code> <code>last</code><code>):</code>\r\n<code>3 </code>  <code>File</code> <code>&quot;&lt;pyshell#0&gt;&quot;</code><code>,</code> <code>line</code> <code>1</code><code>,</code> <code>in</code> <code>&lt;</code><code>module</code><code>&gt;</code>\r\n<code>4 </code>    <code>toto</code>\r\n<code>5 </code><code>NameError</code><code>:</code> <code>name</code> <code>&#39;toto&#39;</code> <code>is</code> <code>not</code> <code>defined</code>\r\n<code>6 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>C&rsquo;est tout &agrave; fait normal, car vous vous &ecirc;tes un tout petit peu mal exprim&eacute; avec notre interpr&eacute;teur. Et lorsque l&rsquo;interpr&eacute;teur ne comprend pas ce que vous lui demandez de faire, il vous le dit sans tourner autour du pot (pas comme certains ami(e)s :) ). Il vous fournit en outre quelques d&eacute;tails lorsqu&rsquo;il est de bonne humeur (Il est toujours de bonne humeur :) ). Ici, il nous indique que le nom &ldquo;toto&rdquo; n&rsquo;a pas &eacute;t&eacute; d&eacute;fini.</p>\r\n\r\n<h4>Mais c&rsquo;est en Anglais?</h4>\r\n\r\n<p>Ouh c&rsquo;est vrai! Je ne l&rsquo;avais m&ecirc;me pas remarqu&eacute;! Je crois que nous devons commencer &agrave; nous y habituer car &agrave; ce qu&rsquo;il parait ce sera comme &ccedil;a tout le temps :).</p>\r\n\r\n<p>Si vous voulez afficher du texte, il faudra le dire clairement &agrave; l&rsquo;interpr&eacute;teur en d&eacute;limitant votre texte par des simples, doubles ou triples quottes comme ceci:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>&#39;toto&#39;</code>\r\n<code>2 </code><code>&#39;toto&#39;</code>\r\n<code>3 </code><code>&gt;&gt;&gt;</code> <code>&quot;toto&quot;</code>\r\n<code>4 </code><code>&#39;toto&#39;</code>\r\n<code>5 </code><code>&gt;&gt;&gt;</code> <code>&quot;&quot;&quot;je peux</code>\r\n<code>6 </code><code>utiliser plusieurs</code>\r\n<code>7 </code><code>lignes :)&quot;&quot;&quot;</code>\r\n<code>8 </code><code>&#39;je peux</code><code>\\n</code><code>utiliser plusieurs</code><code>\\n</code><code>lignes :)&#39;</code>\r\n<code>9 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<h4>C&rsquo;est quoi le \\n ?</h4>\r\n\r\n<p>Il symbolise tout simplement un retour &agrave; la ligne.</p>\r\n\r\n<p>Les quotes permettent &agrave; l&rsquo;interpr&eacute;teur de savoir que vous voulez afficher du texte et non une variable. En effet, si vous ne mettez par les quottes, il se dira qu&rsquo;il doit rechercher un &eacute;l&eacute;ment (variable, fonction, classe&hellip;) ayant comme nom ce que vous avez entr&eacute;, et vu que cet &eacute;l&eacute;ment n&rsquo;existe pas pour l&rsquo;instant, c&rsquo;est la raison pour laquelle on avait cette erreur. Ainsi dans notre cas pr&eacute;c&eacute;dent, il a recherch&eacute; par exemple une variable qui avait pour nom <strong>toto</strong> (qui n&rsquo;existe bien s&ucirc;r pas pour le moment).</p>\r\n\r\n<p>Alors comme vous pouvez le voir, programmer en Python c&rsquo;est simple. Il faudra apprendre la langue que comprend notre interpr&eacute;teur afin de ne jamais avoir &agrave; nous bagarrer et le tour sera jou&eacute;!</p>\r\n\r\n<h3>4.3 Les variables</h3>\r\n\r\n<p>C&rsquo;est quoi une variable? C&rsquo;est vrai que j&rsquo;ai employ&eacute; ce terme dans la section pr&eacute;c&eacute;dente, sans pour autant l&rsquo;expliquer.</p>\r\n\r\n<p>Les variables vont nous permettre de pouvoir stocker des valeurs de mani&egrave;re <strong>temporaire</strong> au niveau de la m&eacute;moire vive aussi appel&eacute;e m&eacute;moire syst&egrave;me ou m&eacute;moire RAM(Random Access Memory). La m&eacute;moire RAM est une m&eacute;moire <strong>volatile</strong>, c&rsquo;est-&agrave;-dire que d&egrave;s que votre ordinateur cesse d&rsquo;&ecirc;tre aliment&eacute; en &eacute;lectricit&eacute;, le contenu de cette m&eacute;moire est automatiquement supprim&eacute;, ce qui implique donc une perte totale des donn&eacute;es m&eacute;moire. Ne comptez donc pas sur les variables pour stocker des valeurs (le nom de vos utilisateurs, leur mot de passe&hellip;) de mani&egrave;re permanente. Pour cela, il vous faudra utiliser un autre type de m&eacute;moire dit <strong>non volatile</strong> (Ex: le disque dur). Vous pourrez donc stocker des informations cens&eacute;es &ecirc;tre permanentes au niveau d&rsquo;un fichier, d&rsquo;une base de donn&eacute;es&hellip; Mais vous savez quoi ? Nous n&rsquo;en sommes pas encore l&agrave; pour l&rsquo;instant.</p>\r\n\r\n<p>Par rapport &agrave; ce qui a &eacute;t&eacute; dit plus haut, vous pouvez vous demander quel est alors l&rsquo;int&eacute;r&ecirc;t d&rsquo;utiliser une variable si apr&egrave;s avoir &eacute;teint votre ordinateur elle ne sera plus disponible au prochain d&eacute;marrage? La r&eacute;ponse &agrave; cette question est tr&egrave;s simple. Les variables vont nous permettre de stocker des valeurs de mani&egrave;re <strong>temporaire</strong> et m&ecirc;me les changer tout au long de l&rsquo;ex&eacute;cution de notre programme.</p>\r\n\r\n<p>Prenons un exemple pour que tout soit clair dans votre esprit. Pour notre jeu que nous souhaitons r&eacute;aliser a t-on r&eacute;ellement besoin de stocker le nom de l&rsquo;utilisateur dans un fichier ou dans une base de donn&eacute;es? Pas du tout, pourquoi se compliquer la vie vu qu&rsquo;apr&egrave;s avoir affich&eacute; &ldquo;Mama Miya&rdquo; suivi du nom de l&rsquo;utilisateur on ne fera plus rien. Le programme s&rsquo;arr&ecirc;te donc l&agrave;!</p>\r\n\r\n<p>Si par contre, on souhaitait demander une seule fois &agrave; l&rsquo;utilisateur d&rsquo;entrer son nom, puis afficher ce dernier pr&eacute;c&eacute;d&eacute; de &ldquo;Mama Miya&rdquo; &agrave; chaque fois qu&rsquo;il ex&eacute;cutera notre programme sans avoir &agrave; le lui redemander m&ecirc;me s&rsquo;il red&eacute;marre son ordinateur, dans ce cas l&agrave;, on pourrait penser &agrave; stocker son nom au niveau d&rsquo;un fichier par exemple. En effet, vu que le contenu de la m&eacute;moire RAM sera supprim&eacute; lorsque l&rsquo;ordinateur ne sera plus aliment&eacute; en &eacute;lectricit&eacute;, nous n&rsquo;aurons aucun autre moyen de r&eacute;cup&eacute;rer son nom que de le lui redemander. J&rsquo;esp&egrave;re que tout est &agrave; pr&eacute;sent clair dans votre esprit.</p>\r\n\r\n<p>Pour ceux qui sont fans de th&eacute;orie, sachez &eacute;galement qu&rsquo;une m&eacute;moire ne peut pas &ecirc;tre &agrave; la fois rapide d&rsquo;acc&egrave;s et grande en capacit&eacute;. En d&rsquo;autres termes, si elle est rapide d&rsquo;acc&egrave;s, cela signifie qu&rsquo;elle sera d&rsquo;une petite taille. De m&ecirc;me si elle est de grande capacit&eacute;, elle sera un tout petit peu lente en acc&egrave;s.</p>\r\n\r\n<p>La m&eacute;moire du disque dur est d&rsquo;une grande capacit&eacute;, on a m&ecirc;me des Teras = 1000Go de nos jours pour des ordinateurs personnels. Ainsi, il faut donc par la m&ecirc;me occasion savoir que pour y acc&eacute;der au travers d&rsquo;un programme cela va demander un peu plus de temps que si on voulait acc&eacute;der &agrave; une donn&eacute;e pr&eacute;sente au niveau de la m&eacute;moire RAM car cette derni&egrave;re n&rsquo;a pas une tr&egrave;s grande capacit&eacute;, ce qui signifait donc qu&rsquo;elle est &hellip; d&rsquo;acc&egrave;s. (Je vous laisse compl&eacute;ter les pointill&eacute;s si vous avez compris).</p>\r\n\r\n<p>Mais la rapidit&eacute; &agrave; laquelle je fais allusion n&rsquo;est pas vraiment remarquable pour un &ecirc;tre humain. Par contre, pour des programmes de grande envergure, il faudrait que vous sachez clairement o&ugrave; et comment stocker vos donn&eacute;es afin d&rsquo;avoir un programme qui s&rsquo;ex&eacute;cute le plus rapidement possible.</p>\r\n\r\n<p>Sachez pour terminer que cette caract&eacute;ristique de volatilit&eacute; de la m&eacute;moire RAM a tendance &agrave; dispara&icirc;tre avec les derni&egrave;res &eacute;volutions technologiques conduisant &agrave; des types de m&eacute;moire RAM non-volatile, comme les <a href="https://fr.wikipedia.org/wiki/Magnetic_Random_Access_Memory"><strong>MRAM</strong></a>.</p>\r\n\r\n<p>Je vois qu&rsquo;on se perd un tout petit peu. Revenons &agrave; nos moutons :).</p>\r\n\r\n<h4>4.3.1 D&eacute;clarer une variable</h4>\r\n\r\n<p>Je me suis lanc&eacute; dans l&rsquo;&eacute;criture d&rsquo;un mini roman sans le savoir dans la section pr&eacute;c&eacute;dente :). Et avec tout &ccedil;a, savons-nous au moins comment d&eacute;clarer une variable ?</p>\r\n\r\n<p>Rectifions donc le tir! Une variable se d&eacute;clare comme ceci en Python:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>age_toto</code> <code>=</code> <code>21</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>toto_birthday</code> <code>=</code> <code>&quot;16/05/1993&quot;</code>\r\n<code>3 </code><code>&gt;&gt;&gt;</code> <code>1</code><code>tata</code> <code>=</code> <code>3</code>\r\n<code>4 </code><code>SyntaxError</code><code>:</code> <code>invalid</code> <code>syntax</code>\r\n<code>5 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Il faudra premi&egrave;rement mettre le <strong>nom de votre variable</strong>, suivi de l&rsquo;&eacute;galit&eacute; <strong>&rdquo;=&rdquo;</strong> puis d&rsquo;une <strong>valeur</strong> d&rsquo;initialisation. Dans notre figure pr&eacute;c&eacute;dente, nous avons donc cr&eacute;er deux variables: <code>age_toto</code> et <code>toto_birthday</code>. En jargon informatique, on parle de d&eacute;claration de variables. Nous avons donc d&eacute;clarer deux variables <code>age_toto</code> et <code>toto_birthday</code> auxquelles nous avons respectivement affect&eacute; comme valeur l&rsquo;entier <strong>21</strong> et la cha&icirc;ne de caract&egrave;res <strong>&ldquo;16/05/1993&rdquo;</strong>.</p>\r\n\r\n<h4>CamelCase vs snake_case</h4>\r\n\r\n<p>Vous avez peut-&ecirc;tre remarqu&eacute; que pour nos noms de variable, j&rsquo;ai eu &agrave; s&eacute;parer chaque nouveau mot par un undescore ou blanc soulign&eacute; <strong>(_)</strong>. C&rsquo;est ce qu&rsquo;on appelle la notion <strong>snake_case</strong> et c&rsquo;est cette notation qui est majoritairement adopt&eacute;e par la plupart des d&eacute;veloppeurs Python. Ex: nom_de_mon_pere. Vous retrouverez &eacute;galement dans l&rsquo;industrie (par exemple en Java), la notation <strong>CamelCase</strong> o&ugrave; chaque nouveau mot apr&egrave;s le premier mot commencera par une lettre majuscule. Ex: nomDeMonPere. Pour en apprendre davantage, vous pouvez visiter cette page <a href="https://www.python.org/dev/peps/pep-0008/">PEP 0008 - Style Guide for Python Code</a>.</p>\r\n\r\n<p>Vous l&rsquo;avez peut &ecirc;tre remarqu&eacute;, notre interpr&eacute;teur n&rsquo;a pas du tout aim&eacute; la d&eacute;claration de la troisi&egrave;me variable, r&eacute;sultat, il nous a affich&eacute; une belle erreur!</p>\r\n\r\n<p>Ce que je ne vous ai pas dis, c&rsquo;est que le nom d&rsquo;une variable ne doit pas commencer par un chiffre, il doit forc&eacute;ment commencer par une lettre et &ecirc;tre suivi par n&rsquo;importe quel chiffre, lettre, underscore mais pas d&rsquo;espaces. Je vous recommande fortement d&rsquo;&eacute;viter d&rsquo;utiliser les caract&egrave;res accentu&eacute;s comme &eacute;,&agrave;,&egrave;&hellip; dans vos noms de variables m&ecirc;me si cela ne g&eacute;n&eacute;ra pas forcement des erreurs&hellip;</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>nom_de_mon_p</code><code>&egrave;</code><code>re</code> <code>=</code> <code>&quot;L&eacute;onard&quot;</code> <code>#A &eacute;viter</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>nom_de_mon_pere</code> <code>=</code> <code>&quot;L&eacute;onard&quot;</code> <code>#Beaucoup mieux</code>\r\n<code>3 </code><code>&gt;&gt;&gt;</code> <code>nom_de_ma_mere</code> <code>=</code> <code>&quot;Reine&quot;</code> <code>#Nom de variable valide</code>\r\n<code>4 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Comme vous pouvez le voir, je peux utiliser mes caract&egrave;res accentu&eacute;s au niveau de ma cha&icirc;ne de caract&egrave;res, aucun souci &agrave; ce niveau l&agrave; vu que ce n&rsquo;est que du texte. Pour exemple, j&rsquo;ai &eacute;cris ici &ldquo;L&eacute;onard&rdquo;.</p>\r\n\r\n<p>Au niveau des noms de variables, cela fonctionne &eacute;galement mais comme dit pr&eacute;c&eacute;demment, je vous conseille de les &eacute;viter lors de l&rsquo;&eacute;criture de vos noms de variables afin de ne pas avoir de mauvaises surprises.</p>\r\n\r\n<h4>Les constantes</h4>\r\n\r\n<p>Une constante est une variable dont la valeur ne sera pas amen&eacute;e &agrave; changer tout au long de l&rsquo;ex&eacute;cution d&rsquo;un programme. Dans d&rsquo;autres langages de programmation, vous avez la possibilit&eacute; de d&eacute;clarer explicitement une constante mais ce n&rsquo;est pas le cas en python. Ainsi comme ruse, les programmeurs python choisissent d&rsquo;&eacute;crire le nom de la variable en majuscules histoire de savoir plus tard qu&rsquo;il s&rsquo;agit d&rsquo;une constante. Voici donc quelques d&eacute;clarations de constantes valides: NOMBRE_DE_VIES = 5, LARGEUR_FENETRE = 300&hellip; Je le r&eacute;p&egrave;te: ce n&rsquo;est pas une obligation, mais je vous conseille de toujours respecter cette convention.</p>\r\n\r\n<p>Autre chose, j&rsquo;ai eu &agrave; mettre <strong>#A &eacute;viter</strong> et <strong>#Beaucoup mieux</strong> qu&rsquo;est-ce c&rsquo;est?</p>\r\n\r\n<h3>4.4 Les commentaires</h3>\r\n\r\n<p>Les commentaires vont nous permettre d&rsquo;apporter un tout petit peu de documentation &agrave; notre code source. En grosso modo, on se sert des commentaires pour expliquer nos diff&eacute;rents blocs de code.</p>\r\n\r\n<p>Tout ce qui sera pr&eacute;c&eacute;d&eacute; d&rsquo;un <strong>#</strong> sera consid&eacute;r&eacute; par l&rsquo;interpr&eacute;teur Python comme un commentaire.</p>\r\n\r\n<p>Profitez-en c&rsquo;est gratuit, mais n&rsquo;en abusez surtout pas comme suit:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>nom_de_mon_pere</code> <code>=</code> <code>&quot;L&eacute;onard&quot;</code> <code>#Je d&eacute;clare une variable nom_de_mon_pere qui a p\\</code>\r\n<code>2 </code><code>our</code> <code>contenu</code> <code>&quot;L&eacute;onard&quot;</code>\r\n<code>3 </code><code>&gt;&gt;&gt;</code> <code>nom_de_ma_mere</code> <code>=</code> <code>&quot;Reine&quot;</code> <code>#Je d&eacute;clare une variable nom_de_ma_mere qui a pour \\</code>\r\n<code>4 </code><code>contenu</code> <code>&quot;Reine&quot;</code>\r\n<code>5 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<h4>Python est sensible &agrave; la casse</h4>\r\n\r\n<p>Sachez que Python fait une distinction entre les lettres majuscules et minuscules. On dit dans ce cas, qu&rsquo;il est sensible &agrave; la casse. Ainsi les variables <code>toto</code>, <code>ToTo</code>, <code>TOTo</code> et <code>TOTO</code> sont toutes diff&eacute;rentes les unes des autres.</p>\r\n\r\n<h3>4.5 Passons au code source !</h3>\r\n\r\n<p>Nous avons &agrave; pr&eacute;sent toutes les cartes en main pour &eacute;crire notre jeu. Nous allons pour ce faire cr&eacute;er un fichier <strong>jeu1.py</strong>. Tous les fichiers python doivent avoir pour extension <strong>py</strong> ou <strong>pyw</strong>. Contentons nous de l&rsquo;extension <strong>py</strong> pour l&rsquo;instant.</p>\r\n\r\n<p>Pour &eacute;crire votre code source, vous pouvez utiliser n&rsquo;importe lequel des &eacute;diteurs de texte. Le Bloc Notes de Windows fera aussi l&rsquo;affaire.</p>\r\n\r\n<h4>4.5.1 Choisir un environnement de d&eacute;veloppement int&eacute;gr&eacute;</h4>\r\n\r\n<p>Dans ce livre, nous utiliserons IDLE (<strong>I</strong>ntegrated <strong>D</strong>eve<strong>L</strong>opment <strong>E</strong>nvironment) qui est un environnement de d&eacute;veloppement int&eacute;gr&eacute; Python. Vous n&rsquo;aurez rien &agrave; installer, vu qu&rsquo;il vient par d&eacute;faut lorsque vous installer Python.</p>\r\n\r\n<p>Pour ceux qui utilisent une distribution Linux, vous pourrez &eacute;crire votre code source avec votre &eacute;diteur favori puis l&rsquo;ex&eacute;cuter en ligne ce commande comme suit:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>$</code> <code>python3</code><code>.</code><code>4</code> <code>nom_du_fichier</code><code>.</code><code>py</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Pensez &agrave; &ecirc;tre dans le dossier contenant votre fichier Python! Vous pouvez &eacute;galement installer IDLE si cela vous int&eacute;resse. Une petite recherche sur Google et vous aurez le nom du paquet &agrave; installer.</p>\r\n\r\n<h4>4.5.2 Cr&eacute;ation du fichier jeu1.py</h4>\r\n\r\n<p>Il nous faudra premi&egrave;rement ouvrir IDLE. Pour ce faire, on peut passer par les menus <code>D&eacute;marrer &gt; Tous les programmes &gt; Python 3.4 &gt; IDLE (Python GUI)</code></p>\r\n\r\n<p>Vous devez normalement voir appara&icirc;tre un truc de ce genre:</p>\r\n\r\n<p><img alt="IDLE (Integrated DeveLopment Environment)" src="https://leanpub.com/site_images/premiers-pas-avec-python/idle.png" /></p>\r\n\r\n<p>IDLE (Integrated DeveLopment Environment)</p>\r\n\r\n<p>Pour cr&eacute;er ensuite notre script, il faudra passer par la barre de menus <code>File &gt; New File</code> ou utiliser le raccourci clavier <code>CTRL + N</code> .</p>\r\n\r\n<p>Mettez ensuite le code ci-dessous comme contenu de notre fichier puis enregistrer le par exemple sous le nom &ldquo;jeu1.py&rdquo;. Veillez &agrave; ne pas inclure les num&eacute;ros de ligne.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code># Python par la pratique</code>\r\n<code>2 </code><code># ------------------------</code>\r\n<code>3 </code><code># Notre premier jeu</code>\r\n<code>4 </code>\r\n<code>5 </code><code>print</code><code>(</code><code>&quot;Entrer votre nom: &quot;</code><code>)</code>\r\n<code>6 </code><code>nom</code> <code>=</code> <code>input</code><code>()</code>\r\n<code>7 </code><code>print</code><code>(</code><code>&quot;Mama Miya &quot;</code> <code>+</code> <code>nom</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Ex&eacute;cutez ensuite notre programme en cliquant sur <code>Run &gt; Run Module</code> ou utilisez le raccourci clavier <code>F5</code>.</p>\r\n\r\n<p>Notre programme doit normalement fonctionner sans probl&egrave;me.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code>\r\n<code>2 </code><code>Entrer</code> <code>votre</code> <code>nom</code><code>:</code>\r\n<code>3 </code><code>Honore</code> <code>Hounwanou</code>\r\n<code>4 </code><code>Mama</code> <code>Miya</code> <code>Honore</code> <code>Hounwanou</code>\r\n<code>5 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>F&eacute;licitations !! Vous avez &eacute;crit et ex&eacute;cut&eacute; votre premier programme Python. Wouhou :) !</p>\r\n\r\n<h4>4.5.3 Explication du code source</h4>\r\n\r\n<p>Je sais tr&egrave;s bien qu&rsquo;il y a des lignes dans notre code que vous ne comprenez pas, mais ne vous inqui&eacute;tez surtout pas car je vais expliquer chacune de ces lignes. A partir de maintenant, ce ne sera que de la pratique. Je vous pr&eacute;senterai un challenge, le code qui ira avec et on essayera de l&rsquo;expliquer instruction apr&egrave;s instruction.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code># Python par la pratique</code>\r\n<code>2 </code><code># ------------------------</code>\r\n<code>3 </code><code># Notre premier jeu</code>\r\n<code>4 </code>\r\n<code>5 </code><code>print</code><code>(</code><code>&quot;Entrer votre nom: &quot;</code><code>)</code>\r\n<code>6 </code><code>nom</code> <code>=</code> <code>input</code><code>()</code>\r\n<code>7 </code><code>print</code><code>(</code><code>&quot;Mama Miya &quot;</code> <code>+</code> <code>nom</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<ul>\r\n	<li>Les lignes <strong>1.</strong> &agrave; <strong>3.</strong> ne sont rien d&rsquo;autres que des commentaires. Elles nous permettent donc de documenter un temps soit peu notre code.</li>\r\n	<li>La ligne <strong>4.</strong> comme vous pouvez le voir est une ligne vide. Elle nous sert tout simplement &agrave; espacer notre code source afin de le rendre plus lisible.</li>\r\n	<li>Au niveau de la ligne <strong>5.</strong>, nous utilisons la fonction <strong>print</strong>. Cette fonction permet d&rsquo;afficher quelque chose au niveau de la console. Si je veux afficher <strong>J&rsquo;aime python.</strong>, alors j&rsquo;&eacute;crirai:</li>\r\n</ul>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>print</code><code>(</code><code>&quot;J&#39;aime Python.&quot;</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Remarquez que l&agrave; j&rsquo;utilise les doubles quottes en lieu et place des simples quottes sinon j&rsquo;aurai eu droit &agrave; une belle erreur. En effet si j&rsquo;avais &eacute;cris: <code>python print(&#39;J&#39;aime Python.&#39;) </code> L&rsquo;interpr&eacute;teur se dira que ma cha&icirc;ne de caract&egrave;re est <strong>&lsquo;J&rsquo;</strong> et tout le reste sera incompr&eacute;hensible pour lui. Si vous voulez tout de m&ecirc;me utiliser les simples alors dans ce cas il va vous falloir &eacute;chapper votre apostrophe en utilisant l&rsquo;antislash encore appel&eacute; backslash afin que l&rsquo;interpr&eacute;teur ne la consid&egrave;re pas comme celle indiquant la fin de notre cha&icirc;ne de caract&egrave;res.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>print</code><code>(</code><code>&#39;J</code><code>\\&#39;</code><code>aime Python.&#39;</code><code>)</code>\r\n<code>2 </code><code>print</code><code>(</code><code>&quot;J&#39;aime </code><code>\\&quot;</code><code>Python</code><code>\\&quot;</code><code>.&quot;</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<ul>\r\n	<li>Au niveau de la quatri&egrave;me ligne, nous utilisons la fonction <strong>input</strong>, cette fonction permet de r&eacute;cup&eacute;rer une valeur saisie par l&rsquo;utilisateur. Nous r&eacute;cup&eacute;rons donc ce que l&rsquo;utilisateur aura saisi et nous stockons cette valeur au niveau de la variable <strong>nom</strong>.</li>\r\n	<li>Il ne reste plus qu&rsquo;&agrave; afficher &agrave; pr&eacute;sent, &ldquo;Mama Miya&rdquo; suivi du nom de l&rsquo;utilisateur. Et c&rsquo;est justement ce que nous faisons au niveau de cette ligne. Notez ici que j&rsquo;ai eu &agrave; utiliser l&rsquo;op&eacute;rateur <strong>+</strong>. Lorsque vous faites appel &agrave; l&rsquo;op&eacute;rateur <strong>+</strong> avec comme op&eacute;randes des chaines de caract&egrave;res, ce qu&rsquo;il fera c&rsquo;est coller les deux chaines de caract&egrave;res. On parle de <strong>concat&eacute;nation</strong>. Il va donc concat&eacute;ner nos deux chaines de caract&egrave;res. Et voil&agrave; c&rsquo;est tout !</li>\r\n</ul>\r\n\r\n<p>Notez que je ne pouvais pas &eacute;crire:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>print</code><code>(</code><code>&quot;Mama Miya nom&quot;</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Si je le faisais, il consid&eacute;ra <strong>nom</strong> comme faisant partie de cha&icirc;ne de caract&egrave;res vu qu&rsquo;il &eacute;tait dans la d&eacute;limitation avec les doubles quottes. Soyez donc prudents !</p>\r\n\r\n<p>Alors c&rsquo;est tout pour ce chapitre, mais avant de terminer je vais vous montrer une autre mani&egrave;re d&rsquo;&eacute;crire notre code. Notez que pour l&rsquo;instant la fonction <strong>input</strong> n&rsquo;a rien entre les parenth&egrave;ses. Ce qu&rsquo;on peut faire, c&rsquo;est sp&eacute;cifier un message qui sera affich&eacute; avant de recueillir la valeur de l&rsquo;utilisateur. On parle de <em>prompt</em>. Ainsi nous n&rsquo;aurons plus besoin d&rsquo;utiliser ici la fonction <strong>print</strong>.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code># Python par la pratique</code>\r\n<code>2 </code><code># ------------------------</code>\r\n<code>3 </code><code># Notre premier jeu</code>\r\n<code>4 </code>\r\n<code>5 </code><code>nom</code> <code>=</code> <code>input</code><code>(</code><code>&quot;Entrer votre nom: &quot;</code><code>)</code>\r\n<code>6 </code><code>print</code><code>(</code><code>&quot;Mama Miya &quot;</code> <code>+</code> <code>nom</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Pour terminer, voici encore une autre mani&egrave;re d&rsquo;&eacute;crire le m&ecirc;me script. Je vous laisse comme des grands me dire ce qui se passe ici. Rien de vraiment compliqu&eacute;!</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code># Python par la pratique</code>\r\n<code>2 </code><code># ------------------------</code>\r\n<code>3 </code><code># Notre premier jeu</code>\r\n<code>4 </code>\r\n<code>5 </code><code>print</code><code>(</code><code>&quot;Mama Miya &quot;</code> <code>+</code> <code>input</code><code>(</code><code>&quot;Entrer votre nom: &quot;</code><code>))</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Allez, je vous l&rsquo;explique. Vous l&rsquo;avez m&eacute;rit&eacute; :) !</p>\r\n\r\n<p>Notre programme ne comprend qu&rsquo;une seule ligne de code et cette ligne demande &agrave; afficher &ldquo;Mama Miya &ldquo; + input(&ldquo;Entrer votre nom: &ldquo;).</p>\r\n\r\n<p>L&rsquo;interpr&eacute;teur Python verra qu&rsquo;il peut afficher &ldquo;Mama Miya&rdquo; mais par contre pour afficher l&rsquo;autre partie il faudra demander &agrave; l&rsquo;utilisateur de saisir une valeur au travers de la fonction <strong>input</strong>. La fonction <em>input</em> entre donc en action, elle recueille le nom de l&rsquo;utilisateur tout en s&rsquo;assurant d&rsquo;afficher bien avant le prompt <strong>&ldquo;Entrer votre nom:&rdquo;</strong>.</p>\r\n\r\n<p>Le nom &eacute;tant maintenant r&eacute;cup&eacute;r&eacute;, on pourra ensuite le concat&eacute;ner &agrave; &ldquo;Mama Miya&rdquo;. Et voil&agrave;!</p>\r\n\r\n<p>Bien vrai que ces trois codes produisent le m&ecirc;me r&eacute;sultat &agrave; l&rsquo;ex&eacute;cution, j&rsquo;ai tendance ici &agrave; pr&eacute;f&eacute;rer le second qui me semble plus clair et lisible ce qui n&rsquo;est pas forcement le cas du troisi&egrave;me script.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code># Python par la pratique</code>\r\n<code>2 </code><code># ------------------------</code>\r\n<code>3 </code><code># Notre premier jeu</code>\r\n<code>4 </code>\r\n<code>5 </code><code>nom</code> <code>=</code> <code>input</code><code>(</code><code>&quot;Entrer votre nom: &quot;</code><code>)</code>\r\n<code>6 </code><code>print</code><code>(</code><code>&quot;Mama Miya &quot;</code> <code>+</code> <code>nom</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<h3>4.6 R&eacute;sum&eacute;</h3>\r\n\r\n<p>Dans ce chapitre, nous avons appris que:</p>\r\n\r\n<ul>\r\n	<li>L&rsquo;interpr&eacute;teur Python est tr&egrave;s convivial et peut &ecirc;tre utilis&eacute; comme une mini-calculatrice.</li>\r\n	<li>Le modulo est un op&eacute;rateur permettant d&rsquo;obtenir le reste de la division enti&egrave;re entre deux nombres.</li>\r\n	<li>En programmation, en lieu et place de dire &ldquo;texte&rdquo;, on parle tr&egrave;s souvent de chaines de caract&egrave;res.</li>\r\n	<li>Le caract&egrave;re \\n repr&eacute;sente un retour &agrave; la ligne.</li>\r\n	<li>Les variables vont nous permettre de pouvoir stocker des valeurs de mani&egrave;re temporaire au niveau de la m&eacute;moire RAM.</li>\r\n	<li>La m&eacute;moire RAM est une m&eacute;moire volatile, c&rsquo;est-&agrave;-dire que d&egrave;s que notre ordinateur cesse d&rsquo;&ecirc;tre aliment&eacute; en &eacute;lectricit&eacute;, le contenu de cette m&eacute;moire est automatiquement supprim&eacute;e.</li>\r\n	<li>Pour d&eacute;clarer une variable en Python, il vous faut tout d&rsquo;abord mettre le nom de votre variable, ensuite l&rsquo;&eacute;galit&eacute; &rdquo;=&rdquo; et pour terminer une valeur d&rsquo;initialisation.</li>\r\n	<li>Une constante est une variable dont la valeur ne sera pas amen&eacute;e &agrave; changer tout au long de l&rsquo;ex&eacute;cution d&rsquo;un programme.</li>\r\n	<li>Par convention, les noms des constantes sont &eacute;crits en majuscules.</li>\r\n	<li>Les commentaires nous servent &agrave; documenter notre code source.</li>\r\n	<li>Python est un langage sensible &agrave; la casse. C&rsquo;est-&agrave;-dire qu&rsquo;il fait une distinction entre les lettres majuscules et minuscules.</li>\r\n	<li>IDLE est un environnement de d&eacute;veloppement int&eacute;gr&eacute; Python.</li>\r\n	<li>La fonction print permet d&rsquo;afficher quelque chose au niveau de la console.</li>\r\n	<li>La fonction input permet de r&eacute;cup&eacute;rer une valeur saisie par l&rsquo;utilisateur.</li>\r\n	<li>La concat&eacute;nation est l&rsquo;op&eacute;ration consistant &agrave; coller bout &agrave; bout deux chaines de caract&egrave;res.</li>\r\n	<li>Il existe toujours plusieurs solutions &agrave; un probleme donn&eacute;.</li>\r\n</ul>\r\n\r\n<h2>5. Les fonctions</h2>\r\n\r\n<p>Un bon programmeur, ce n&rsquo;est pas celui qui &eacute;crit plusieurs milliers de lignes de code, mais en r&eacute;alit&eacute; c&rsquo;est celui qui en &eacute;crit le moins et dont le r&eacute;sultat parle de lui-m&ecirc;me. Car en g&eacute;n&eacute;ral ce n&rsquo;est pas la longueur du programme qui importe mais plut&ocirc;t les fonctionnalit&eacute;s de ce dernier. Alors la question &agrave; se poser c&rsquo;est comment faire pour &eacute;crire moins tout en produisant plus? La r&eacute;ponse &agrave; cette interrogation est le concept de <strong>modularit&eacute;</strong>.</p>\r\n\r\n<p>Dans ce chapitre, nous parlerons des <strong>fonctions</strong>. Cela nous permettra d&rsquo;introduire en douceur ce nouveau concept. Nous reparlerons un peu plus en prodonfeur de la <strong>modularit&eacute;</strong> au niveau du <a href="https://leanpub.com/premiers-pas-avec-python/read#chapitre-9">chapitre 9</a>.</p>\r\n\r\n<h3>5.1 Objectifs de la modularit&eacute;</h3>\r\n\r\n<p>Les deux objectifs principaux de la modularit&eacute; sont:</p>\r\n\r\n<ul>\r\n	<li><strong>La d&eacute;composition</strong> qui consiste &agrave; cr&eacute;er une bonne structuration de notre code source (par exemple en cr&eacute;ant des modules qui peuvent &ecirc;tre des fonctions, des classes&hellip;). Les modules ont l&rsquo;avantage d&rsquo;avoir leur propre contenu et d&rsquo;&ecirc;tre r&eacute;utilisable dans un autre programme.</li>\r\n	<li><strong>L&rsquo;abstraction</strong> qui permet de supprimer les d&eacute;tails. On ne soucie pas forc&eacute;ment de comment le code fonctionne mais on l&rsquo;utilise tout simplement. Par exemple, lorsque nous avons utilis&eacute; l&rsquo;op&eacute;ration de concat&eacute;nation, nous ne nous sommes pas souci&eacute;s de savoir comment est-ce que Python r&eacute;alisait cette op&eacute;ration, nous l&rsquo;avons tout simplement utilis&eacute;e.</li>\r\n</ul>\r\n\r\n<h3>5.2 Les fonctions</h3>\r\n\r\n<p>Les fonctions repr&eacute;sentent la forme de modularit&eacute; la plus simple en Python. Elles vont nous permettre de regrouper un ensemble d&rsquo;instructions jouant en quelque sorte le r&ocirc;le de petits programmes autonomes, effectuant une t&acirc;che sp&eacute;cifique et que nous pourrons par la suite int&eacute;grer dans notre programme principal. Apr&egrave;s avoir cr&eacute;&eacute; une fonction, nous pourrons l&rsquo;utiliser &agrave; tout moment et &agrave; n&rsquo;importe quel emplacement dans notre programme. Cela nous fera gagner &eacute;norm&eacute;ment de temps et aussi de l&rsquo;&eacute;nergie vu que nous n&rsquo;aurons pas &agrave; r&eacute;expliquer &agrave; l&rsquo;ordinateur une vingtaine de fois ce qu&rsquo;il est cens&eacute; faire.</p>\r\n\r\n<p>Prenons un exemple simple. Supposons que nous sommes en 2030 et vous &ecirc;tes devenu le d&eacute;veloppeur Python par excellence de la plan&egrave;te Mars en r&eacute;ussissant &agrave; faire en sorte que l&rsquo;ordinateur puisse produire du caf&eacute; et de surcro&icirc;t du bon caf&eacute; :).</p>\r\n\r\n<p>Afin de ne pas tr&egrave;s t&ocirc;t d&eacute;voil&eacute; votre algorithme miraculeux (et aussi parce que je ne sais pas faire du caf&eacute;), nous allons nous contenter de d&eacute;crire les diff&eacute;rentes &eacute;tapes de la conception de votre caf&eacute; par &eacute;tape1, &eacute;tape2, &eacute;tape3 et ainsi de suite.</p>\r\n\r\n<p>Ainsi si je veux faire du caf&eacute;, je n&rsquo;aurai qu&rsquo;&agrave; dire:</p>\r\n\r\n<ul>\r\n	<li>Etape 1</li>\r\n	<li>Etape 2</li>\r\n	<li>Etape 3</li>\r\n	<li>&hellip;</li>\r\n</ul>\r\n\r\n<p>Mais avouez que cela va devenir tr&egrave;s vite &eacute;nervant si je dois &agrave; chaque fois dire &agrave; l&rsquo;ordinateur:</p>\r\n\r\n<ul>\r\n	<li>Etape 1</li>\r\n	<li>Etape 2</li>\r\n	<li>Etape 3</li>\r\n	<li>&hellip;</li>\r\n</ul>\r\n\r\n<p>Et c&rsquo;est l&agrave; que les fonctions font leur entr&eacute;e en fanfare!</p>\r\n\r\n<p>Gr&acirc;ce aux fonctions, vous aurez la possibilit&eacute; de regrouper cet ensemble d&rsquo;instructions (on parle tr&egrave;s souvent de bloc d&rsquo;instructions) et l&rsquo;appeler autant de fois que vous le souhaitez.</p>\r\n\r\n<p>Je pourrai donc cr&eacute;er une fonction <strong>faire_du_cafe</strong> qui se pr&eacute;sentera comme suit:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>def</code> <code>faire_du_cafe</code><code>():</code>\r\n<code>2 </code>    <code>Etape</code> <code>1</code>\r\n<code>3 </code>    <code>Etape</code> <code>2</code>\r\n<code>4 </code>    <code>Etape</code> <code>3</code>\r\n<code>5 </code>    <code>...</code>\r\n</pre>\r\n</div>\r\n\r\n<p>et le jour o&ugrave; j&rsquo;aurai besoin d&rsquo;avoir du caf&eacute;, je n&rsquo;aurai qu&rsquo;&agrave; dire au niveau de mon programme:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>faire_du_cafe</code><code>()</code>\r\n</pre>\r\n</div>\r\n\r\n<p>et j&rsquo;aurais comme par magie ceci:</p>\r\n\r\n<p><img alt="Café produit en 2030 à partir de votre merveilleux algorithme" src="https://leanpub.com/site_images/premiers-pas-avec-python/cafe.jpg" /></p>\r\n\r\n<p>Caf&eacute; produit en 2030 &agrave; partir de votre merveilleux algorithme</p>\r\n\r\n<p>Si vous avez compris tout ce qui a &eacute;t&eacute; dit plus haut, alors c&rsquo;est que vous avez compris l&rsquo;utilit&eacute; des fonctions. Voyons &agrave; pr&eacute;sent plus s&eacute;rieusement comment cr&eacute;er une fonction en Python et comment l&rsquo;utiliser.</p>\r\n\r\n<h4>5.2.1 Cr&eacute;ation d&rsquo;une fonction</h4>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>def</code> <code>nom_de_la_fonction</code><code>(</code><code>parametre1</code><code>,</code> <code>parametre2</code><code>,</code> <code>&hellip;</code> <code>,</code> <code>parametren</code><code>):</code>\r\n<code>2 </code>  <code>&quot;&quot;&quot;Docstring de la fonction&quot;&quot;&quot;</code>\r\n<code>3 </code>\r\n<code>4 </code>  <code>Instruction</code>\r\n<code>5 </code>  <code>Instruction</code>\r\n<code>6 </code>  <code>&hellip;</code>\r\n</pre>\r\n</div>\r\n\r\n<h4>5.2.2 Explication</h4>\r\n\r\n<p>On a dans l&rsquo;ordre:</p>\r\n\r\n<ul>\r\n	<li>Le mot-cl&eacute; <strong>def</strong>, qui est l&rsquo;abr&eacute;viation de <strong>define</strong> (d&eacute;finir en anglais) et qui constitue le pr&eacute;lude &agrave; toute construction de fonction. En d&rsquo;autres termes sans ce fameux <strong>def</strong> l&rsquo;on ne saura pas qu&rsquo;il s&rsquo;agit d&rsquo;une fonction.</li>\r\n	<li>Ensuite vient le nom de la fonction. Les r&egrave;gles &agrave; suivre pour le choix du nom d&rsquo;une variable sont les m&ecirc;mes que celles d&rsquo;une fonction.</li>\r\n	<li>Entre parenth&egrave;ses sont list&eacute;s les param&egrave;tres de la fonction. Nous y reviendrons, mais tout ce qu&rsquo;il y a &agrave; savoir pour l&rsquo;instant c&rsquo;est que la liste des param&egrave;tres est d&eacute;limit&eacute;e par des parenth&egrave;ses ouvrante et fermante et que les param&egrave;tres sont s&eacute;par&eacute;s les uns des autres par des virgules.</li>\r\n	<li>Viennent ensuite <strong>les deux points</strong> : qui terminent la ligne. Ils sont <strong>tr&egrave;s tr&egrave;s tr&egrave;s</strong> importants ces deux points. Ils servent &agrave; d&eacute;limiter notre bloc d&rsquo;instructions (le bloc qui va permettre de dire ce que fera notre fonction).</li>\r\n</ul>\r\n\r\n<p>Dans d&rsquo;autres langages comme le langage C, les blocs d&rsquo;instructions sont d&eacute;limit&eacute;s par des accolades comme suit:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>#include</code><code>&lt;stdio.h&gt;</code>\r\n<code> 2 </code><code>#include</code><code>&lt;stdlib.h&gt;</code>\r\n<code> 3 </code>\r\n<code> 4 </code><code>int</code> <code>main</code><code>(</code><code>int</code> <code>argc</code><code>,</code> <code>char</code> <code>**</code><code>argv</code><code>){</code>\r\n<code> 5 </code>\r\n<code> 6 </code>    <code>char</code> <code>nom</code><code>[</code><code>30</code><code>];</code>\r\n<code> 7 </code>    <code>printf</code><code>(</code><code>&quot;Entrer votre nom: &quot;</code><code>);</code>\r\n<code> 8 </code>    <code>scanf</code><code>(</code><code>&quot;%s&quot;</code><code>,</code> <code>nom</code><code>);</code>\r\n<code> 9 </code>    <code>printf</code><code>(</code><code>&quot;Mama Miya %s&quot;</code><code>,</code> <code>nom</code><code>);</code>\r\n<code>10 </code>\r\n<code>11 </code>    <code>return</code> <code>0</code><code>;</code>\r\n<code>12 </code><code>}</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Ce programme correspond &agrave; notre jeu du chapire pr&eacute;c&eacute;dent traduit en langage C. Avouez que cela fait d&eacute;j&agrave; un peu peur :).</p>\r\n\r\n<h4>Le langage C est nul alors?</h4>\r\n\r\n<p>Oulala, ne pensez pas que le langage C est NUL. Loin de l&agrave;! Il est ce qu&rsquo;on appelle un langage de bas niveau, ce qui fait qu&rsquo;il se rapproche un peu plus de la machine &agrave; la diff&eacute;rence de Python qui comme nous l&rsquo;avons dit est un langage de haut niveau dans la mesure o&ugrave; ce dernier se rapproche beaucoup plus du langage humain. Les programmes en Python seront g&eacute;n&eacute;ralement plus courts et plus faciles &agrave; comprendre que ceux &eacute;crits en C et cela est tout &agrave; fait logique. Nous avons &eacute;norm&eacute;ment de choses en Python qui nous sont facilit&eacute;s (les listes, les tuples&hellip;). En langage C nous aurions eu &agrave; les coder par nous-m&ecirc;mes. Pour fermer cette petite parenth&egrave;se, sachez que bon nombre de langages de programmation comme Python ou encore Java ont &eacute;t&eacute; &eacute;crits en langage C. Ainsi, sans le langage C, Python n&rsquo;aurait probablement jamais vu le jour, de m&ecirc;me que ce livre :).</p>\r\n\r\n<p>Voici par exemple la d&eacute;claration d&rsquo;une fonction en langage C.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>int</code> <code>main</code><code>(</code><code>int</code> <code>argc</code><code>,</code> <code>char</code> <code>**</code><code>argv</code><code>){</code>\r\n<code>2 </code>\r\n<code>3 </code>    <code>char</code> <code>nom</code><code>[</code><code>30</code><code>];</code>\r\n<code>4 </code>    <code>printf</code><code>(</code><code>&quot;Entrer votre nom: &quot;</code><code>);</code>\r\n<code>5 </code>    <code>scanf</code><code>(</code><code>&quot;%s&quot;</code><code>,</code> <code>nom</code><code>);</code>\r\n<code>6 </code>    <code>printf</code><code>(</code><code>&quot;Mama Miya %s&quot;</code><code>,</code> <code>nom</code><code>);</code>\r\n<code>7 </code>\r\n<code>8 </code>    <code>return</code> <code>0</code><code>;</code>\r\n<code>9 </code><code>}</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Comme vous le voyez, la fonction <strong>main</strong> a son bloc d&rsquo;instructions qui a &eacute;t&eacute; d&eacute;limit&eacute; par des accolades ouvrante et fermante et notez que chaque instruction se termine par un point virgule alors qu&rsquo;en Python pour symboliser la fin d&rsquo;une instruction il suffit tout simplement d&rsquo;aller &agrave; la ligne suivante.</p>\r\n\r\n<p>Guido van Rossum, le cr&eacute;ateur du langage Python a trouv&eacute; plus judicieux d&rsquo;utiliser les deux points et l&rsquo;indentation pour d&eacute;limiter les blocs d&rsquo;instructions.</p>\r\n\r\n<p>En effet ce code en C aurait aussi fonctionn&eacute;:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>#include</code><code>&lt;stdio.h&gt;</code>\r\n<code>2 </code><code>#include</code><code>&lt;stdlib.h&gt;</code>\r\n<code>3 </code><code>int</code> <code>main</code><code>(</code><code>int</code> <code>argc</code><code>,</code> <code>char</code> <code>**</code><code>argv</code><code>){</code>\r\n<code>4 </code>    <code>char</code> <code>nom</code><code>[</code><code>30</code><code>];</code> <code>printf</code><code>(</code><code>&quot;Entrer votre nom: &quot;</code><code>);</code><code>scanf</code><code>(</code><code>&quot;%s&quot;</code><code>,</code> <code>nom</code><code>);</code><code>printf</code><code>(</code><code>&quot;Mama Miy\\</code>\r\n<code>5 </code><code>a %s&quot;</code><code>,</code> <code>nom</code><code>);</code><code>return</code> <code>EXIT_SUCCESS</code><code>;}</code>\r\n</pre>\r\n</div>\r\n\r\n<p>M&ecirc;me si ce dernier produira le m&ecirc;me r&eacute;sultat que le pr&eacute;c&eacute;dent, ce code est tout du moins illisible. Guido van Rossum s&rsquo;est donc demander comment forcer l&rsquo;utilisateur &agrave; &eacute;crire un code propre et non un charabia comme celui pr&eacute;sent&eacute; plus haut? La r&eacute;ponse <strong>l&rsquo;indentation</strong>.</p>\r\n\r\n<h5>5.2.3 L&rsquo;indentation</h5>\r\n\r\n<p>Si j&rsquo;&eacute;cris ce code en Python,</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>def</code> <code>faire_du_cafe</code><code>():</code>\r\n<code>2 </code>     <code>print</code><code>(</code><code>&quot;Etape 1&quot;</code><code>)</code> <code>print</code><code>(</code><code>&quot;Etape 2&quot;</code><code>)</code> <code>print</code><code>(</code><code>&quot;Etape 3&quot;</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>cela ne va tout simplement pas fonctionner. La raison est toute simple. Python utilise le retour &agrave; la ligne pour symboliser la fin d&rsquo;une instruction. Ainsi il ne saura jamais o&ugrave; est-ce que se termine la premi&egrave;re instruction, pour ensuite se pr&eacute;occuper de d&eacute;tecter le d&eacute;but de la seconde instruction!</p>\r\n\r\n<p>Cela &eacute;tait possible en C parce que le point virgule symbolisait cat&eacute;goriquement la fin d&rsquo;une instruction.</p>\r\n\r\n<p>Dans la m&ecirc;me optique, vu que les blocs d&rsquo;instructions en C sont d&eacute;limit&eacute;s par des accolades, vous pouvez pr&eacute;senter votre bloc d&rsquo;instructions comme vous le souhaitez. Le compilateur C saura que votre bloc d&rsquo;instructions sera compos&eacute; de tout ce qui se trouve &agrave; l&rsquo;int&eacute;rieur des accolades.</p>\r\n\r\n<p>En Python par contre, ce sera diff&eacute;rent et croyez-moi, c&rsquo;est pour notre bien. Voil&agrave; comment nous devons proc&eacute;der:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>def</code> <code>dire_bonjour</code><code>():</code>\r\n<code>2 </code>     <code>print</code><code>(</code><code>&quot;Bonjour Maman&quot;</code><code>)</code>\r\n<code>3 </code>     <code>print</code><code>(</code><code>&quot;Bonjour Papa&quot;</code><code>)</code>\r\n<code>4 </code>     <code>print</code><code>(</code><code>&quot;Bonjour Gloradie&quot;</code><code>)</code> <code>#Ma grande s&oelig;ur ador&eacute;e :)</code>\r\n<code>5 </code>\r\n<code>6 </code><code>print</code><code>(</code><code>&quot;Je ne fais pas partie du bloc d&#39;instructions.&quot;</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<ul>\r\n	<li>Il faudra mettre premi&egrave;rement mettre les deux points pour signifier que nous allons maintenant commencer &agrave; d&eacute;finir notre bloc d&rsquo;instructions.</li>\r\n	<li>et ensuite chaque instruction de notre bloc doit avoir le m&ecirc;me nombre d&rsquo;espaces &agrave; gauche, on parle <strong>d&rsquo;indentation</strong>.</li>\r\n</ul>\r\n\r\n<p>Exemple:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>def</code> <code>dire_bonjour</code><code>():</code>\r\n<code>2 </code>     <code>print</code><code>(</code><code>&quot;Bonjour Maman&quot;</code><code>)</code>\r\n<code>3 </code>     <code>print</code><code>(</code><code>&quot;Bonjour Papa&quot;</code><code>)</code>\r\n<code>4 </code>     <code>print</code><code>(</code><code>&quot;Bonjour Gloradie&quot;</code><code>)</code>\r\n<code>5 </code>\r\n<code>6 </code><code>print</code><code>(</code><code>&quot;Je ne fais pas partie du bloc d&#39;instructions&quot;</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Vous pouvez remarquer que notre bloc d&rsquo;instructions au niveau de la fonction <strong>dire_bonjour</strong> est compos&eacute; de trois instructions &eacute;tant donn&eacute; que ces derni&egrave;res ont la m&ecirc;me indentation. Vous pouvez laisser autant d&rsquo;espaces que vous le souhaitez mais g&eacute;n&eacute;ralement 4 espaces par niveau d&rsquo;indentation sont choisis par convention.</p>\r\n\r\n<p>La derni&egrave;re instruction quant &agrave; elle ne fait pas partie de notre bloc d&rsquo;instructions vu qu&rsquo;il n&rsquo;y a pas d&rsquo;indentation. Autrement dit, elle n&rsquo;a pas la m&ecirc;me indentation que les autres instructions.</p>\r\n\r\n<p>Si nous souhaitons plus tard l&rsquo;ajouter au contenu de notre fonction (on dit plut&ocirc;t corps de la fonction), il va falloir alors revoir le niveau d&rsquo;indentation comme ceci:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>def</code> <code>dire_bonjour</code><code>():</code>\r\n<code>2 </code>     <code>print</code><code>(</code><code>&quot;Bonjour Maman&quot;</code><code>)</code>\r\n<code>3 </code>     <code>print</code><code>(</code><code>&quot;Bonjour Papa&quot;</code><code>)</code>\r\n<code>4 </code>     <code>print</code><code>(</code><code>&quot;Bonjour Gloradie&quot;</code><code>)</code>\r\n<code>5 </code>\r\n<code>6 </code>     <code>print</code><code>(</code><code>&quot;Je fais maintenant partie du bloc d&#39;instructions :)&quot;</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Gardez en t&ecirc;te ce principe d&rsquo;indentation pour la gestion des blocs d&rsquo;instructions car il sera &eacute;galement de la partie lorsque nous aborderons tr&egrave;s bient&ocirc;t les notions de conditions, boucles&hellip;</p>\r\n\r\n<h4>5.2.4 D&eacute;finition d&rsquo;une fonction avec des param&egrave;tres</h4>\r\n\r\n<p>Jusque l&agrave; notre fonction <code>dire_bonjour()</code> nous permettait de ne saluer que les membres de notre famille. Il serait vraiment poli de pouvoir &eacute;galement saluer les personnes que nous rencontrerons dans la rue. N&rsquo;ai-je pas raison?</p>\r\n\r\n<p>Pour cela, notre fonction aura besoin de ce qu&rsquo;on appelle des param&egrave;tres. Un param&egrave;tre c&rsquo;est tout simplement un ingr&eacute;dient que vous pourrez donner &agrave; votre fonction afin que cette derni&egrave;re puisse vous concocter quelque chose de beaucoup plus d&eacute;licieux. Vous pourrez donc ajouter autant de param&egrave;tres que vous le souhaitez. En gros, c&rsquo;est un peu comme une sauce, on peut y ajouter du piment, du sel, du sucre :)</p>\r\n\r\n<p>Voici donc notre nouvelle fonction avec cette fois-ci un param&egrave;tre <code>nom</code>:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>def</code> <code>dire_bonjour_a</code><code>(</code><code>nom</code><code>):</code>\r\n<code>2 </code>     <code>&quot;&quot;&quot; Permet de saluer la personne ayant le nom donn&eacute; en param&egrave;tre&quot;&quot;&quot;</code>\r\n<code>3 </code>     <code>print</code><code>(</code><code>&quot;Salut &quot;</code> <code>+</code> <code>nom</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Remarquez que premi&egrave;rement, j&rsquo;ai eu &agrave; changer le nom de notre fonction en ajoutant un petit <code>a</code> &agrave; la fin afin d&rsquo;avoir quelque chose de beaucoup plus commode. Rappelez vous que le nom de votre fonction doit refl&eacute;ter au mieux ce que fait cette derni&egrave;re.</p>\r\n\r\n<p>Une fois que notre fonction r&eacute;cup&egrave;re le param&egrave;tre nom, elle n&rsquo;aura qu&rsquo;&agrave; afficher <code>&quot;Salut &quot;</code> concat&eacute;n&eacute; au nom qui sera pass&eacute; en argument. Notez ce petit espace apr&egrave;s le <code>t</code> de <code>Salut</code> afin de ne pas avoir le nom accol&eacute; au mot <code>Salut</code> .</p>\r\n\r\n<p>Maintenant que notre fonction a &eacute;t&eacute; &agrave; pr&eacute;sent cr&eacute;&eacute;e, voyons voir maintenant comment l&rsquo;utiliser, car il serait vraiment triste de cr&eacute;er une fonction qui ne sera jamais utilis&eacute;e.</p>\r\n\r\n<p>En lieu et place de dire <code>utiliser</code> une fonction, les programmeurs vous diront <code>appeler une fonction</code>. Tachez donc de vous en souvenir histoire d&rsquo;avoir une place dans les discussions de tordus.</p>\r\n\r\n<p>Pour faire simple, nous avons deux grandes &eacute;tapes en ce qui concerne les fonctions:</p>\r\n\r\n<ul>\r\n	<li>La d&eacute;finition de la fonction (Cr&eacute;ation de la fonction)</li>\r\n	<li>L&rsquo;appel de la fonction (Utilisation de la fonction)</li>\r\n</ul>\r\n\r\n<p>Nous avons donc d&eacute;fini notre fonction <code>dire_bonjour_a()</code>, voyons &agrave; pr&eacute;sent comment l&rsquo;utiliser!</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>&gt;&gt;&gt;</code> <code>dire_bonjour_a</code><code>(</code><code>&quot;Honore&quot;</code><code>)</code>\r\n<code> 2 </code><code>Salut</code> <code>Honore</code>\r\n<code> 3 </code><code>&gt;&gt;&gt;</code> <code>dire_bonjour_a</code><code>(</code><code>&quot;Armand&quot;</code><code>)</code>\r\n<code> 4 </code><code>Salut</code> <code>Armand</code>\r\n<code> 5 </code><code>&gt;&gt;&gt;</code> <code>dire_bonjour_a</code><code>(</code><code>&quot;Cynthia&quot;</code><code>)</code>\r\n<code> 6 </code><code>Salut</code> <code>Cynthia</code>\r\n<code> 7 </code><code>&gt;&gt;&gt;</code> <code>dire_bonjour_a</code><code>(</code><code>2</code><code>)</code>\r\n<code> 8 </code><code>Traceback</code> <code>(</code><code>most</code> <code>recent</code> <code>call</code> <code>last</code><code>):</code>\r\n<code> 9 </code>  <code>File</code> <code>&quot;&lt;pyshell#11&gt;&quot;</code><code>,</code> <code>line</code> <code>1</code><code>,</code> <code>in</code> <code>&lt;</code><code>module</code><code>&gt;</code>\r\n<code>10 </code>    <code>dire_bonjour_a</code><code>(</code><code>2</code><code>)</code>\r\n<code>11 </code>  <code>File</code> <code>&quot;&lt;pyshell#7&gt;&quot;</code><code>,</code> <code>line</code> <code>2</code><code>,</code> <code>in</code> <code>dire_bonjour_a</code>\r\n<code>12 </code>    <code>print</code><code>(</code><code>&quot;Salut &quot;</code> <code>+</code> <code>nom</code><code>)</code>\r\n<code>13 </code><code>TypeError</code><code>:</code> <code>cannot</code> <code>concatenate</code> <code>&#39;str&#39;</code> <code>and</code> <code>&#39;int&#39;</code> <code>objects</code>\r\n<code>14 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Pour appeler une fonction, comme vous pouvez le remarquer, c&rsquo;est vraiment tr&egrave;s simple. Il suffit de mettre le nom de la fonction, ici <code>dire_bonjour_a</code>, et ensuite lui fournir les diff&eacute;rents arguments.</p>\r\n\r\n<h4>C&rsquo;est quoi encore un argument?</h4>\r\n\r\n<p>Lorsqu&rsquo;on d&eacute;finit une fonction, les ingr&eacute;dients ajout&eacute;s entre parenth&egrave;ses sont appel&eacute;s <strong>param&egrave;tres</strong>. Par contre, lors de l&rsquo;appel de la fonction, on parle plut&ocirc;t <strong>d&rsquo;arguments</strong>. C&rsquo;est aussi simple que cela.</p>\r\n\r\n<p>Les exemples pr&eacute;c&eacute;dents <code>dire_bonjour_a(&quot;Honore&quot;)</code>, <code>dire_bonjour_a(&quot;Cynthia&quot;)</code> &hellip; fonctionnent &agrave; la perfection mais ceci n&rsquo;est pas le cas lorsque je passe cette fois-ci un <code>2</code> en argument. Pourquoi?</p>\r\n\r\n<p>Ne pensez surtout pas que Python est assez intelligent pour deviner que <strong>2</strong> n&rsquo;est pas un nom. J&rsquo;avoue que cela aurait &eacute;t&eacute; super cool, mais malheureusement ce n&rsquo;est pas le cas.</p>\r\n\r\n<p>L&agrave; nous avons tout simplement une erreur de s&eacute;mantique statique. Pour ceux qui ont eu &agrave; lire le <a href="https://leanpub.com/premiers-pas-avec-python/read#jargon-informatique">chapitre 2</a>, nous avions dit que la s&eacute;mantique statique visait &agrave; v&eacute;rifier que les expressions ayant une bonne syntaxe ont une <strong>signification</strong>. Vu que nous avons pass&eacute; <strong>2</strong> en argument, notre expression n&rsquo;a donc aucune signification! De quoi je parle? Voyons cela pas &agrave; pas.</p>\r\n\r\n<p>Lorsque nous appelons notre fonction en mettant <code>dire_bonjour_a(2)</code>, qu&rsquo;est-ce qui se passe? Notre fonction <code>dire_bonjour_a</code> est appel&eacute;e. Notre param&egrave;tre <strong>nom</strong> aura donc comme valeur <strong>2</strong> vu que c&rsquo;est ce fameux deux (2) qui a &eacute;t&eacute; pass&eacute; en argument.</p>\r\n\r\n<p>Ainsi on a donc notre fonction qui devra ex&eacute;cuter cette instruction:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>print</code><code>(</code><code>&quot;Salut &quot;</code> <code>+</code> <code>2</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Pour vous <code>&quot;Salut &quot; + 2</code>, qu&rsquo;est-ce que cela signifie? Saluer avec les deux mains peut &ecirc;tre :). Mais pour notre interpr&eacute;teur Python cela ne signifie rien. Il est donc un peu confus. Et comme je vous l&rsquo;ai dit, lorsque l&rsquo;interpr&eacute;teur ne comprend pas quelque chose il vous le dit clairement. R&eacute;sultat on a ceci:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>Traceback</code> <code>(</code><code>most</code> <code>recent</code> <code>call</code> <code>last</code><code>):</code>\r\n<code>2 </code>  <code>File</code> <code>&quot;&lt;pyshell#11&gt;&quot;</code><code>,</code> <code>line</code> <code>1</code><code>,</code> <code>in</code> <code>&lt;</code><code>module</code><code>&gt;</code>\r\n<code>3 </code>    <code>dire_bonjour_a</code><code>(</code><code>2</code><code>)</code>\r\n<code>4 </code>  <code>File</code> <code>&quot;&lt;pyshell#7&gt;&quot;</code><code>,</code> <code>line</code> <code>2</code><code>,</code> <code>in</code> <code>dire_bonjour_a</code>\r\n<code>5 </code>    <code>print</code><code>(</code><code>&quot;Salut &quot;</code> <code>+</code> <code>nom</code><code>)</code>\r\n<code>6 </code><code>TypeError</code><code>:</code> <code>cannot</code> <code>concatenate</code> <code>&#39;str&#39;</code> <code>and</code> <code>&#39;int&#39;</code> <code>objects</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Dans tout ce charabia, ce qui nous int&eacute;resse le plus, c&rsquo;est la derni&egrave;re ligne.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>TypeError</code><code>:</code> <code>cannot</code> <code>concatenate</code> <code>&#39;str&#39;</code> <code>and</code> <code>&#39;int&#39;</code> <code>objects</code>\r\n</pre>\r\n</div>\r\n\r\n<p>L&rsquo;interpr&eacute;teur nous dit ici qu&rsquo;il ne peut pas concat&eacute;ner une cha&icirc;ne de caract&egrave;res et un entier. <code>str</code> est le diminutif de <code>string</code> qui signifie cha&icirc;ne de caract&egrave;res et <code>int</code> est le diminutif de <code>integer</code> qui signifie entier.</p>\r\n\r\n<p>Ainsi pour l&rsquo;instant, comme vous pouvez le voir, si ce n&rsquo;est pas une cha&icirc;ne de caract&egrave;res qui est pass&eacute;e en argument, nous aura droit &agrave; coup s&ucirc;r &agrave; une belle erreur.</p>\r\n\r\n<p>Petite confidence <strong>2</strong> est le nom d&rsquo;un ami Japonais <strong>Yung 2</strong> que j&rsquo;ai eu &agrave; rencontrer lors d&rsquo;un s&eacute;minaire au Japon. Il a &eacute;t&eacute; vraiment surpris que je ne l&rsquo;ai pas salu&eacute; lorsqu&rsquo;on s&rsquo;est revus hier au restaurant. Ce qu&rsquo;il ne sait pas, c&rsquo;est que ce n&rsquo;&eacute;tait pas de ma faute, mais celle de notre fonction.</p>\r\n\r\n<h4>Qui l&rsquo;a &eacute;crite cette fonction?</h4>\r\n\r\n<p>Vous me laissez tomber? Ce n&rsquo;est vraiment pas gentil de votre part :)</p>\r\n\r\n<p>Je compte revoir <strong>Yung 2</strong> demain. Il faut donc que notre fonction puisse &ecirc;tre en mesure de le saluer afin d&rsquo;apaiser la tension qui r&egrave;gne d&eacute;sormais entre nous.</p>\r\n\r\n<p>Premi&egrave;re solution et plut&ocirc;t simple, serait de transformer <code>2</code> en <code>&quot;2&quot;</code>. Le premier <code>2</code> est un entier (un <strong>int</strong>), le second quant &agrave; lui est une cha&icirc;ne de caract&egrave;res (<strong>string</strong> ou en plus court <strong>str</strong>).</p>\r\n\r\n<p>La preuve:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>type</code><code>(</code><code>2</code><code>)</code>\r\n<code>2 </code><code>&lt;</code><code>type</code> <code>&#39;int&#39;</code><code>&gt;</code>\r\n<code>3 </code><code>&gt;&gt;&gt;</code> <code>type</code><code>(</code><code>&quot;2&quot;</code><code>)</code>\r\n<code>4 </code><code>&lt;</code><code>type</code> <code>&#39;str&#39;</code><code>&gt;</code>\r\n<code>5 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>La fonction <strong>type</strong> vous retourne le type de l&rsquo;objet pass&eacute; en argument.</p>\r\n\r\n<p>On aurait pu aussi avoir le type en utilisant l&rsquo;attribut <code>__class__</code>:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>(</code><code>2</code><code>)</code><code>.</code><code>__class__</code>\r\n<code>2 </code><code>&lt;</code><code>type</code> <code>&#39;int&#39;</code><code>&gt;</code>\r\n<code>3 </code><code>&gt;&gt;&gt;</code> <code>&quot;2&quot;</code><code>.</code><code>__class__</code>\r\n<code>4 </code><code>&lt;</code><code>type</code> <code>&#39;str&#39;</code><code>&gt;</code>\r\n<code>5 </code><code>&gt;&gt;&gt;</code> \r\n</pre>\r\n</div>\r\n\r\n<p>Regardez le code suivant et essayez de deviner ce que cet attribut <code>__doc__</code> permet de faire :)</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>def</code> <code>dire_bonjour_a</code><code>(</code><code>nom</code><code>):</code>\r\n<code>2 </code>     <code>&quot;&quot;&quot;Permet de saluer la personne ayant le nom donn&eacute; en param&egrave;tre&quot;&quot;&quot;</code>\r\n<code>3 </code>     <code>print</code><code>(</code><code>&quot;Salut &quot;</code> <code>+</code> <code>nom</code><code>)</code>\r\n<code>4 </code><code>&gt;&gt;&gt;</code> <code>dire_bonjour_a</code><code>.</code><code>__doc__</code>\r\n<code>5 </code><code>&#39;Permet de saluer la personne ayant le nom donn</code><code>\\xc3\\xa9</code><code> en param</code><code>\\xc3\\xa8</code><code>tre&#39;</code>\r\n<code>6 </code><code>&gt;&gt;&gt;</code> \r\n</pre>\r\n</div>\r\n\r\n<p>J&rsquo;ai tendance &agrave; appeler Python le langage des undescores. J&rsquo;esp&egrave;re que vous comprendrez maintenant pourquoi.</p>\r\n\r\n<p>Tr&ecirc;ve de bavardage! Ce que je veux dire c&rsquo;est qu&rsquo;on aurait pu appeler notre fonction comme suit:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>dire_bonjour_a</code><code>(</code><code>&quot;2&quot;</code><code>)</code>\r\n<code>2 </code><code>Salut</code> <code>2</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Cela fonctionne, je suis d&rsquo;accord. Mais le fait est que je veuille garder l&rsquo;entier <code>2</code> car Yung m&rsquo;a dit que cela fait partie de leur culture et il faudrait &ecirc;tre vraiment fou pour porter atteinte &agrave; la culture d&rsquo;un japonais n&rsquo;est-ce pas?</p>\r\n\r\n<p>Vous allez voir, ce sera tr&egrave;s simple! Nous allons utiliser ce qu&rsquo;on appelle <strong>le cast encore appel&eacute; casting ou encore transtypage ou m&ecirc;me conversion de types</strong>. Tous ces mots pour signifier la m&ecirc;me chose.</p>\r\n\r\n<p>Le <em>casting</em> consiste &agrave; convertir un objet d&rsquo;un type donn&eacute; en un autre. Ainsi gr&acirc;ce au casting, vous aurez la possibilit&eacute; de convertir un entier en une cha&icirc;ne de caract&egrave;res, un nombre r&eacute;el en un entier&hellip;. Passons sans plus tarder &agrave; une petite phase pratique pour ainsi sortir de cette atmosph&egrave;re d&rsquo;abstraction.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>&gt;&gt;&gt;</code> <code>int</code><code>(</code><code>&quot;3&quot;</code><code>)</code> <code>#Convertir la cha&icirc;ne de caract&egrave;res &quot;3&quot; en entier</code>\r\n<code> 2 </code><code>3</code>\r\n<code> 3 </code><code>&gt;&gt;&gt;</code> <code>int</code><code>(</code><code>3.0</code><code>)</code> <code>#Convertir le r&eacute;el 3.0 en entier</code>\r\n<code> 4 </code><code>3</code>\r\n<code> 5 </code><code>&gt;&gt;&gt;</code> <code>int</code><code>(</code><code>3.5</code><code>)</code> <code>#Convertir le r&eacute;el 3.5 en entier</code>\r\n<code> 6 </code><code>3</code>\r\n<code> 7 </code><code>&gt;&gt;&gt;</code> <code>str</code><code>(</code><code>3</code><code>)</code> <code>#Convertir l&#39;entier 3 en cha&icirc;ne de caract&egrave;res</code>\r\n<code> 8 </code><code>&#39;3&#39;</code>\r\n<code> 9 </code><code>&gt;&gt;&gt;</code> <code>int</code><code>(</code><code>&#39;123&#39;</code><code>)</code> <code>#Convertir la cha&icirc;ne de caract&egrave;res &#39;123&#39; en entier</code>\r\n<code>10 </code><code>123</code>\r\n<code>11 </code><code>&gt;&gt;&gt;</code> <code>int</code><code>(</code><code>&#39;maman&#39;</code><code>)</code>\r\n<code>12 </code>\r\n<code>13 </code><code>Traceback</code> <code>(</code><code>most</code> <code>recent</code> <code>call</code> <code>last</code><code>):</code>\r\n<code>14 </code>  <code>File</code> <code>&quot;&lt;pyshell#6&gt;&quot;</code><code>,</code> <code>line</code> <code>1</code><code>,</code> <code>in</code> <code>&lt;</code><code>module</code><code>&gt;</code>\r\n<code>15 </code>    <code>int</code><code>(</code><code>&#39;maman&#39;</code><code>)</code>\r\n<code>16 </code><code>ValueError</code><code>:</code> <code>invalid</code> <code>literal</code> <code>for</code> <code>int</code><code>()</code> <code>with</code> <code>base</code> <code>10</code><code>:</code> <code>&#39;maman&#39;</code>\r\n<code>17 </code><code>&gt;&gt;&gt;</code> <code>float</code><code>(</code><code>3</code><code>)</code>\r\n<code>18 </code><code>3.0</code>\r\n<code>19 </code><code>&gt;&gt;&gt;</code> <code>int</code><code>(</code><code>&#39;123.09&#39;</code><code>)</code>\r\n<code>20 </code>\r\n<code>21 </code><code>Traceback</code> <code>(</code><code>most</code> <code>recent</code> <code>call</code> <code>last</code><code>):</code>\r\n<code>22 </code>  <code>File</code> <code>&quot;&lt;pyshell#11&gt;&quot;</code><code>,</code> <code>line</code> <code>1</code><code>,</code> <code>in</code> <code>&lt;</code><code>module</code><code>&gt;</code>\r\n<code>23 </code>    <code>int</code><code>(</code><code>&#39;123.09&#39;</code><code>)</code>\r\n<code>24 </code><code>ValueError</code><code>:</code> <code>invalid</code> <code>literal</code> <code>for</code> <code>int</code><code>()</code> <code>with</code> <code>base</code> <code>10</code><code>:</code> <code>&#39;123.09&#39;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Gr&acirc;ce &agrave; ces exemples vous avez pu remarquer qu&rsquo;appliquer le principe du casting est vraiment tr&egrave;s simple en Python. La syntaxe est la suivante: <code>python nouveau_type(valeur) </code> La conversion d&rsquo;un nombre r&eacute;el en un entier consiste &agrave; op&eacute;rer tout simplement une troncature. <strong>23.45</strong> deviendra donc <strong>23</strong> en entier. Toute la partie apr&egrave;s la virgule est supprim&eacute;e. Nous verrons apr&egrave;s comment proc&eacute;der &agrave; des arrondis lorsque nous verrons un peu plus en d&eacute;tails les modules built-in Python.</p>\r\n\r\n<p>Vous devez normalement avoir des questions par rapport aux deux erreurs que nous avons eu. La premi&egrave;re erreur est tout &agrave; fait normale, convertir <code>&quot;maman&quot;</code> en entier, je me demande bien ce que j&rsquo;aurais donn&eacute; comme r&eacute;ponse?! Peut-&ecirc;tre bien 5 vu que ma m&egrave;re a 5 enfants :) (Je vous dis trop de choses sur moi dans ce livre hmmm). Cela nous permet de noter qu&rsquo;il faudrait avoir un minimum de bon sens dans cette histoire de casting car on ne peut pas convertir n&rsquo;importe quoi et n&rsquo;importe comment.</p>\r\n\r\n<p>La deuxi&egrave;me erreur par contre est un peu &eacute;trange je peux l&rsquo;avouer. Nous disons l&agrave; que nous souhaitons convertir la cha&icirc;ne<code>&#39;123.09&#39;</code> en entier. &Ccedil;a semble logique et &ccedil;a l&rsquo;est. Par contre comme vous pouvez le voir interpr&eacute;teur lui ne comprend pas ce qu&rsquo;on veut dire. Il va donc falloir le guider.</p>\r\n\r\n<p>Pour ce faire, tentons de remplacer <strong>int(&lsquo;123.09&rsquo;)</strong> par <strong>float(&lsquo;123.09&rsquo;)</strong> et voyons voir ce que cela donne:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>float</code><code>(</code><code>&#39;123.09&#39;</code><code>)</code>\r\n<code>2 </code><code>123.09</code>\r\n<code>3 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Parfait! L&rsquo;interpr&eacute;teur comprend parfaitement ce que l&rsquo;on veut si il s&rsquo;agit d&rsquo;une conversion vers un float (r&eacute;el). Vous voyez maintenant comment on pourra r&eacute;soudre notre probl&egrave;me? Si si regardez on peut &hellip;?</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>int</code><code>(</code> <code>float</code><code>(</code><code>&#39;123.09&#39;</code><code>)</code> <code>)</code>\r\n<code>2 </code><code>123</code>\r\n<code>3 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>J&rsquo;avoue que c&rsquo;est vraiment bizarre que cela ne soit pas disponible directement en Python sans avoir &agrave; passer par un casting interm&eacute;diaire. Mais bref, nous devons nous contenter des moyens du bord. Ainsi si un jour, il vous arrive de vouloir convertir un r&eacute;el qui est repr&eacute;sent&eacute; sous forme de cha&icirc;ne de caract&egrave;res en entier, vous savez dor&eacute;navant comment le faire.</p>\r\n\r\n<h4>5.2.5 Dire bonjour &agrave; Yung 2</h4>\r\n\r\n<p>Notre vrai probl&egrave;me &eacute;tait que nous puissions appeler la fonction <strong>dire_bonjour_a</strong> et lui passer en param&egrave;tre l&rsquo;entier 2. Avec cette petite escapade sur le fonctionnement du casting que vous avez eu &agrave; faire, je peux vous assurer que vous &ecirc;tes en mesure de pouvoir maintenant r&eacute;gler ce probl&egrave;me et sauver par la m&ecirc;me occasion ma vie. Please guys, c&rsquo;est un japonais :).</p>\r\n\r\n<p>La solution que je vous propose est la suivante:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>def</code> <code>dire_bonjour_a</code><code>(</code><code>nom</code><code>):</code>\r\n<code>2 </code>    <code>print</code><code>(</code><code>&quot;Salut &quot;</code> <code>+</code> <code>str</code><code>(</code><code>nom</code><code>)</code> <code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Et si on ex&eacute;cute notre fonctionne, tout fonctionne &agrave; la perfection.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>dire_bonjour_a</code><code>(</code><code>2</code><code>)</code>\r\n<code>2 </code><code>Salut</code> <code>2</code>\r\n<code>3 </code><code>&gt;&gt;&gt;</code> <code>dire_bonjour_a</code><code>(</code><code>&quot;Honore&quot;</code><code>)</code>\r\n<code>4 </code><code>Salut</code> <code>Honore</code>\r\n<code>5 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<h4>Param&egrave;tres avec valeurs par d&eacute;faut</h4>\r\n\r\n<p>Dans la vie r&eacute;elle, j&rsquo;ai pour habitude d&rsquo;appeler toutes les personnes dont je ne connais pas le nom <strong>Boss</strong>. Notre fonction devra donc r&eacute;agir de la sorte:</p>\r\n\r\n<ul>\r\n	<li>Si je lui donne un nom, alors elle devra affiche <strong>Salut suivi du nom</strong></li>\r\n	<li>Dans le cas contraire, elle devra affiche tout simplement <strong>Salut Boss</strong></li>\r\n</ul>\r\n\r\n<p>On peut r&eacute;aliser cela tr&egrave;s facilement en Python en donnant ce qu&rsquo;on appelle une valeur par d&eacute;faut &agrave; notre param&egrave;tre. Cela donne donc en code:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>def</code> <code>dire_bonjour_a</code><code>(</code><code>nom</code> <code>=</code> <code>&quot;Boss&quot;</code><code>):</code>\r\n<code>2 </code>    <code>print</code><code>(</code><code>&quot;Salut &quot;</code> <code>+</code> <code>str</code><code>(</code><code>nom</code><code>)</code> <code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Notre fonction <strong>dire_bonjour_a</strong> a donc maintenant une valeur par d&eacute;faut <strong>&ldquo;Boss&rdquo;</strong>. C&rsquo;est en gros une simple initialisation de notre param&egrave;tre. Mais gr&acirc;ce &agrave; cette soit disant petite initialisation, je peux &agrave; pr&eacute;sent appeler ma fonction <strong>dire_bonjour_a</strong> sans passer obligatoirement d&rsquo;argument.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>dire_bonjour_a</code><code>(</code><code>2</code><code>)</code>\r\n<code>2 </code><code>Salut</code> <code>2</code>\r\n<code>3 </code><code>&gt;&gt;&gt;</code> <code>dire_bonjour_a</code><code>()</code>\r\n<code>4 </code><code>Salut</code> <code>Boss</code>\r\n<code>5 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Vous pouvez donner donc une valeur par d&eacute;faut &agrave; un param&egrave;tre afin de le rendre optionnel.</p>\r\n\r\n<h4>5.2.6 Signature ou prototype d&rsquo;une fonction</h4>\r\n\r\n<p>On entend par <em>signature de fonction</em>, les &eacute;l&eacute;ments qui permettent au langage d&rsquo;identifier ladite fonction. En Python, comme vous avez pu le voir, on ne pr&eacute;cise pas les types des param&egrave;tres. Ainsi en Python, la signature d&rsquo;une fonction est tout simplement <strong>le nom de la fonction</strong>. Cela signifie que vous ne pouvez pas d&eacute;finir deux fonctions ayant le m&ecirc;me nom. Si vous le faites, l&rsquo;ancienne d&eacute;finition est &eacute;cras&eacute;e par la nouvelle.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>def</code> <code>carre</code><code>():</code>\r\n<code> 2 </code>       <code>&quot;&quot;&quot; Premi&egrave;re fonction charg&eacute;e d&#39;afficher une figure&quot;&quot;&quot;</code>\r\n<code> 3 </code>\r\n<code> 4 </code>    <code>print</code> <code>&quot;&quot;&quot;</code>\r\n<code> 5 </code><code>        *****</code>\r\n<code> 6 </code><code>        *   *</code>\r\n<code> 7 </code><code>        *****&quot;&quot;&quot;</code>\r\n<code> 8 </code>\r\n<code> 9 </code><code>carre</code><code>()</code> <code>#Affichera notre joli petit carr&eacute;</code>\r\n<code>10 </code>\r\n<code>11 </code><code>def</code> <code>carre</code><code>(</code><code>nombre</code><code>):</code>\r\n<code>12 </code>    <code>&quot;&quot;&quot; Seconde fonction &eacute;crasant la premi&egrave;re et qui affiche le carr&eacute;</code>\r\n<code>13 </code><code>    d&#39;un nombre pass&eacute; en argument&quot;&quot;&quot;</code>\r\n<code>14 </code>    \r\n<code>15 </code>    <code>resultat</code> <code>=</code> <code>nombre</code> <code>*</code> <code>nombre</code>\r\n<code>16 </code>    <code>print</code><code>(</code><code>&quot;Le carr&eacute; de &quot;</code> <code>+</code> <code>str</code><code>(</code><code>nombre</code><code>)</code> <code>+</code> <code>&quot; est &quot;</code> <code>+</code> <code>str</code><code>(</code><code>resultat</code><code>))</code>\r\n<code>17 </code>\r\n<code>18 </code><code>carre</code><code>(</code><code>2</code><code>)</code> <code>#Affichera 4</code>\r\n<code>19 </code><code>carre</code><code>(</code><code>4</code><code>)</code> <code>#Affichera 16</code>\r\n<code>20 </code><code>carre</code><code>()</code> <code>#Affichera une erreur</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Si on ex&eacute;cute notre programme, on obtient le r&eacute;sultat suivant:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code>    <code>*****</code>\r\n<code> 2 </code>    <code>*</code>   <code>*</code>\r\n<code> 3 </code>    <code>*****</code>\r\n<code> 4 </code><code>Le</code> <code>carr</code><code>&eacute;</code> <code>de</code> <code>2</code> <code>est</code> <code>4</code>\r\n<code> 5 </code><code>Le</code> <code>carr</code><code>&eacute;</code> <code>de</code> <code>4</code> <code>est</code> <code>16</code>\r\n<code> 6 </code>\r\n<code> 7 </code><code>Traceback</code> <code>(</code><code>most</code> <code>recent</code> <code>call</code> <code>last</code><code>):</code>\r\n<code> 8 </code>  <code>File</code> <code>&quot;C:/Users/honore.h/Desktop/toto.py&quot;</code><code>,</code> <code>line</code> <code>18</code><code>,</code> <code>in</code> <code>&lt;</code><code>module</code><code>&gt;</code>\r\n<code> 9 </code>    <code>carre</code><code>()</code>\r\n<code>10 </code><code>TypeError</code><code>:</code> <code>carre</code><code>()</code> <code>takes</code> <code>exactly</code> <code>1</code> <code>argument</code> <code>(</code><code>0</code> <code>given</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Nous avons une erreur lorsqu&rsquo;on appelle la fonction <strong>carre()</strong> sans param&egrave;tre vu que la seconde fonction a &eacute;cras&eacute; la premi&egrave;re ainsi celle-ci n&rsquo;est plus disponible. Ce qui fait que pour appeler la nouvelle fonction, il va falloir forc&eacute;ment passer un argument.</p>\r\n\r\n<h4>Afficher une figure</h4>\r\n\r\n<p>Vous avez pu remarquer qu&rsquo;on pouvait afficher une figure en utilisant une cha&icirc;ne de caract&egrave;res d&eacute;limit&eacute;e par les triples guillemets :). Ce que vous mettrez entre les triples guillemets sera affich&eacute; tel quel.</p>\r\n\r\n<h4>5.2.7 L&rsquo;instruction return</h4>\r\n\r\n<p>Tr&egrave;s souvent une fonction ne sert pas uniquement &agrave; afficher quelque chose comme on l&rsquo;a fait jusque-l&agrave;. Une fonction peut &ecirc;tre en effet utilis&eacute;e pour retourner une valeur.</p>\r\n\r\n<p>Imaginez que vous vous rendez dans un McDonald et que vous commandez un Big Mac. Et en lieu et place de vous remettre votre Big Mac, vous voyez &agrave; votre grande surprise un message s&rsquo;afficher &agrave; l&rsquo;&eacute;cran: <strong>Vous venez de manger un Big Mac. Merci et &agrave; tr&egrave;s bient&ocirc;t :)</strong> (avec m&ecirc;me de petits jeux de lumi&egrave;re autour de l&rsquo;&eacute;cran).</p>\r\n\r\n<p>Serez-vous heureux? Bien s&ucirc;r que non :).</p>\r\n\r\n<p>C&rsquo;&eacute;tait juste une parenth&egrave;se. Ce que je veux dire, c&rsquo;est que tr&egrave;s souvent une fonction fera un travail et vous retournera une valeur. Pour ce faire, il faudra utiliser l&rsquo;instruction <strong>return</strong>.</p>\r\n\r\n<p>Un petit exemple pour boucler la boucle:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>def</code> <code>est_pair</code><code>(</code><code>nombre</code><code>):</code>\r\n<code>2 </code>    <code>&quot;&quot;&quot;Renvoie True si nombre est pair</code>\r\n<code>3 </code><code>    et False dans le cas contraire&quot;&quot;&quot;</code>\r\n<code>4 </code>\r\n<code>5 </code>    <code>if</code><code>(</code><code>nombre</code> <code>%</code> <code>2</code> <code>==</code> <code>0</code><code>):</code>\r\n<code>6 </code>        <code>return</code> <code>True</code>\r\n<code>7 </code>    <code>else</code><code>:</code>\r\n<code>8 </code>        <code>return</code> <code>False</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Le plus important ici pour moi, ce n&rsquo;est pas que vous puissiez comprendre ce que fait cette fonction <strong>est_pair</strong> mais tout simplement que vous puissiez remarquer que l&rsquo;on peut utiliser l&rsquo;instruction <strong>return</strong> afin de retourner une valeur. Nous en reparlerons dans le chapitre suivant lorsque nous parlerons des conditions.</p>\r\n\r\n<h4>5.2.8 Arguments nomm&eacute;s</h4>\r\n\r\n<p>Supposons que je souhaite cr&eacute;er une fonction <code>maximum</code> qui prend 2 param&egrave;tres <strong>nbre1</strong> et <strong>nbre2</strong> et retourne le maximum de ces deux nombres. Pour ce faire, on va utiliser la fonction native de python <strong>max</strong> qui retourne la valeur maximale d&rsquo;une s&eacute;quence de valeurs qui lui est pass&eacute;e en argument. Il existe &eacute;galement la fonction <strong>min</strong> qui fait tout simplement le contraire de ce que fait la fonction <strong>max</strong>. Elle retourne donc la valeur minimale d&rsquo;une s&eacute;quence de valeurs qui lui est pass&eacute;e en argument.</p>\r\n\r\n<p>Pour pimenter un peu les choses, on va &eacute;galement donner des valeurs par d&eacute;faut &agrave; <strong>nbre1</strong> et <strong>nbre2</strong>, respectivement 0 et 100.</p>\r\n\r\n<p>Notre fonction se pr&eacute;sente donc comme suit:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>def</code> <code>maximum</code><code>(</code><code>nbre1</code> <code>=</code> <code>0</code><code>,</code> <code>nbre2</code> <code>=</code> <code>100</code><code>):</code>\r\n<code>2 </code>    <code>return</code> <code>max</code><code>(</code><code>nbre1</code><code>,</code> <code>nbre2</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>On pourra donc appeler notre fonction comme suit:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>maximum</code><code>()</code> <code>#retournera 100</code>\r\n<code>2 </code><code>maximum</code><code>(</code><code>40</code><code>,</code> <code>300</code><code>)</code> <code>#Retournera 300</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Et si maintenant je veux uniquement pr&eacute;ciser la valeur de nbre2? Comment est-ce que je fais?</p>\r\n\r\n<p>En effet si je fais ceci</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>maximum</code><code>(</code><code>500</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Notre fonction va consid&eacute;rer <strong>500</strong> comme la valeur affect&eacute;e &agrave; nbre1 et nbre2 aura comme valeur <strong>100</strong> (la valeur par d&eacute;faut). Pour r&eacute;soudre ce probl&egrave;me, il faudra utiliser ce qu&rsquo;on appelle <strong>un argument nomm&eacute;</strong>. Ce sera tr&egrave;s simple, vous allez le voir. Qu&rsquo;est-ce que je veux? Pr&eacute;ciser uniquement la valeur de nbre2. Eh bien je n&rsquo;ai qu&rsquo;&agrave; le dire &agrave; ma fonction comme suit:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>maximum</code><code>(</code><code>nbre2</code> <code>=</code> <code>500</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Pour vous le prouver, modifions un tout petit peu notre fonction <strong>maximum</strong>:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>def</code> <code>maximum</code><code>(</code><code>nbre1</code> <code>=</code> <code>0</code><code>,</code> <code>nbre2</code> <code>=</code> <code>100</code><code>):</code>\r\n<code>2 </code>    <code>print</code><code>(</code><code>&quot;Nombre 1:&quot;</code><code>,</code> <code>nbre1</code><code>)</code>\r\n<code>3 </code>    <code>print</code><code>(</code><code>&quot;Nombre 2:&quot;</code><code>,</code> <code>nbre2</code><code>)</code>\r\n<code>4 </code>    \r\n<code>5 </code>    <code>return</code> <code>max</code><code>(</code><code>nbre1</code><code>,</code> <code>nbre2</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Lorsque vous utilisez la fonction <strong>print</strong> en s&eacute;parant les &eacute;l&eacute;ments par une virgule, elle se chargera d&rsquo;afficher vos &eacute;l&eacute;ments s&eacute;par&eacute;s par un espace. De plus aucun casting n&rsquo;est requis.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>print</code><code>(</code><code>&quot;Salut&quot;</code><code>,</code> <code>2</code><code>)</code> <code>#Aucune erreur! Affichera Salut 2</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Eh oui, vous pouvez me gronder pour vous avoir fatigu&eacute; pr&eacute;c&eacute;demment avec notre ami Yung 2 ;).</p>\r\n\r\n<p>Appelons &agrave; nouveau notre fonction avec un argument nomm&eacute;:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>maximum</code><code>(</code><code>500</code><code>)</code>\r\n<code>2 </code><code>Nombre</code> <code>1</code><code>:</code> <code>500</code>\r\n<code>3 </code><code>Nombre</code> <code>2</code><code>:</code> <code>100</code>\r\n<code>4 </code><code>500</code>\r\n<code>5 </code><code>&gt;&gt;&gt;</code> <code>maximum</code><code>(</code><code>nbre2</code> <code>=</code> <code>500</code><code>)</code>\r\n<code>6 </code><code>Nombre</code> <code>1</code><code>:</code> <code>0</code>\r\n<code>7 </code><code>Nombre</code> <code>2</code><code>:</code> <code>500</code>\r\n<code>8 </code><code>500</code>\r\n<code>9 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<h3>5.3 R&eacute;sum&eacute;</h3>\r\n\r\n<ul>\r\n	<li>Une fonction vous permet de regrouper un bloc d&rsquo;instructions que vous pourrez appeler comme vous le souhaitez et autant de fois que vous le souhaitez.</li>\r\n	<li>Les deux points <strong>&rdquo;:&rdquo;</strong> permettent de d&eacute;limiter un bloc d&rsquo;instructions en Python.</li>\r\n	<li>Les espaces sont tr&egrave;s tr&egrave;s importants en Python.</li>\r\n	<li>Nous avons deux grandes &eacute;tapes en ce qui concerne les fonctions, la d&eacute;finition de la fonction et l&rsquo;appel de la fonction.</li>\r\n	<li>Lorsqu&rsquo;on d&eacute;finit une fonction, les ingr&eacute;dients ajout&eacute;s entre parenth&egrave;ses sont appel&eacute;s param&egrave;tres. Par contre lors de l&rsquo;appel de la fonction, on parle plut&ocirc;t d&rsquo;arguments.</li>\r\n	<li>Une fonction peut &ecirc;tre en effet utilis&eacute;e pour retourner une valeur et en g&eacute;n&eacute;ral c&rsquo;est ce qui est fait.</li>\r\n	<li>En Python, une fonction peut avoir des param&egrave;tres avec des valeurs par d&eacute;faut.</li>\r\n	<li>Le casting ou transtypage consiste &agrave; convertir un objet d&rsquo;un type donn&eacute; en un autre.</li>\r\n	<li>La signature d&rsquo;une fonction en Python est tout simplement son nom.</li>\r\n	<li>En Python, on peut fournir &agrave; l&rsquo;appel d&rsquo;une fonction ce qu&rsquo;on appelle des arguments nomm&eacute;s.</li>\r\n</ul>\r\n\r\n<h2>6. les conditions et les boucles</h2>\r\n\r\n<h3>6.1 Les conditions</h3>\r\n\r\n<p>Jusque-l&agrave; nos programmes &eacute;taient tout du moins s&eacute;quentiels. Aucun suspense! Juste une s&eacute;rie de - Fais ceci, - Ensuite fais cela - Apr&egrave;s fais ceci&hellip;</p>\r\n\r\n<p>Mais dans la vie r&eacute;elle, les choses ne fonctionnent pas de cette mani&egrave;re. On souhaite faire quelque chose de diff&eacute;rent si une situation particuli&egrave;re se pr&eacute;sente.</p>\r\n\r\n<p>Vous souhaiterez par exemple faire une action pr&eacute;cise s&rsquo;il fait jour, une autre action s&rsquo;il fait nuit&hellip;.</p>\r\n\r\n<p>Comment faire alors pour r&eacute;soudre ce probl&egrave;me? Et bien, il nous faudra utiliser les conditions encore appel&eacute;es structures conditionnelles.</p>\r\n\r\n<h4>6.1.1 Les op&eacute;rateurs de comparaison</h4>\r\n\r\n<p>Je vous propose de d&eacute;couvrir dans un premier temps, les diff&eacute;rents op&eacute;rateurs de comparaison disponibles en Python.</p>\r\n\r\n<table>\r\n	<thead>\r\n		<tr>\r\n			<th>Op&eacute;rateurs</th>\r\n			<th>Signification</th>\r\n		</tr>\r\n	</thead>\r\n	<tbody>\r\n		<tr>\r\n			<td>==</td>\r\n			<td>&Eacute;gal &agrave;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt;</td>\r\n			<td>Strictement sup&eacute;rieur &agrave;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt;=</td>\r\n			<td>Sup&eacute;rieur ou &eacute;gal &agrave;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt;</td>\r\n			<td>Strictement inf&eacute;rieur &agrave;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt;=</td>\r\n			<td>Inf&eacute;rieur ou &eacute;gal &agrave;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>!=</td>\r\n			<td>Diff&eacute;rent de</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h4>Attention !</h4>\r\n\r\n<p>Il ne faut surtout pas confondre <strong>=</strong> et <strong>==</strong>. <strong>=</strong> repr&eacute;sente l&rsquo;op&eacute;rateur d&rsquo;affectation. <strong>==</strong> quant &agrave; lui, repr&eacute;sente l&rsquo;op&eacute;rateur d&rsquo;&eacute;galit&eacute;. Soyez donc vigilants car cela est parfois une source d&rsquo;erreur pour les d&eacute;butants.</p>\r\n\r\n<p>Il existe trois (3) formes de structures conditionnelles en Python:</p>\r\n\r\n<ul>\r\n	<li>La forme minimale <strong>if</strong></li>\r\n	<li>La forme moyenne en <strong>if - else</strong></li>\r\n	<li>La forme compl&egrave;te en <strong>if - elif - else</strong></li>\r\n</ul>\r\n\r\n<p>Mais bien avant de se lancer dans la description de chacune d&rsquo;elles, je vous propose dans un premier temps de d&eacute;couvrir ce que c&rsquo;est que le type bool&eacute;en &eacute;tant donn&eacute; que les conditions ne sont rien d&rsquo;autres que des <strong>bool&eacute;ens</strong>.</p>\r\n\r\n<h4>6.1.2 Le type bool&eacute;en</h4>\r\n\r\n<p>Un bool&eacute;en en programmation est un type de variable &agrave; deux &eacute;tats. Les variables de ce type sont ainsi soit &agrave; l&rsquo;&eacute;tat <strong>vrai</strong> ou soit &agrave; l&rsquo;&eacute;tat <strong>faux</strong> (en anglais on dira <strong>True</strong> ou <strong>False</strong>).</p>\r\n\r\n<p>Quelques exemples:</p>\r\n\r\n<ul>\r\n	<li>La lampe a deux &eacute;tats. Elle est soit allum&eacute;e ou soit &eacute;teinte.</li>\r\n	<li>La porte a deux &eacute;tats. Elle est soit ferm&eacute;e ou soit ouverte.</li>\r\n</ul>\r\n\r\n<p>En Python, les deux valeurs que peut prendre un bool&eacute;en sont <strong>True</strong> et <strong>False</strong>.</p>\r\n\r\n<h4>Attention !</h4>\r\n\r\n<p>Il faudrait remarquer que le <strong>T</strong> de <strong>True</strong> et le <strong>F</strong> de <strong>False</strong> sont en MAJUSCULE. Si vous l&rsquo;oubliez, attendez vous &agrave; avoir droit &agrave; une belle erreur.</p>\r\n\r\n<p>Voil&agrave; c&rsquo;est tout ce que vous devez savoir sur les bool&eacute;ens. Assez rapide n&rsquo;est-ce pas?</p>\r\n\r\n<h4>6.1.3 La forme minimale if</h4>\r\n\r\n<p>La forme la plus simple de structures conditionnelles est la forme minimale <strong>if</strong>.</p>\r\n\r\n<p>La syntaxe est la suivante:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>if</code><code>(</code><code>condition</code><code>):</code>\r\n<code>2 </code>    <code>instruction</code>\r\n<code>3 </code>    <code>...</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Exemple:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>nombre_de_mains</code> <code>=</code> <code>2</code>\r\n<code>2 </code>\r\n<code>3 </code><code>if</code><code>(</code><code>nombre_de_mains</code> <code>==</code> <code>2</code><code>):</code>\r\n<code>4 </code>    <code>print</code><code>(</code><code>&quot;Vous &ecirc;tes un humain&quot;</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Les parenth&egrave;ses entourant la condition sont facultatives mais je vous conseille de toujours les mettre afin d&rsquo;avoir un code lisible.</p>\r\n\r\n<p>L&rsquo;exemple pr&eacute;sent&eacute; plus haut est assez simple &agrave; comprendre.</p>\r\n\r\n<ul>\r\n	<li>Nous affectons la valeur 2 &agrave; la variable nombre_de_mains.</li>\r\n	<li>Ensuite, nous faisons un petit test: si la valeur contenue dans la variable nombre_de_mains est &eacute;gale &agrave; 2 alors nous affichons <strong>Vous &ecirc;tes un humain</strong>. Dans le cas contraire nous ne faisons rien.</li>\r\n</ul>\r\n\r\n<p>Etant donn&eacute; que la variable <em>nombre_de_mains</em> est bel et bien &eacute;gale &agrave; 2, alors on verra afficher <strong>Vous &ecirc;tes un humain</strong>. Ce que vous devez comprendre, c&rsquo;est que la condition est premi&egrave;rement &eacute;valu&eacute;e et une valeur bool&eacute;enne est obtenu. Soit donc True ou False. Si nous avons True avec le bloc d&rsquo;instructions contenu dans le if sera ex&eacute;cut&eacute;. Dans le cas contraire le programme continuera comme si de rien n&rsquo;&eacute;tait.</p>\r\n\r\n<p>L&rsquo;exemple suivant affichera <strong>Coucou les amis</strong>. Remarquez que l&rsquo;instruction <code>print(&quot;Coucou les amis&quot;)</code> ne fait pas partie du bloc d&rsquo;instructions (Pas d&rsquo;indentation).</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>nombre_de_mains</code> <code>=</code> <code>3</code>\r\n<code>2 </code>\r\n<code>3 </code><code>if</code><code>(</code><code>nombre_de_mains</code> <code>==</code> <code>2</code><code>):</code>\r\n<code>4 </code>    <code>print</code><code>(</code><code>&quot;Vous &ecirc;tes un humain&quot;</code><code>)</code>\r\n<code>5 </code>\r\n<code>6 </code><code>print</code><code>(</code><code>&quot;Coucou les amis&quot;</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<h4>6.1.4 La forme moyenne if - else</h4>\r\n\r\n<p>Avec la forme minimale, comme vous l&rsquo;avez s&ucirc;rement remarqu&eacute;, il n&rsquo;&eacute;tait pas possible de faire une autre action dans le cas o&ugrave; la condition &eacute;tait &eacute;valu&eacute;e &agrave; <strong>False</strong>. C&rsquo;est tout simplement, ce que vient corriger la forme <strong>if - else</strong>.</p>\r\n\r\n<p>La syntaxe est la suivante:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>if</code><code>(</code><code>condition</code><code>):</code>\r\n<code>2 </code>    <code>instruction</code>\r\n<code>3 </code>    <code>...</code>\r\n<code>4 </code><code>else</code><code>:</code>\r\n<code>5 </code>    <code>instruction</code>\r\n<code>6 </code>    <code>...</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Exemple:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>nombre_de_mains</code> <code>=</code> <code>3</code>\r\n<code>2 </code>\r\n<code>3 </code><code>if</code><code>(</code><code>nombre_de_mains</code> <code>==</code> <code>2</code><code>):</code>\r\n<code>4 </code>    <code>print</code><code>(</code><code>&quot;Vous &ecirc;tes un humain&quot;</code><code>)</code>\r\n<code>5 </code><code>else</code><code>:</code>\r\n<code>6 </code>    <code>print</code><code>(</code><code>&quot;Peut &ecirc;tre bien un animal :)&quot;</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Dans le cas o&ugrave; la condition est &eacute;valu&eacute;e &agrave; True, le bloc du if sera ex&eacute;cut&eacute;. Dans le cas contraire ce sera celui du else qui sera ex&eacute;cut&eacute;.</p>\r\n\r\n<p>On verra donc afficher <strong>Peut &ecirc;tre bien un animal :)</strong>.</p>\r\n\r\n<h4>6.1.5 La forme compl&egrave;te if - elif - else</h4>\r\n\r\n<p>Il peut arriver que nous ayons plus d&rsquo;une condition &agrave; &eacute;valuer. Dans ce cas, nous pouvons utiliser la forme compl&egrave;te if - elif - else.</p>\r\n\r\n<p>La syntaxe est la suivante:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>if</code><code>(</code><code>condition</code><code>):</code>\r\n<code> 2 </code>    <code>instruction</code>\r\n<code> 3 </code>    <code>...</code>\r\n<code> 4 </code><code>elif</code><code>(</code><code>condition</code><code>):</code>\r\n<code> 5 </code>     <code>instruction</code>\r\n<code> 6 </code>    <code>...</code>\r\n<code> 7 </code><code>elif</code><code>(</code><code>condition</code><code>):</code>\r\n<code> 8 </code>     <code>instruction</code>\r\n<code> 9 </code>    <code>...</code>\r\n<code>10 </code><code>else</code><code>:</code>\r\n<code>11 </code>    <code>instruction</code>\r\n<code>12 </code>    <code>...</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Exemple:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>note</code> <code>=</code> <code>12</code>\r\n<code> 2 </code>\r\n<code> 3 </code><code>if</code><code>(</code><code>note</code> <code>&gt;</code> <code>18</code><code>):</code>\r\n<code> 4 </code>    <code>print</code><code>(</code><code>&quot;Vous &ecirc;tes excellent.&quot;</code><code>)</code>\r\n<code> 5 </code><code>elif</code><code>(</code><code>note</code> <code>&gt;</code> <code>15</code><code>):</code>\r\n<code> 6 </code>    <code>print</code><code>(</code><code>&quot;Tr&egrave;s bien.&quot;</code><code>)</code>\r\n<code> 7 </code><code>elif</code><code>(</code><code>note</code> <code>&gt;</code> <code>10</code><code>):</code>\r\n<code> 8 </code>    <code>print</code><code>(</code><code>&quot;Pas mal.&quot;</code><code>)</code>\r\n<code> 9 </code><code>else</code><code>:</code>\r\n<code>10 </code>    <code>print</code><code>(</code><code>&quot;Quel nullard :).&quot;</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p><strong>elif</strong> est la contraction de <strong>else if</strong> qui signifie <em>sinon si</em>.</p>\r\n\r\n<p>Ainsi si l&rsquo;on devait traduire notre programme en fran&ccedil;ais on aurait eu ceci:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>note</code> <code>=</code> <code>12</code>\r\n<code> 2 </code>\r\n<code> 3 </code><code>si</code><code>(</code><code>note</code> <code>&gt;</code> <code>18</code><code>):</code>\r\n<code> 4 </code>    <code>print</code><code>(</code><code>&quot;Vous &ecirc;tes excellent.&quot;</code><code>)</code>\r\n<code> 5 </code><code>sinon</code> <code>si</code><code>(</code><code>note</code> <code>&gt;</code> <code>15</code><code>):</code>\r\n<code> 6 </code>    <code>print</code><code>(</code><code>&quot;Tr&egrave;s bien.&quot;</code><code>)</code>\r\n<code> 7 </code><code>sinon</code> <code>si</code><code>(</code><code>note</code> <code>&gt;</code> <code>10</code><code>):</code>\r\n<code> 8 </code>    <code>print</code><code>(</code><code>&quot;Pas mal.&quot;</code><code>)</code>\r\n<code> 9 </code><code>sinon</code><code>:</code>\r\n<code>10 </code>    <code>print</code><code>(</code><code>&quot;Quel nullard :).&quot;</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Vu que la note est &eacute;gale &agrave; 12, alors on verra afficher <strong>Pas mal.</strong></p>\r\n\r\n<h4>6.1.6 L&rsquo;indentation</h4>\r\n\r\n<p>Je sais qu&rsquo;on en a d&eacute;j&agrave; parl&eacute;, mais je pr&eacute;f&egrave;re en reparler pour &ecirc;tre s&ucirc;r que vous l&rsquo;avez bien compris.</p>\r\n\r\n<ul>\r\n	<li>L&rsquo;indentation est indispensable en Python, sinon vous aurez droit &agrave; une erreur.</li>\r\n	<li>Cela n&rsquo;est pas le cas par exemple pour d&rsquo;autres langages de programmation comme le C ou le JAVA, qui utilisent un marqueur de fin d&rsquo;instruction &ldquo;<strong>;</strong>&rdquo; et des d&eacute;limiteurs de bloc d&rsquo;instructions <strong>{}</strong>.</li>\r\n</ul>\r\n\r\n<p>Tout compte fait, indenter son code reste une bonne habitude car cela permet de rendre son code lisible et compr&eacute;hensible sans trop de difficult&eacute;s.</p>\r\n\r\n<h4>6.1.7 Parit&eacute; d&rsquo;un nombre</h4>\r\n\r\n<p>Vous &ecirc;tes maintenant en mesure de comprendre le programme qu&rsquo;on avait utilis&eacute; dans le chapitre pr&eacute;c&eacute;dent portant sur les fonctions.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>def</code> <code>est_pair</code><code>(</code><code>nombre</code><code>):</code>\r\n<code>2 </code>    <code>&quot;&quot;&quot;Renvoie True si nombre est pair</code>\r\n<code>3 </code><code>    et False dans le cas contraire&quot;&quot;&quot;</code>\r\n<code>4 </code>\r\n<code>5 </code>    <code>if</code><code>(</code><code>nombre</code> <code>%</code> <code>2</code> <code>==</code> <code>0</code><code>):</code>\r\n<code>6 </code>        <code>return</code> <code>True</code>\r\n<code>7 </code>    <code>else</code><code>:</code>\r\n<code>8 </code>        <code>return</code> <code>False</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Ce programme utilise donc la forme moyenne if-else. En grosso modo, on demande &agrave; retourner le bool&eacute;en <strong>True</strong> si le nombre pass&eacute; en argument est divisible par 2 (ce qui signifiera qu&rsquo;il est pair) et dans le cas contraire <strong>False</strong> pour signifier qu&rsquo;il est impair.</p>\r\n\r\n<p>Une chose que vous devez &eacute;galement savoir c&rsquo;est que d&egrave;s que l&rsquo;interpr&eacute;teur ex&eacute;cute l&rsquo;instruction <strong>return</strong>, tout ce qui vient apr&egrave;s ne sera pas ex&eacute;cut&eacute;.</p>\r\n\r\n<p>Ainsi dans l&rsquo;exemple qui suit, <strong>Je suis cool</strong> ne sera donc pas affich&eacute;, seule la cha&icirc;ne <strong>Je serai affich&eacute;e</strong> sera affich&eacute;e. Tachez de vous en souvenir.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>def</code> <code>petit_test</code><code>():</code>\r\n<code>2 </code>  <code>print</code><code>(</code><code>&quot;Je serai affich&eacute;e&quot;</code><code>)</code>\r\n<code>3 </code>  <code>return</code> <code>True</code>\r\n<code>4 </code>  <code>print</code><code>(</code><code>&quot;Je suis cool&quot;</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<h4>6.1.8 Les op&eacute;rateurs logiques</h4>\r\n\r\n<p>Tr&egrave;s souvent l&rsquo;on ait amen&eacute; &agrave; tester plus d&rsquo;une condition. Dans ce cas, on se sert des op&eacute;rateurs logiques. Ces op&eacute;rateurs logiques sont les suivants:</p>\r\n\r\n<ul>\r\n	<li>Le <strong>OU</strong> logique ou <strong>or</strong> en anglais</li>\r\n	<li>Le <strong>ET</strong> logique ou <strong>and</strong> en anglais</li>\r\n	<li>Le <strong>NON</strong> logique ou <strong>not</strong> en anglais</li>\r\n</ul>\r\n\r\n<h5>Le OU logique</h5>\r\n\r\n<p>L&rsquo;op&eacute;rateur <em>or ou OU logique</em> vous renvoie True si l&rsquo;une des conditions est vraie. Prenons un exemple simple. Pour &ecirc;tre le major de sa promotion, il faut soit faire assez d&rsquo;exercices <strong>ou</strong> bien suivre les explications du professeur en classe.</p>\r\n\r\n<p>A cause de l&rsquo;utilisation du OU logique, notre &eacute;tudiant sera major de sa promotion si l&rsquo;une des conditions est vraie. Soit il fait donc beaucoup d&rsquo;exercices, soit il suit bien en classe.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>a</code><code>,</code> <code>b</code> <code>=</code> <code>4</code><code>,</code> <code>5</code> <code>#a recoit 4 et b recoit 5. Assez cool non :)?</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>a</code> <code>==</code> <code>4</code> <code>or</code> <code>b</code> <code>==</code> <code>9</code> <code>#Vu que l&#39;une des conditions est vraie on a donc True</code>\r\n<code>3 </code><code>True</code>\r\n<code>4 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<h5>Le ET logique</h5>\r\n\r\n<p>L&rsquo;op&eacute;rateur <em>and ou ET logique</em> vous renvoie True si toutes les conditions sont vraies. Prenons encore le m&ecirc;me exemple que pr&eacute;c&eacute;demment. Pour &ecirc;tre le major de sa promotion, il faut faire assez d&rsquo;exercices <strong>et</strong> bien suivre les explications du professeur en classe.</p>\r\n\r\n<p>A cause de l&rsquo;utilisation du ET logique, cette fois-ci notre &eacute;tudiant sera major de sa promotion s&rsquo;il fait donc non seulement beaucoup d&rsquo;exercices mais &eacute;galement s&rsquo;il suit bien en classe.</p>\r\n\r\n<p>Il faut donc que nos deux conditions soient v&eacute;rifi&eacute;es pour qu&rsquo;on ait True.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>a</code><code>,</code> <code>b</code><code>,</code> <code>c</code> <code>=</code> <code>4</code><code>,</code> <code>5</code><code>,</code> <code>9</code> <code>#a recoit 4 et b recoit 5, c recoit 9.</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>a</code> <code>==</code> <code>4</code> <code>and</code> <code>b</code> <code>==</code> <code>5</code> <code>and</code> <code>c</code> <code>==</code> <code>6</code> <code>#Vu que la derni&egrave;re condition est fausse on a d\\</code>\r\n<code>3 </code><code>onc</code> <code>False</code>\r\n<code>4 </code><code>False</code>\r\n<code>5 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<h5>Le NON logique</h5>\r\n\r\n<p>C&rsquo;est l&rsquo;op&eacute;rateur logique le plus simple &agrave; mon avis. En effet, il vous retourne True si vous lui donnez False et False si vous lui donner True.</p>\r\n\r\n<p>Voyons cela en pratique:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>est_malade</code> <code>=</code> <code>True</code>\r\n<code>2 </code>\r\n<code>3 </code><code>if</code><code>(</code><code>not</code> <code>est_malade</code><code>):</code>\r\n<code>4 </code>    <code>print</code><code>(</code><code>&quot;Vous n&rsquo;&ecirc;tes pas malade.&quot;</code><code>)</code>\r\n<code>5 </code><code>else</code><code>:</code>\r\n<code>6 </code>    <code>print</code><code>(</code><code>&quot;Vous &ecirc;tes malade!&quot;</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>La variable <code>est_malade</code> vaut au d&eacute;part True. Le fameux <code>not est_malade</code> retournera le contraire de True, ce qui revient &agrave; dire False. La condition sera donc &eacute;valu&eacute;e &agrave; False. Le bloc else sera ainsi ex&eacute;cut&eacute; et <strong>Vous &ecirc;tes malade</strong> sera affich&eacute;.</p>\r\n\r\n<p>Cela peut sembler ambigu j&rsquo;avoue :).</p>\r\n\r\n<h3>6.2 Les it&eacute;rations ou boucles</h3>\r\n\r\n<p>Les boucles permettent de r&eacute;p&eacute;ter un certain nombre de fois des instructions de votre programme. Pour &ecirc;tre sinc&egrave;re avec vous, on ne peut se passer des boucles lors de l&rsquo;&eacute;criture de vrais programmes. Prenons un exemple tout simple. Supposons que vous souhaitez afficher tous les nombres de 0 &agrave; 100. Une solution possible serait la suivante:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>print</code><code>(</code><code>0</code><code>)</code>\r\n<code>2 </code><code>print</code><code>(</code><code>1</code><code>)</code>\r\n<code>3 </code><code>print</code><code>(</code><code>2</code><code>)</code>\r\n<code>4 </code><code>print</code><code>(</code><code>3</code><code>)</code>\r\n<code>5 </code><code>...</code>\r\n<code>6 </code><code>#Bonne chance</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Comme vous pouvez le voir, il serait vraiment fastidieux de proc&eacute;der de la sorte. Heureusement les boucles sont l&agrave; pour nous sauver la vie! En Python il existe uniquement 2 structures it&eacute;ratives ou boucles:</p>\r\n\r\n<ul>\r\n	<li>la boucle <strong>while</strong></li>\r\n	<li>la boucle <strong>for</strong></li>\r\n</ul>\r\n\r\n<h4>6.2.1 La boucle while</h4>\r\n\r\n<p>La boucle <strong>while</strong> permet de r&eacute;p&eacute;ter un bloc d&rsquo;instructions tant qu&rsquo;une condition est vraie (<strong>while</strong> signifie <strong>tant que</strong> en anglais).</p>\r\n\r\n<p>Sa syntaxe est la suivante:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>while</code><code>(</code><code>condition</code><code>):</code>\r\n<code>2 </code>    <code>instruction</code>\r\n<code>3 </code>    <code>...</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Ainsi pour afficher tous les nombres de 0 &agrave; 100 on &eacute;crira:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>i</code> <code>=</code> <code>0</code> <code>#On commence a z&eacute;ro</code>\r\n<code>2 </code>\r\n<code>3 </code><code>#Tant qu&#39;on a pas encore atteint 100, on continue</code>\r\n<code>4 </code><code>while</code><code>(</code><code>i</code> <code>&lt;=</code> <code>100</code><code>):</code>\r\n<code>5 </code>    <code>print</code><code>(</code><code>i</code><code>)</code>\r\n<code>6 </code>    <code>i</code> <code>=</code> <code>i</code> <code>+</code> <code>1</code> <code>#On ajoute &agrave; chaque fois 1 &agrave; la valeur de i</code>\r\n</pre>\r\n</div>\r\n\r\n<p>La derni&egrave;re instruction de notre programme est ce qu&rsquo;on appelle <strong>l&rsquo;incr&eacute;mentation</strong>. En d&rsquo;autres termes incr&eacute;menter une valeur, c&rsquo;est tout simplement ajouter 1 &agrave; cette valeur.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>i</code> <code>=</code> <code>i</code> <code>+</code> <code>1</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Etant donn&eacute; que cette op&eacute;ration est tr&egrave;s courante, il existe un petit raccourci en python.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>i</code> <code>+=</code> <code>1</code>\r\n</pre>\r\n</div>\r\n\r\n<p>De m&ecirc;me, nous avons la d&eacute;cr&eacute;mentation qui elle consiste &agrave; &hellip;. retirer 1 &agrave; la valeur concern&eacute;e.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>i</code> <code>=</code> <code>10</code>\r\n<code>2 </code><code>i</code> <code>=</code> <code>i</code> <code>-</code> <code>1</code> <code># i vaut 10 - 1 = 9</code>\r\n<code>3 </code><code>i</code> <code>-=</code> <code>1</code> <code>#i vaut 9 - 1 = 8</code>\r\n<code>4 </code><code>print</code><code>(</code><code>i</code><code>)</code> <code>#Affiche 8</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Le principe reste le m&ecirc;me pour la multiplication, la division et le modulo.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>i</code> <code>=</code> <code>10</code>\r\n<code>2 </code><code>i</code> <code>*=</code> <code>3</code> <code>#i vaut 10 * 3 = 30</code>\r\n<code>3 </code><code>i</code> <code>/=</code> <code>15</code> <code>#i vaut 30 / 15 = 2</code>\r\n<code>4 </code><code>i</code> <code>%=</code> <code>2</code> <code>#i vaut 2 % 2 = 0</code>\r\n<code>5 </code><code>print</code><code>(</code><code>i</code><code>)</code> <code>#Affiche 0</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Ainsi notre programme pr&eacute;c&eacute;dent pouvait &eacute;galement &ecirc;tre &eacute;crit comme suit:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>i</code> <code>=</code> <code>0</code>\r\n<code>2 </code>\r\n<code>3 </code><code>while</code><code>(</code><code>i</code> <code>&lt;=</code> <code>100</code><code>):</code>\r\n<code>4 </code>    <code>print</code><code>(</code><code>i</code><code>)</code>\r\n<code>5 </code>    <code>i</code> <code>+=</code> <code>1</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Notons que sans l&rsquo;incr&eacute;mentation de la valeur de la variable <code>i</code> &agrave; chaque tour de boucle, nous aurons eu droit tout simplement &agrave; une boucle infinie. Une boucle infinie est une boucle qui ne se termine jamais. On a rarement besoin d&rsquo;une boucle qui ne s&rsquo;arr&ecirc;te jamais, &agrave; moins que vous souhaitez faire planter votre ordinateur. Ainsi lorsque vous &eacute;crivez vos boucles, assurez vous que ces derni&egrave;res prendront fin &agrave; un moment donn&eacute;. Be careful !!</p>\r\n\r\n<h4>6.2.2 La boucle for</h4>\r\n\r\n<p>La boucle <strong>for</strong> travaille sur des s&eacute;quences. Elle est en fait sp&eacute;cialis&eacute;e dans le parcours d&rsquo;une s&eacute;quence de plusieurs donn&eacute;es (<strong>for</strong> signifie <strong>pour</strong> en anglais).</p>\r\n\r\n<p>Sa syntaxe est la suivante:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>for</code> <code>element</code> <code>in</code> <code>sequence</code><code>:</code>\r\n<code>2 </code>    <code>instruction</code>\r\n<code>3 </code>    <code>...</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Vu qu&rsquo;une image vaut mieux que mille mots, voyons quelques exemples:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>nom</code> <code>=</code> <code>&quot;Honore&quot;</code>\r\n<code>2 </code><code>for</code> <code>lettre</code> <code>in</code> <code>nom</code><code>:</code>\r\n<code>3 </code>   <code>print</code><code>(</code><code>lettre</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Affichera:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code>\r\n<code>2 </code><code>H</code>\r\n<code>3 </code><code>o</code>\r\n<code>4 </code><code>n</code>\r\n<code>5 </code><code>o</code>\r\n<code>6 </code><code>r</code>\r\n<code>7 </code><code>e</code>\r\n<code>8 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Une cha&icirc;ne de caract&egrave;res est compos&eacute;e d&rsquo;une s&eacute;quence de caract&egrave;res. Ainsi, dans notre cas on demande &agrave; afficher chaque &eacute;l&eacute;ment de cette s&eacute;quence, ce qui revient &agrave; afficher l&rsquo;ensemble des caract&egrave;res les uns apr&egrave;s les autres.</p>\r\n\r\n<p>Par d&eacute;faut, la fonction <strong>print</strong> apr&egrave;s avoir affich&eacute; votre message met le curseur automatiquement &agrave; la ligne suivante. Si vous ne souhaitez pas avoir cet effet, vous pouvez tout simplement &eacute;crire:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>print</code><code>(</code><code>&#39;Toto&#39;</code><code>,</code> <code>end</code><code>=</code><code>&quot;&quot;</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Ainsi apr&egrave;s avoir affiche <strong>Toto</strong>, le curseur restera sur la m&ecirc;me ligne.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>print</code><code>(</code><code>&quot;Mes langages pr&eacute;f&eacute;r&eacute;s sont &quot;</code><code>,</code> <code>end</code><code>=</code><code>&quot;&quot;</code><code>)</code>\r\n<code>2 </code><code>print</code><code>(</code><code>&quot;le langage C&quot;</code><code>,</code> <code>end</code><code>=</code><code>&quot;, &quot;</code><code>)</code>\r\n<code>3 </code><code>print</code><code>(</code><code>&quot;le langage Java&quot;</code><code>,</code>  <code>end</code><code>=</code><code>&quot; &quot;</code><code>)</code>\r\n<code>4 </code><code>print</code><code>(</code><code>&quot;et le sublime Python :)&quot;</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>On aura comme r&eacute;sultat:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>Mes</code> <code>langages</code> <code>pr</code><code>&eacute;</code><code>f</code><code>&eacute;</code><code>r</code><code>&eacute;</code><code>s</code> <code>sont</code> <code>le</code> <code>langage</code> <code>C</code><code>,</code> <code>le</code> <code>langage</code> <code>Java</code> <code>et</code> <code>le</code> <code>sublime</code> <code>Python</code> <code>:)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Comme vous pouvez le voir avec le param&egrave;tre <strong>end</strong> on peut pr&eacute;ciser n&rsquo;importe lequel des s&eacute;parateurs que nous souhaitons. En gros le param&egrave;tre <strong>end</strong> permet de dire apr&egrave;s avoir affich&eacute; ma ligne mets ceci (le s&eacute;parateur que vous aurez choisi) &agrave; la suite.</p>\r\n\r\n<p>Voyons un deuxi&egrave;me exemple avant de cl&ocirc;turer ce chapitre.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>#Affiche tous les nombres de 0 a 100</code>\r\n<code>2 </code><code>for</code> <code>i</code> <code>in</code> <code>range</code><code>(</code><code>0</code><code>,</code> <code>101</code><code>):</code>\r\n<code>3 </code>    <code>print</code><code>(</code><code>i</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<h5>La fonction range</h5>\r\n\r\n<p><strong>Synopsis: range([d&eacute;but,] fin[, pas])</strong></p>\r\n\r\n<ul>\r\n	<li>La fonction range() permet de retourner une s&eacute;quence virtuelle de nombres de <strong>d&eacute;but</strong> &agrave; <strong>fin</strong> par pas de <strong>pas</strong>.</li>\r\n	<li>Le d&eacute;but et le pas par d&eacute;faut sont respectivement 0 et 1. Les &eacute;l&eacute;ments entre crochets sont dits optionnels.</li>\r\n	<li>Le premier param&egrave;tre est inclus, le second quant &agrave; lui est exclus.</li>\r\n</ul>\r\n\r\n<p>Exemple:</p>\r\n\r\n<ul>\r\n	<li>range(15) retourne une s&eacute;quence virtuelle de nombres de 0 &agrave; 15 (15 &eacute;tant exclus): 0,1,2,3,&hellip;,14</li>\r\n	<li>range(1,15) retourne une s&eacute;quence virtuelle de nombres de 1 &agrave; 15 (15 &eacute;tant exclus): 1,2,3,4&hellip;,14.</li>\r\n	<li>range(0,15,2) retourne une s&eacute;quence virtuelle de nombres de 0 &agrave; 15 (15 &eacute;tant exclus) par pas de 2 &rArr; c&rsquo;est-&agrave;-dire les nombres pairs compris entre 0 et 15: 0,2,4,6,8,10,12,14.</li>\r\n</ul>\r\n\r\n<p>Amusez-vous &agrave; faire quelques tests afin de v&eacute;rifier que vous avez bien compris le principe de fonctionnement de cette fonction <strong>range</strong>. Croyez-moi, vous allez l&rsquo;utiliser un bon nombre de fois.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>list</code><code>(</code><code>range</code><code>(</code><code>15</code><code>))</code>\r\n<code>2 </code><code>[</code><code>0</code><code>,</code> <code>1</code><code>,</code> <code>2</code><code>,</code> <code>3</code><code>,</code> <code>4</code><code>,</code> <code>5</code><code>,</code> <code>6</code><code>,</code> <code>7</code><code>,</code> <code>8</code><code>,</code> <code>9</code><code>,</code> <code>10</code><code>,</code> <code>11</code><code>,</code> <code>12</code><code>,</code> <code>13</code><code>,</code> <code>14</code><code>]</code>\r\n<code>3 </code><code>&gt;&gt;&gt;</code> <code>list</code><code>(</code><code>range</code><code>(</code><code>1</code><code>,</code><code>15</code><code>))</code>\r\n<code>4 </code><code>[</code><code>1</code><code>,</code> <code>2</code><code>,</code> <code>3</code><code>,</code> <code>4</code><code>,</code> <code>5</code><code>,</code> <code>6</code><code>,</code> <code>7</code><code>,</code> <code>8</code><code>,</code> <code>9</code><code>,</code> <code>10</code><code>,</code> <code>11</code><code>,</code> <code>12</code><code>,</code> <code>13</code><code>,</code> <code>14</code><code>]</code>\r\n<code>5 </code><code>&gt;&gt;&gt;</code> <code>list</code><code>(</code><code>range</code><code>(</code><code>0</code><code>,</code><code>15</code><code>,</code><code>2</code><code>))</code>\r\n<code>6 </code><code>[</code><code>0</code><code>,</code> <code>2</code><code>,</code> <code>4</code><code>,</code> <code>6</code><code>,</code> <code>8</code><code>,</code> <code>10</code><code>,</code> <code>12</code><code>,</code> <code>14</code><code>]</code>\r\n<code>7 </code><code>&gt;&gt;&gt;</code> \r\n</pre>\r\n</div>\r\n\r\n<p>Ne vous int&eacute;ressez pas &agrave; l&rsquo;utilit&eacute; de la fonction <code>list</code> pour le moment, mais ici vous avez besoin de la mettre sinon vous ne verrez rien de concret. C&rsquo;est pour cette raison qu&rsquo;on parle de s&eacute;quence virtuelle.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>range</code><code>(</code><code>15</code><code>)</code>\r\n<code>2 </code><code>range</code><code>(</code><code>0</code><code>,</code> <code>15</code><code>)</code>\r\n<code>3 </code><code>&gt;&gt;&gt;</code> \r\n</pre>\r\n</div>\r\n\r\n<h5>Le mot-cl&eacute; in</h5>\r\n\r\n<p>Le mot-cl&eacute; <strong>in</strong> peut &ecirc;tre utilis&eacute; ailleurs que dans une boucle for.</p>\r\n\r\n<p>En voici une illustration:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code>    <code>chaine</code><code>=</code> <code>&quot;Hello World&quot;</code>\r\n<code>2 </code>    <code>for</code> <code>letter</code> <code>in</code> <code>chaine</code><code>:</code>\r\n<code>3 </code>        <code>if</code> <code>letter</code> <code>in</code> <code>&quot;aeiouyAEIOUY&quot;</code><code>:</code>\r\n<code>4 </code>            <code>print</code><code>(</code><code>letter</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Ce programme n&rsquo;affichera que les voyelles contenues dans la variable <strong>chaine</strong>.</p>\r\n\r\n<h4>6.2.3 Les mots cl&eacute;s break et continue</h4>\r\n\r\n<p>Le mot-cl&eacute; <strong>break</strong> permet d&rsquo;arr&ecirc;ter la boucle appelante.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>for</code> <code>i</code> <code>in</code> <code>range</code><code>(</code><code>0</code><code>,</code> <code>15</code><code>):</code>\r\n<code>2 </code>    <code>if</code><code>(</code><code>i</code> <code>==</code> <code>2</code><code>):</code>\r\n<code>3 </code>        <code>break</code>\r\n<code>4 </code>    <code>print</code><code>(</code><code>i</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Ce programme affichera seulement 0, 1 &eacute;tant donn&eacute; que lorsque i vaudra 2 la boucle s&rsquo;arr&ecirc;tera automatiquement &agrave; cause du fameux break.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>for</code> <code>i</code> <code>in</code> <code>range</code><code>(</code><code>0</code><code>,</code> <code>15</code><code>):</code>\r\n<code>2 </code>    <code>for</code> <code>j</code> <code>in</code> <code>range</code><code>(</code><code>10</code><code>,</code> <code>20</code><code>):</code>\r\n<code>3 </code>        <code>print</code><code>(</code><code>i</code><code>,</code> <code>j</code><code>)</code>\r\n<code>4 </code>        <code>break</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Ce programme affichera:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>&gt;&gt;&gt;</code>\r\n<code> 2 </code><code>0</code> <code>10</code>\r\n<code> 3 </code><code>1</code> <code>10</code>\r\n<code> 4 </code><code>2</code> <code>10</code>\r\n<code> 5 </code><code>3</code> <code>10</code>\r\n<code> 6 </code><code>4</code> <code>10</code>\r\n<code> 7 </code><code>5</code> <code>10</code>\r\n<code> 8 </code><code>6</code> <code>10</code>\r\n<code> 9 </code><code>7</code> <code>10</code>\r\n<code>10 </code><code>8</code> <code>10</code>\r\n<code>11 </code><code>9</code> <code>10</code>\r\n<code>12 </code><code>10</code> <code>10</code>\r\n<code>13 </code><code>11</code> <code>10</code>\r\n<code>14 </code><code>12</code> <code>10</code>\r\n<code>15 </code><code>13</code> <code>10</code>\r\n<code>16 </code><code>14</code> <code>10</code>\r\n<code>17 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Rappelez-vous, j&rsquo;ai dit que le <strong>break</strong> arr&ecirc;tait la boucle appelante et non toutes les boucles. Ainsi notre fameux <code>break</code> arr&ecirc;tera simplement la seconde boucle.</p>\r\n\r\n<p>Voyons en d&eacute;tails ce qui passe pour que tout soit clair:</p>\r\n\r\n<ul>\r\n	<li>Lors du premier tour de boucle <strong>i</strong> vaudra 0. On rentre ensuite dans la seconde boucle <strong>j</strong> vaut 10. Ainsi on affiche <strong>0 10</strong>. Ensuite on rencontre le <strong>break</strong>, ce qui fait que le <strong>j</strong> ne passera pas &agrave; 11. On sort donc de la seconde boucle et on retourne &agrave; la premi&egrave;re boucle.</li>\r\n	<li>A pr&eacute;sent <strong>i</strong> vaut 1, on rentre dans la seconde boucle <strong>j</strong> vaut 10. Ainsi on affiche <strong>1 10</strong>. Ensuite on rencontre le <strong>break</strong>, ce qui fait que le <strong>j</strong> ne passera pas &eacute;galement &agrave; 11. On sort donc de la seconde boucle et retourne &agrave; la premi&egrave;re boucle.</li>\r\n	<li>Le <strong>i</strong> vaut maintenant 2 et ainsi de suite&hellip;</li>\r\n</ul>\r\n\r\n<p>Le mot-cl&eacute; <strong>continue</strong> permet de passer simplement au prochain tour de boucle.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>#Affiche les nombres pairs de 0 &agrave; 15</code>\r\n<code>2 </code><code>for</code> <code>i</code> <code>in</code> <code>range</code><code>(</code><code>0</code><code>,</code> <code>15</code><code>):</code>\r\n<code>3 </code>    <code>if</code><code>(</code><code>i</code> <code>%</code> <code>2</code> <code>!=</code> <code>0</code><code>):</code>\r\n<code>4 </code>        <code>continue</code>\r\n<code>5 </code>    <code>print</code><code>(</code><code>i</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Le mot-cl&eacute; continue comme on vient de le voir n&rsquo;arr&ecirc;te pas la boucle mais permet de passer simplement au prochain tour de boucle.</p>\r\n\r\n<h3>6.3 R&eacute;sum&eacute;</h3>\r\n\r\n<p>Dans ce chapitre, nous avons appris que :</p>\r\n\r\n<ul>\r\n	<li>Les structures conditionnelles nous permettent d&rsquo;ex&eacute;cuter un bloc d&rsquo;instructions en fonction de certaines conditions.</li>\r\n	<li>Il ne faut surtout pas confondre = et ==. = repr&eacute;sente l&rsquo;op&eacute;rateur d&rsquo;affectation, == quant &agrave; lui, repr&eacute;sente l&rsquo;op&eacute;rateur d&rsquo;&eacute;galit&eacute;.</li>\r\n	<li>Il existe trois (3) formes de structures conditionnelles en Python: la forme minimale if, la forme moyenne if-else et la forme compl&egrave;te if-elif-else.</li>\r\n	<li>Un bool&eacute;en a comme valeur True ou False.</li>\r\n	<li>Indenter son code reste une bonne habitude car cela permet de rendre son code lisible et compr&eacute;hensible sans trop de difficult&eacute;s.</li>\r\n	<li>Comme op&eacute;rateurs logiques nous avons le OU logique, le ET logique et le NON logique.</li>\r\n	<li>Les boucles permettent de r&eacute;p&eacute;ter un certain nombre de fois un bloc d&rsquo;instructions.</li>\r\n	<li>En Python il existe uniquement deux structures it&eacute;ratives &agrave; savoir les boucles while et for.</li>\r\n	<li>Le mot-cl&eacute; in peut &ecirc;tre utilis&eacute; autre part que dans une boucle for.</li>\r\n	<li>Le mot-cl&eacute; break permet d&rsquo;arr&ecirc;ter la boucle appelante.</li>\r\n	<li>Le mot-cl&eacute; continue permet de passer au prochain tour de boucle.</li>\r\n</ul>\r\n\r\n<h2>7. Les structures de donn&eacute;es (Partie 1/2)</h2>\r\n\r\n<p>Nous avons vu que les variables repr&eacute;sentaient un excellent moyen de stocker une valeur en m&eacute;moire. De plus, si on le souhaite, cette valeur peut &ecirc;tre amen&eacute;e &agrave; changer au fur et &agrave; mesure de l&rsquo;ex&eacute;cution de notre programme.</p>\r\n\r\n<p>Mais que faire si nous avons besoin de stocker une longue liste d&rsquo;informations et de plus qui ne change pas avec le temps ? Disons par exemple, les noms des mois de l&rsquo;ann&eacute;e. Ou peut-&ecirc;tre une longue liste d&rsquo;informations qui, elle, change au fil du temps ? Par exemple, les noms de tous vos chats. Vous pouvez obtenir de nouveaux chats, certains peuvent mourir, d&rsquo;autres peuvent par contre se transformer en d&icirc;ner (nous devrions alors n&eacute;gocier recettes :) ). Qu&rsquo;en est-il d&rsquo;un annuaire t&eacute;l&eacute;phonique ? Vous aurez une liste de noms, et vous devrez attacher &agrave; chacun de ces noms, un num&eacute;ro de t&eacute;l&eacute;phone. Comment feriez-vous cela ?</p>\r\n\r\n<p>La r&eacute;ponse &agrave; toutes ces interrogations: les tuples, les listes, les dictionnaires.</p>\r\n\r\n<h3>7.1 Les tuples</h3>\r\n\r\n<p>Les tuples vous permettent de stocker une liste de valeurs. Le seul b&eacute;mol c&rsquo;est que vous ne pouvez pas changer les valeurs une fois votre tuple initialis&eacute;. En d&rsquo;autres termes, les valeurs que vous lui donnez lors de son initialisation, seront les valeurs que vous serez coinc&eacute;s d&rsquo;utiliser dans tout le reste du programme.</p>\r\n\r\n<p>Afin de pouvoir r&eacute;cup&eacute;rer plus tard chacune de ces valeurs de mani&egrave;re ais&eacute;e, nous allons associer &agrave; chacune d&rsquo;elles un indice ou index. La premi&egrave;re valeur aura pour indice 0, la seconde pour indice 1 et ainsi de suite. Remarquez bien que le premier indice est 0 et non 1.</p>\r\n\r\n<p>Par exemple les noms des mois de l&rsquo;ann&eacute;e pouvaient &ecirc;tre stock&eacute;s &agrave; l&rsquo;aide un tuple &agrave; moins que dans deux jours F&eacute;vrier deviennent MamaMiya :) ?</p>\r\n\r\n<p>Les tuples sont assez faciles &agrave; cr&eacute;er. Vous donnez un nom &agrave; votre tuple, puis apr&egrave;s, la liste des valeurs qu&rsquo;il comportera. Par exemple, les mois de l&rsquo;ann&eacute;e :</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>mois</code> <code>=</code> <code>(</code><code>&quot;Janvier&quot;</code><code>,</code> <code>&quot;F&eacute;vrier&quot;</code><code>,</code> <code>&quot;Mars&quot;</code><code>,</code> <code>&quot;Avril&quot;</code><code>,</code> <code>&quot;Mai&quot;</code><code>,</code> <code>&quot;Juin&quot;</code><code>,</code> <code>&quot;Juillet&quot;</code><code>,</code> <code>&quot;Ao&ucirc;t&quot;</code><code>,</code>\\\r\n<code>2 </code> <code>&quot;Septembre&quot;</code><code>,</code> <code>&quot;Octobre&quot;</code><code>,</code> <code>&quot;Novembre&quot;</code><code>,</code> <code>&quot;D&eacute;cembre&quot;</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<ul>\r\n	<li>&ldquo;Janvier&rdquo; est l&rsquo;&eacute;l&eacute;ment &agrave; l&rsquo;indice 0 (On commence toujours &agrave; z&eacute;ro),</li>\r\n	<li>&ldquo;F&eacute;vrier&rdquo; est l&rsquo;&eacute;l&eacute;ment &agrave; l&rsquo;indice 1,</li>\r\n	<li>&ldquo;Mars&rdquo; est l&rsquo;&eacute;l&eacute;ment &agrave; l&rsquo;indice 2,</li>\r\n	<li>&hellip; Je vous laisse terminer. Ce sera un bon exercice.</li>\r\n	<li>Notez que j&rsquo;ai eu &agrave; mettre un antislash tout juste apr&egrave;s &ldquo;Ao&ucirc;t&rdquo;. C&rsquo;est en effet un moyen de pouvoir d&eacute;composer notre code sur plusieurs lignes afin de le rendre beaucoup plus lisible.</li>\r\n	<li>Les parenth&egrave;ses utilis&eacute;es pour d&eacute;limiter le d&eacute;but et la fin de notre tuple sont optionnelles. Vous n&rsquo;&ecirc;tes donc pas oblig&eacute; de les utiliser. Mais je vous conseille de toujours les mettre afin de ne pas vous compliquer la vie mais celle &eacute;galement de notre interpr&eacute;teur. Il a d&eacute;j&agrave; assez souffert dans son enfance :).</li>\r\n</ul>\r\n\r\n<p>Voyons &agrave; pr&eacute;sent comment afficher un &eacute;l&eacute;ment de notre tuple. Pourquoi pas <strong>Janvier</strong>, <strong>Mars</strong> et <strong>Juillet</strong>. Rappelons que Mars est le 3&egrave;me &eacute;l&eacute;ment de notre tuple mais il a pour indice 2.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code># Je suis &eacute;galement un tuple croyez-moi :(</code>\r\n<code>2 </code><code>mois</code> <code>=</code> <code>&quot;Janvier&quot;</code><code>,</code> <code>&quot;F&eacute;vrier&quot;</code><code>,</code> <code>&quot;Mars&quot;</code><code>,</code> <code>&quot;Avril&quot;</code><code>,</code> <code>&quot;Mai&quot;</code><code>,</code> <code>&quot;Juin&quot;</code><code>,</code> <code>&quot;Juillet&quot;</code><code>,</code> <code>&quot;Ao&ucirc;t&quot;</code><code>,</code> \\\r\n<code>3 </code><code>&quot;Septembre&quot;</code><code>,</code> <code>&quot;Octobre&quot;</code><code>,</code> <code>&quot;Novembre&quot;</code><code>,</code> <code>&quot;D&eacute;cembre&quot;</code>\r\n</pre>\r\n</div>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>#Declaration de notre tuple</code>\r\n<code>2 </code><code>mois</code> <code>=</code> <code>(</code><code>&quot;Janvier&quot;</code><code>,</code> <code>&quot;F&eacute;vrier&quot;</code><code>,</code> <code>&quot;Mars&quot;</code><code>,</code> <code>&quot;Avril&quot;</code><code>,</code> <code>&quot;Mai&quot;</code><code>,</code> <code>&quot;Juin&quot;</code><code>,</code> <code>&quot;Juillet&quot;</code><code>,</code> <code>&quot;Ao&ucirc;t&quot;</code><code>,</code>\\\r\n<code>3 </code> <code>&quot;Septembre&quot;</code><code>,</code> <code>&quot;Octobre&quot;</code><code>,</code> <code>&quot;Novembre&quot;</code><code>,</code> <code>&quot;D&eacute;cembre&quot;</code><code>)</code>\r\n<code>4 </code>\r\n<code>5 </code><code>print</code><code>(</code><code>mois</code><code>[</code><code>0</code><code>])</code> <code>#Affiche Janvier</code>\r\n<code>6 </code><code>print</code><code>(</code><code>mois</code><code>[</code><code>2</code><code>])</code> <code>#Affiche Mars</code>\r\n<code>7 </code><code>print</code><code>(</code><code>mois</code><code>[</code><code>6</code><code>])</code> <code>#Affiche Juillet</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Comme vous pouvez le voir, c&rsquo;est vraiment tr&egrave;s simple! Il suffit de mettre le nom de notre tuple et ensuite pr&eacute;ciser entre crochets l&rsquo;indice de l&rsquo;&eacute;l&eacute;ment auquel on souhaite acc&eacute;der.</p>\r\n\r\n<h3>7.2 Les listes</h3>\r\n\r\n<p>Les listes sont ce qu&rsquo;elles semblent &ecirc;tre - une liste de valeurs. A la diff&eacute;rence des tuples, vous pouvez ajouter, modifier et supprimer des valeurs de la liste comme bon vous semble. Encore une fois, chaque valeur aura un indice et on commencera &agrave; compter &agrave; partir de z&eacute;ro et non 1. Un exemple de liste sera les noms de vos nombreux chats.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>nom_de_mes_chats</code> <code>=</code> <code>[</code><code>&quot;Panpidou&quot;</code><code>,</code> <code>&quot;Milou&quot;</code><code>,</code> <code>&quot;Mamole&quot;</code><code>]</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Comme vous le voyez, le code est exactement le m&ecirc;me que celui de la d&eacute;claration d&rsquo;un tuple, SAUF que toutes les valeurs sont mises entre crochets, pas de parenth&egrave;ses. Les crochets ici ne sont pas du tout optionnels.</p>\r\n\r\n<p>Quel est l&rsquo;&eacute;l&eacute;ment &agrave; l&rsquo;indice 2 ? Hmm je crois bien que c&rsquo;est &ldquo;Mamole&rdquo;. Est-ce exact ? Quel est l&rsquo;&eacute;l&eacute;ment &agrave; l&rsquo;indice 5 ? Hmm je crois bien que c&rsquo;est &ldquo;&hellip;&rdquo; ?</p>\r\n\r\n<p>La plupart du temps, nous utilisons des listes en lieu et place des tuples parce que g&eacute;n&eacute;ralement ce que nous voulons c&rsquo;est changer facilement les valeurs de nos &eacute;l&eacute;ments si le besoin se fait ressentir.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>#Declaration de notre liste</code>\r\n<code>2 </code><code>nom_de_mes_chats</code> <code>=</code> <code>[</code><code>&quot;Panpidou&quot;</code><code>,</code> <code>&quot;Milou&quot;</code><code>,</code> <code>&quot;Mamole&quot;</code><code>]</code>\r\n<code>3 </code>\r\n<code>4 </code><code>print</code><code>(</code><code>nom_de_mes_chats</code><code>[</code><code>0</code><code>])</code> <code>#Affiche Panpidou</code>\r\n<code>5 </code><code>print</code><code>(</code><code>nom_de_mes_chats</code><code>[</code><code>2</code><code>])</code> <code>#Affiche Mamole</code>\r\n<code>6 </code><code>print</code><code>(</code><code>nom_de_mes_chats</code><code>[</code><code>5</code><code>])</code> <code>#Affiche une belle erreur</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Comme vous pouvez le voir, notre liste comporte 3 &eacute;l&eacute;ments. Les indices varient de 0 &agrave; 2. Ainsi lorsqu&rsquo;on tente d&rsquo;acc&eacute;der &agrave; l&rsquo;&eacute;l&eacute;ment &agrave; l&rsquo;indice 5, notre interpr&eacute;teur est confus et il nous le fait savoir en affichant une erreur. En r&eacute;alit&eacute; on dira qu&rsquo;une exception de type <code>IndexError</code> est lev&eacute;e.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>Traceback</code> <code>(</code><code>most</code> <code>recent</code> <code>call</code> <code>last</code><code>):</code>\r\n<code>2 </code>  <code>File</code> <code>&quot;&lt;pyshell#71&gt;&quot;</code><code>,</code> <code>line</code> <code>1</code><code>,</code> <code>in</code> <code>&lt;</code><code>module</code><code>&gt;</code>\r\n<code>3 </code>    <code>print</code><code>(</code><code>nom_de_mes_chats</code><code>[</code><code>5</code><code>])</code>\r\n<code>4 </code><code>IndexError</code><code>:</code> <code>list</code> <code>index</code> <code>out</code> <code>of</code> <code>range</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Je vous avais dit qu&rsquo;&agrave; la diff&eacute;rence des tuples, on pouvait ajouter, modifier ou supprimer une valeur au niveau d&rsquo;une liste. Voyons donc comment le faire.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>&gt;&gt;&gt;</code> <code>nom_de_mes_chats</code> <code>=</code> <code>[</code><code>&quot;Panpidou&quot;</code><code>,</code> <code>&quot;Milou&quot;</code><code>,</code> <code>&quot;Mamole&quot;</code><code>]</code> <code>#D&eacute;claration de notre lis\\</code>\r\n<code> 2 </code><code>te</code>\r\n<code> 3 </code><code>&gt;&gt;&gt;</code> <code>nom_de_mes_chats</code><code>.</code><code>append</code><code>(</code><code>&quot;Bobby&quot;</code><code>)</code> <code>#Ajout d&#39;un &eacute;l&eacute;ment &agrave; la liste</code>\r\n<code> 4 </code><code>&gt;&gt;&gt;</code> <code>nom_de_mes_chats</code>\r\n<code> 5 </code><code>[</code><code>&#39;Panpidou&#39;</code><code>,</code> <code>&#39;Milou&#39;</code><code>,</code> <code>&#39;Mamole&#39;</code><code>,</code> <code>&#39;Bobby&#39;</code><code>]</code>\r\n<code> 6 </code><code>&gt;&gt;&gt;</code> <code>nom_de_mes_chats</code><code>.</code><code>remove</code><code>(</code><code>&quot;Milou&quot;</code><code>)</code> <code>#Suppression d&#39;un &eacute;l&eacute;ment gr&acirc;ce &agrave; sa valeur</code>\r\n<code> 7 </code><code>&gt;&gt;&gt;</code> <code>nom_de_mes_chats</code>\r\n<code> 8 </code><code>[</code><code>&#39;Panpidou&#39;</code><code>,</code> <code>&#39;Mamole&#39;</code><code>,</code> <code>&#39;Bobby&#39;</code><code>]</code>\r\n<code> 9 </code><code>&gt;&gt;&gt;</code> <code>nom_de_mes_chats</code><code>[</code><code>1</code><code>]</code> <code>=</code> <code>&quot;Toto&quot;</code> <code>#Modification d&#39;une valeur</code>\r\n<code>10 </code> <code>&gt;&gt;&gt;</code> <code>nom_de_mes_chats</code>\r\n<code>11 </code><code>[</code><code>&#39;Panpidou&#39;</code><code>,</code> <code>&#39;Toto&#39;</code><code>,</code> <code>&#39;Bobby&#39;</code><code>]</code>\r\n<code>12 </code><code>&gt;&gt;&gt;</code> <code>del</code> <code>nom_de_mes_chats</code><code>[</code><code>1</code><code>]</code> <code>#Suppression d&#39;un &eacute;l&eacute;ment via son indice</code>\r\n<code>13 </code><code>&gt;&gt;&gt;</code> <code>nom_de_mes_chats</code>\r\n<code>14 </code><code>[</code><code>&#39;Panpidou&#39;</code><code>,</code> <code>&#39;Bobby&#39;</code><code>]</code>\r\n<code>15 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Je crois que les commentaires parlent d&rsquo;eux-m&ecirc;mes. Mais pour r&eacute;sumer on peut dire que :</p>\r\n\r\n<ul>\r\n	<li>Pour ajouter un &eacute;l&eacute;ment &agrave; une liste, on met le nom de la liste, suivi d&rsquo;un joli petit point, suivi de la m&eacute;thode <code>append</code>, et pour terminer entre parenth&egrave;ses nous pr&eacute;cisons la valeur &agrave; rajouter. Il faut pr&eacute;ciser que les &eacute;l&eacute;ments n&rsquo;ont pas forc&eacute;ment besoin d&rsquo;&ecirc;tre du m&ecirc;me type. J&rsquo;aurai pu rajouter l&rsquo;entier <code>5</code> &agrave; ma liste de chats et personne ne m&rsquo;aurait bl&acirc;mer, pas m&ecirc;me l&rsquo;interpr&eacute;teur.</li>\r\n	<li>Pour modifier un &eacute;l&eacute;ment d&rsquo;une liste, on utilise l&rsquo;affectation classique. On acc&egrave;de premi&egrave;rement &agrave; l&rsquo;&eacute;l&eacute;ment qu&rsquo;on souhaite modifier via son indice et on lui affecte une nouvelle valeur.</li>\r\n	<li>Pour supprimer un &eacute;l&eacute;ment d&rsquo;une liste, on peut le faire de plusieurs fa&ccedil;ons : via son indice ou via sa valeur. J&rsquo;ai tendance &agrave; utiliser la commande del pour la suppression. J&rsquo;utilise donc la m&eacute;thode de suppression via un indice. Mais libre &agrave; vous de vous faire votre propre opinion de la question.</li>\r\n</ul>\r\n\r\n<h3>7.3 Les dictionnaires</h3>\r\n\r\n<p>Les dictionnaires sont similaires &agrave; ce que leur nom indique : un dictionnaire. Dans un dictionnaire, vous avez un &laquo; index &raquo; de mots, et pour chacun d&rsquo;eux une d&eacute;finition. En Python, le mot est appel&eacute; une &laquo; cl&eacute; &raquo;, et la d&eacute;finition une &laquo; valeur &raquo;. Les valeurs d&rsquo;un dictionnaire ne sont pas num&eacute;rot&eacute;es comme c&rsquo;est le cas pour les listes et les tuples. Notez &eacute;galement que les &eacute;l&eacute;ments ne sont pas dans un ordre particulier. Nous y reviendrons.</p>\r\n\r\n<p>L&rsquo;annuaire t&eacute;l&eacute;phonique sera un exemple parfait de dictionnaire.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>contacts</code> <code>=</code> <code>{</code><code>&quot;Maman&quot;</code> <code>:</code> <code>&quot;77562024848&quot;</code><code>,</code> <code>&quot;Ma princesse&quot;</code> <code>:</code> <code>&quot;000000000&quot;</code><code>,</code> <code>&quot;Dad&quot;</code><code>:</code> <code>&quot;32283</code><code>\\</code>\r\n<code>2 </code><code>904484&quot;</code><code>}</code>\r\n</pre>\r\n</div>\r\n\r\n<p>On aurait pu utiliser un entier pour les num&eacute;ros de t&eacute;l&eacute;phone mais j&rsquo;ai pr&eacute;f&eacute;r&eacute; utiliser ici une cha&icirc;ne de caract&egrave;res parce que c&rsquo;est ce qu&rsquo;il y a de plus adapt&eacute; &agrave; mon avis. De plus, si le num&eacute;ro est un peu long, un entier ce n&rsquo;est vraiment pas ce qu&rsquo;il y a de conventionnel :).</p>\r\n\r\n<p>Alors un peu de pratique sur les dictionnaires, &ccedil;a vous dit ?</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>&gt;&gt;&gt;</code> <code>contacts</code> <code>=</code> <code>{</code><code>&quot;Maman&quot;</code> <code>:</code> <code>&quot;77562024848&quot;</code><code>,</code> <code>&quot;Ma princesse&quot;</code> <code>:</code> <code>&quot;000000000&quot;</code><code>,</code> <code>&quot;Dad&quot;</code><code>:</code> <code>&quot;3</code><code>\\</code>\r\n<code> 2 </code><code>2283904484&quot;</code><code>}</code>\r\n<code> 3 </code><code>&gt;&gt;&gt;</code> <code>contacts</code><code>[</code><code>&quot;Marie&quot;</code><code>]</code> <code>=</code> <code>&quot;4579303332&quot;</code> <code>#Ajout d&#39;un nouveau contact</code>\r\n<code> 4 </code><code>&gt;&gt;&gt;</code> <code>contacts</code>\r\n<code> 5 </code><code>{</code><code>&#39;Ma princesse&#39;</code><code>:</code> <code>&#39;000000000&#39;</code><code>,</code> <code>&#39;Dad&#39;</code><code>:</code> <code>&#39;32283904484&#39;</code><code>,</code> <code>&#39;Marie&#39;</code><code>:</code> <code>&#39;4579303332&#39;</code><code>,</code> <code>&#39;Mama</code><code>\\</code>\r\n<code> 6 </code><code>n&#39;</code><code>:</code> <code>&#39;77562024848&#39;</code><code>}</code>\r\n<code> 7 </code><code>&gt;&gt;&gt;</code> <code>contacts</code><code>[</code><code>&quot;Maman&quot;</code><code>]</code> <code>=</code> <code>30393974</code> <code>#Modifier un contact</code>\r\n<code> 8 </code><code>&gt;&gt;&gt;</code> <code>contacts</code>\r\n<code> 9 </code><code>{</code><code>&#39;Ma princesse&#39;</code><code>:</code> <code>&#39;000000000&#39;</code><code>,</code> <code>&#39;Dad&#39;</code><code>:</code> <code>&#39;32283904484&#39;</code><code>,</code> <code>&#39;Marie&#39;</code><code>:</code> <code>&#39;4579303332&#39;</code><code>,</code> <code>&#39;Mama</code><code>\\</code>\r\n<code>10 </code><code>n&#39;</code><code>:</code> <code>30393974</code><code>}</code>\r\n<code>11 </code><code>&gt;&gt;&gt;</code> <code>contacts</code><code>.</code><code>keys</code><code>()</code> <code>#Affiche toutes les cl&eacute;s</code>\r\n<code>12 </code><code>[</code><code>&#39;Ma princesse&#39;</code><code>,</code> <code>&#39;Dad&#39;</code><code>,</code> <code>&#39;Marie&#39;</code><code>,</code> <code>&#39;Maman&#39;</code><code>]</code>\r\n<code>13 </code><code>&gt;&gt;&gt;</code> <code>contacts</code><code>.</code><code>values</code><code>()</code> <code>#Affiche toutes les valeurs</code>\r\n<code>14 </code><code>[</code><code>&#39;000000000&#39;</code><code>,</code> <code>&#39;32283904484&#39;</code><code>,</code> <code>&#39;4579303332&#39;</code><code>,</code> <code>&#39;77562024848&#39;</code><code>]</code>\r\n<code>15 </code><code>&gt;&gt;&gt;</code> <code>del</code> <code>contacts</code><code>[</code><code>&quot;Ma princesse&quot;</code><code>]</code> <code>#Suppression d&#39;un contact</code>\r\n<code>16 </code><code>&gt;&gt;&gt;</code> <code>contacts</code>\r\n<code>17 </code><code>{</code><code>&#39;Dad&#39;</code><code>:</code> <code>&#39;32283904484&#39;</code><code>,</code> <code>&#39;Marie&#39;</code><code>:</code> <code>&#39;4579303332&#39;</code><code>,</code> <code>&#39;Maman&#39;</code><code>:</code> <code>30393974</code><code>}</code>\r\n<code>18 </code><code>&gt;&gt;&gt;</code> <code>mes_cles</code> <code>=</code> <code>contacts</code><code>.</code><code>keys</code><code>()</code> <code>#On stocke les cl&eacute;s dans la variable mes_cles</code>\r\n<code>19 </code><code>&gt;&gt;&gt;</code> <code>mes_cles</code><code>.</code><code>sort</code><code>()</code> <code>#On les met en ordre</code>\r\n<code>20 </code><code>&gt;&gt;&gt;</code> <code>mes_cles</code>\r\n<code>21 </code><code>[</code><code>&#39;Dad&#39;</code><code>,</code> <code>&#39;Maman&#39;</code><code>,</code> <code>&#39;Marie&#39;</code><code>]</code>\r\n<code>22 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Comme je vous l&rsquo;avais dit, les dictionnaires ne sont rien d&rsquo;autres qu&rsquo;un ensemble de cl&eacute;s et de valeurs. La syntaxe est la suivante :</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>dictionnaire</code> <code>=</code> <code>{</code> <code>cle1</code> <code>:</code> <code>valeur1</code><code>,</code> <code>cle2</code> <code>:</code> <code>valeur2</code><code>,</code> <code>cle3</code> <code>:</code> <code>valeur3</code> <code>}</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Ainsi tr&egrave;s facilement nous d&eacute;clarons notre dictionnaire <code>contacts</code>.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>contacts</code> <code>=</code> <code>{</code><code>&quot;Maman&quot;</code> <code>:</code> <code>&quot;77562024848&quot;</code><code>,</code> <code>&quot;Ma princesse&quot;</code> <code>:</code> <code>&quot;000000000&quot;</code><code>,</code> <code>&quot;Dad&quot;</code><code>:</code> <code>&quot;32283</code><code>\\</code>\r\n<code>2 </code><code>904484&quot;</code><code>}</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Pour ajouter un nouvel &eacute;l&eacute;ment &agrave; notre dictionnaire, pas de m&eacute;thode <code>append</code> cette fois-ci comme c&rsquo;&eacute;tait le cas pour les listes. Il vous suffit d&rsquo;ajouter une nouvelle cl&eacute; et une nouvelle valeur &agrave; votre dictionnaire. Si cette cl&eacute; existe d&eacute;j&agrave;, alors il proc&eacute;dera &agrave; une modification, dans le cas contraire, ce sera un ajout.</p>\r\n\r\n<ul>\r\n	<li>Vous avez pu remarqu&eacute;, comme je vous l&rsquo;avais dit, qu&rsquo;avec les dictionnaires les &eacute;l&eacute;ments ne sont pas stock&eacute;s dans un ordre particulier. Ce sera donc &agrave; vous de le faire si vous souhaitez par exemple stocker vos contacts par ordre alphab&eacute;tique par exemple. Pour l&rsquo;instant j&rsquo;ai eu &agrave; vous montrer comment ordonner s&eacute;par&eacute;ment les cl&eacute;s. Mais nous y reviendrons.</li>\r\n	<li>Vous avez la possibilit&eacute; de r&eacute;cup&eacute;rer les diff&eacute;rentes cl&eacute;s et valeurs d&rsquo;un dictionnaire en utilisant respectivement les m&eacute;thodes <strong>keys()</strong> et <strong>values()</strong>.</li>\r\n</ul>\r\n\r\n<p>Il existe un grand nombre de fonctions que nous pouvons appliquer aux listes et aux dictionnaires. Mais on ne pourra pas toutes les d&eacute;couvrir. Cependant, je m&rsquo;efforcerai au fur et &agrave; mesure que nous avan&ccedil;ons d&rsquo;en pr&eacute;senter des nouvelles. Vous devez sans aucun doute utiliser <a href="https://www.python.org/doc/">la documentation officielle</a> si vous voulez avoir une liste exhaustive des ces fonctions. Je crois bien que c&rsquo;est le moment de prendre une petite pause caf&eacute; afin de dig&eacute;rer tout ce qu&rsquo;on a vu jusque l&agrave; parce que dans la section suivante on aborde un autre gros morceau.</p>\r\n\r\n<h3>7.4 R&eacute;sum&eacute;</h3>\r\n\r\n<p>Dans ce chapitre, nous avons appris que :</p>\r\n\r\n<ul>\r\n	<li>Python nous donne &eacute;galement la possibilit&eacute; de pouvoir stocker un ensemble de valeurs au travers des tuples, des listes et des dictionnaires.</li>\r\n	<li>Une fois un tuple initialis&eacute;, ses valeurs ne peuvent &ecirc;tre modifi&eacute;es.</li>\r\n	<li>A la diff&eacute;rence des tuples, nous pouvons ajouter, modifier et supprimer des valeurs de la liste comme bon nous semble.</li>\r\n	<li>Les dictionnaires nous permettent de stocker des &eacute;l&eacute;ments de type cl&eacute; - valeur.</li>\r\n	<li>Les valeurs d&rsquo;un dictionnaire ne sont pas num&eacute;rot&eacute;es comme c&rsquo;est le cas pour les listes et les tuples.</li>\r\n	<li>Dans un dictionnaire, les &eacute;l&eacute;ments ne sont pas ordonn&eacute;s.</li>\r\n</ul>\r\n\r\n<h2>8. Les structures de donn&eacute;es (Partie 2/2)</h2>\r\n\r\n<p>Dans le chapitre pr&eacute;c&eacute;dent, nous avons introduit ce qu&rsquo;&eacute;taient les structures de donn&eacute;es. Dans cette seconde partie, je vous invite &agrave; entrer un peu plus en profondeur.</p>\r\n\r\n<p>Je r&eacute;p&eacute;terai volontairement certaines notions que nous avons vu dans le chapitre pr&eacute;c&eacute;dent pour question de p&eacute;dagogie. Croyez-moi plus on reprend quelque chose, mieux on la comprend.</p>\r\n\r\n<h3>8.1 Les types non scalaires</h3>\r\n\r\n<p>Comme nous l&rsquo;avons d&eacute;j&agrave; vu, Il existe trois types de donn&eacute;es en Python nous permettant de rassembler des donn&eacute;es. Il s&rsquo;agit des tuples, des listes et des dictionnaires.</p>\r\n\r\n<p>Ce sont des types <strong>non scalaires</strong> car ils peuvent contenir plusieurs &eacute;l&eacute;ments &agrave; la fois, contrairement aux types scalaires <strong>(int, float&hellip;)</strong> qui eux ne peuvent contenir qu&rsquo;un seul &eacute;l&eacute;ment &agrave; la fois.</p>\r\n\r\n<p>Ce que vous devez savoir c&rsquo;est que les cha&icirc;nes de caract&egrave;res font partie des types <strong>non scalaires</strong> puisqu&rsquo;elles peuvent contenir plusieurs &eacute;l&eacute;ments &agrave; la fois. En effet, une cha&icirc;ne de caract&egrave;res n&rsquo;est rien d&rsquo;autre qu&rsquo;une s&eacute;quence de caract&egrave;res.</p>\r\n\r\n<h3>8.2 Les chaines de caract&egrave;res</h3>\r\n\r\n<p>Vu qu&rsquo;une cha&icirc;ne de caract&egrave;res n&rsquo;est rien d&rsquo;autre qu&rsquo;une s&eacute;quence de caract&egrave;res, je peux demander &agrave; r&eacute;cup&eacute;rer le premier caract&egrave;re, le second, le dernier&hellip;</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>chaine</code> <code>=</code> <code>&quot;Python is amazing&quot;</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>print</code><code>(</code><code>chaine</code><code>[</code><code>0</code><code>])</code>\r\n<code>3 </code><code>P</code>\r\n<code>4 </code><code>&gt;&gt;&gt;</code> <code>print</code><code>(</code><code>chaine</code><code>[</code><code>-</code><code>1</code><code>])</code>\r\n<code>5 </code><code>g</code>\r\n<code>6 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Comme vous pouvez le voir, on peut tr&egrave;s facilement r&eacute;cup&eacute;rer le dernier &eacute;l&eacute;ment d&rsquo;une s&eacute;quence de donn&eacute;es en utilisant un indice n&eacute;gatif. Dans notre cas <strong>-1</strong>. Si je voulais avoir l&rsquo;avant dernier caract&egrave;re, il m&rsquo;aurait fallu &eacute;crire <strong>chaine[-2]</strong> et ainsi de suite. Cela marche &eacute;galement sur les tuples et les listes.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>ma_liste</code> <code>=</code> <code>[</code><code>1</code><code>,</code><code>2</code><code>,</code><code>3</code><code>,</code><code>4</code><code>]</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>ma_liste</code><code>[</code><code>-</code><code>1</code><code>]</code>\r\n<code>3 </code><code>4</code>\r\n<code>4 </code><code>&gt;&gt;&gt;</code> <code>mon_tuple</code> <code>=</code> <code>(</code><code>1</code><code>,</code><code>2</code><code>,</code><code>3</code><code>,</code><code>4</code><code>)</code>\r\n<code>5 </code><code>&gt;&gt;&gt;</code> <code>mon_tuple</code><code>[</code><code>-</code><code>2</code><code>]</code>\r\n<code>6 </code><code>3</code>\r\n<code>7 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Les chaines de caract&egrave;res sont dites <strong>immuables</strong> &eacute;tant donn&eacute; qu&rsquo;une fois d&eacute;finies, on ne peut pas changer la valeur d&rsquo;un &eacute;l&eacute;ment sp&eacute;cifique.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>chaine</code> <code>=</code> <code>&quot;Python is amazing&quot;</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>chaine</code><code>[</code><code>0</code><code>]</code> <code>=</code> <code>&quot;M&quot;</code>\r\n<code>3 </code><code>Traceback</code> <code>(</code><code>most</code> <code>recent</code> <code>call</code> <code>last</code><code>):</code>\r\n<code>4 </code>  <code>File</code> <code>&quot;&lt;pyshell#6&gt;&quot;</code><code>,</code> <code>line</code> <code>1</code><code>,</code> <code>in</code> <code>&lt;</code><code>module</code><code>&gt;</code>\r\n<code>5 </code>    <code>chaine</code><code>[</code><code>0</code><code>]</code> <code>=</code> <code>&quot;M&quot;</code>\r\n<code>6 </code><code>TypeError</code><code>:</code> <code>&#39;str&#39;</code> <code>object</code> <code>does</code> <code>not</code> <code>support</code> <code>item</code> <code>assignment</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Au passage, rappelez-vous qu&rsquo;on avait dit &eacute;galement que les tuples &eacute;taient immuables. Pour preuve:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>mon_tuple</code> <code>=</code> <code>(</code><code>1</code><code>,</code><code>2</code><code>,</code><code>3</code><code>,</code><code>4</code><code>,</code><code>5</code><code>)</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>mon_tuple</code><code>[</code><code>1</code><code>]</code> <code>=</code> <code>3</code>\r\n<code>3 </code><code>Traceback</code> <code>(</code><code>most</code> <code>recent</code> <code>call</code> <code>last</code><code>):</code>\r\n<code>4 </code>  <code>File</code> <code>&quot;&lt;pyshell#8&gt;&quot;</code><code>,</code> <code>line</code> <code>1</code><code>,</code> <code>in</code> <code>&lt;</code><code>module</code><code>&gt;</code>\r\n<code>5 </code>    <code>mon_tuple</code><code>[</code><code>1</code><code>]</code> <code>=</code> <code>3</code>\r\n<code>6 </code><code>TypeError</code><code>:</code> <code>&#39;tuple&#39;</code> <code>object</code> <code>does</code> <code>not</code> <code>support</code> <code>item</code> <code>assignment</code>\r\n<code>7 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<h4>8.2.1 Les slices</h4>\r\n\r\n<p>Les slices nous permettent de s&eacute;lectionner une partie ou toute une s&eacute;quence de donn&eacute;es.</p>\r\n\r\n<p>La syntaxe est la suivante: <strong>sequence[indice_debut : indice_fin]</strong>. Et on dira qu&rsquo;on souhaite r&eacute;cup&eacute;rer tous les &eacute;l&eacute;ments de notre s&eacute;quence ayant leurs indices variant de <strong>indice_debut</strong> &agrave; <strong>indice_fin</strong>, (indice_fin &eacute;tant exclu)</p>\r\n\r\n<p>Ainsi l&rsquo;intervalle des indices repr&eacute;sent&eacute; math&eacute;matiquement sera: <strong>[indice_debut, indice_fin[</strong>, ce qui signifie que l&rsquo;indice de fin ne fait pas partie des indices &agrave; inclure.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>chaine</code> <code>=</code> <code>&quot;Python is amazing&quot;</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>chaine</code><code>[</code><code>1</code><code>:</code><code>2</code><code>]</code>\r\n<code>3 </code><code>&#39;y&#39;</code>\r\n<code>4 </code><code>&gt;&gt;&gt;</code> <code>chaine</code><code>[</code><code>3</code><code>:</code><code>4</code><code>]</code>\r\n<code>5 </code><code>&#39;h&#39;</code>\r\n<code>6 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Autre chose que vous devez savoir, c&rsquo;est ce que <code>indice_debut</code> et <code>indice_fin</code> ont comme valeur par d&eacute;faut.</p>\r\n\r\n<ul>\r\n	<li>Si vous ne pr&eacute;cisez donc pas la borne inf&eacute;rieure du slice, <code>indice_debut</code> vaudra par d&eacute;faut 0.</li>\r\n	<li>Si vous ne pr&eacute;cisez donc pas la borne sup&eacute;rieure du slice, <code>indice_fin</code> sera &eacute;gal par d&eacute;faut &agrave; la taille de votre s&eacute;quence.</li>\r\n</ul>\r\n\r\n<p>Ainsi:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>chaine</code> <code>=</code> <code>&quot;Python is amazing&quot;</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>chaine</code><code>[:]</code>\r\n<code>3 </code><code>&#39;Python is amazing&#39;</code>\r\n<code>4 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>comme vous pouvez le voir r&eacute;cup&egrave;rera la s&eacute;quence enti&egrave;re. On utilise tr&egrave;s souvent cette technique pour cr&eacute;er une copie d&rsquo;une liste. On y reviendra dans les d&eacute;tails.</p>\r\n\r\n<p>Je vous propose pour clore cette section, deux autres exemples afin de vous permettre de vous familiariser avec cette notion de slicing.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>chaine</code> <code>=</code> <code>&quot;Python is amazing&quot;</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>chaine</code><code>[</code><code>4</code><code>:]</code>\r\n<code>3 </code><code>&#39;on is amazing&#39;</code>\r\n<code>4 </code><code>&gt;&gt;&gt;</code> <code>chaine</code><code>[:</code><code>-</code><code>1</code><code>]</code>\r\n<code>5 </code><code>&#39;Python is amazin&#39;</code>\r\n</pre>\r\n</div>\r\n\r\n<h4>8.2.2 Modification d&rsquo;une cha&icirc;ne de caract&egrave;res</h4>\r\n\r\n<p>A voir le titre de la section, vous vous &ecirc;tes s&ucirc;rement dit: Mais de quoi parle ce mec? Il nous a dit il y a quelques minutes de cela qu&rsquo;on ne pouvait pas modifier les &eacute;l&eacute;ments d&rsquo;une chaine de caract&egrave;res une fois d&eacute;finie!</p>\r\n\r\n<p>Vous avez tout &agrave; fait raison. Et je maintiens ma position! Le fait est qu&rsquo;avec l&rsquo;utilisation du slicing on pourra faire semblant de r&eacute;soudre ce petit probl&egrave;me en trichant un tout petit peu.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>chaine</code> <code>=</code> <code>&#39;baba&#39;</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>chaine</code> <code>=</code> <code>&#39;d&#39;</code> <code>+</code> <code>chaine</code><code>[</code><code>1</code><code>:]</code>\r\n<code>3 </code><code>&gt;&gt;&gt;</code> <code>chaine</code>\r\n<code>4 </code><code>&#39;daba&#39;</code>\r\n<code>5 </code><code>&gt;&gt;&gt;</code> <code>chaine</code> <code>=</code> <code>&#39;P&#39;</code> <code>+</code> <code>chaine</code><code>[</code><code>1</code><code>]</code> <code>+</code> <code>&#39;p&#39;</code> <code>+</code> <code>chaine</code><code>[</code><code>3</code><code>:]</code>\r\n<code>6 </code><code>&gt;&gt;&gt;</code> <code>chaine</code>\r\n<code>7 </code><code>&#39;Papa&#39;</code>\r\n<code>8 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<h4>Les chaines de caract&egrave;res sont immuables !</h4>\r\n\r\n<p>Attention, cela ne veut pas dire que les chaines de caract&egrave;res sont muables, ce serait alors se contredire, mais c&rsquo;est juste une combinaison de concat&eacute;nation de cha&icirc;ne de caract&egrave;res et d&rsquo;affection.</p>\r\n\r\n<h4>8.2.3 Parcourir une chaine de caract&egrave;res</h4>\r\n\r\n<p>On peut parcourir tous les &eacute;l&eacute;ments d&rsquo;une chaine de caract&egrave;res avec les deux types de boucles que nous avons vus &agrave; savoir la boucle for et la boucle while. Notons n&eacute;anmoins pour rappel, que la boucle for est la mieux adapt&eacute;e pour parcourir une s&eacute;quence de donn&eacute;es.</p>\r\n\r\n<h5>Avec la boucle for</h5>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>chaine</code> <code>=</code> <code>&quot;coucou&quot;</code>\r\n<code>2 </code>\r\n<code>3 </code><code>for</code> <code>caractere</code> <code>in</code> <code>chaine</code><code>:</code>\r\n<code>4 </code>    <code>print</code><code>(</code><code>caractere</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<h5>Avec la boucle while</h5>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>chaine</code> <code>=</code> <code>&quot;coucou&quot;</code>\r\n<code>2 </code><code>i</code> <code>=</code> <code>0</code>\r\n<code>3 </code>\r\n<code>4 </code><code>while</code><code>(</code> <code>i</code> <code>&lt;</code> <code>len</code><code>(</code><code>chaine</code><code>)</code> <code>):</code>\r\n<code>5 </code>    <code>print</code><code>(</code><code>chaine</code><code>[</code><code>i</code><code>])</code>\r\n<code>6 </code>    <code>i</code> <code>+=</code> <code>1</code>\r\n</pre>\r\n</div>\r\n\r\n<h4>La fonction len</h4>\r\n\r\n<p>La fonction <strong>len</strong> vous renvoie la taille d&rsquo;une s&eacute;quence de donn&eacute;es. En d&rsquo;autres termes, le nombre d&rsquo;&eacute;l&eacute;ments qui la compose.</p>\r\n\r\n<h4>8.2.4 M&eacute;thodes courantes applicables aux chaines de caract&egrave;res</h4>\r\n\r\n<p>Il existe plusieurs m&eacute;thodes (fonctions) s&rsquo;appliquant aux chaines de caract&egrave;res. Un simple <strong>help(str)</strong> dans l&rsquo;interpr&eacute;teur, vous donnera une liste exhaustive de ces m&eacute;thodes.</p>\r\n\r\n<p>D&eacute;couvrons en quelques unes si vous le permettez:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>&gt;&gt;&gt;</code> <code>chaine</code> <code>=</code> <code>&quot;Qui est-ce qui n&#39;aime pas PYTHON?&quot;</code>\r\n<code> 2 </code><code>&gt;&gt;&gt;</code> <code>chaine</code><code>.</code><code>lower</code><code>()</code> <code>#Conversion des caract&egrave;res en minuscules</code>\r\n<code> 3 </code><code>&quot;qui est-ce qui n&#39;aime pas python?&quot;</code>\r\n<code> 4 </code><code>&gt;&gt;&gt;</code> <code>chaine</code><code>.</code><code>upper</code><code>()</code> <code>#Conversion des caract&egrave;res en majuscules</code>\r\n<code> 5 </code><code>&quot;QUI EST-CE QUI N&#39;AIME PAS PYTHON?&quot;</code>\r\n<code> 6 </code><code>&gt;&gt;&gt;</code> <code>chaine</code><code>.</code><code>swapcase</code><code>()</code>\r\n<code> 7 </code><code>&quot;qUI EST-CE QUI N&#39;AIME PAS python?&quot;</code> <code># Devinez :) </code>\r\n<code> 8 </code><code>&gt;&gt;&gt;</code> <code>chaine</code><code>.</code><code>capitalize</code><code>()</code> <code>#Conversion du premier caract&egrave;re en majuscule</code>\r\n<code> 9 </code><code>&quot;Qui est-ce qui n&#39;aime pas python?&quot;</code>\r\n<code>10 </code><code>&gt;&gt;&gt;</code> <code>chaine</code><code>.</code><code>title</code><code>()</code> <code>#Conversion du premier caract&egrave;re de chaque mot en majuscule.</code>\r\n<code>11 </code><code>&quot;Qui Est-Ce Qui N&#39;Aime Pas Python?&quot;</code>\r\n<code>12 </code><code>&gt;&gt;&gt;</code> <code>chaine</code> <code>=</code> <code>&quot; j&#39;ai des espaces   &quot;</code>\r\n<code>13 </code><code>&gt;&gt;&gt;</code> <code>chaine</code><code>.</code><code>strip</code><code>()</code> <code>#Suppression des espaces &agrave; gauche et &agrave; droite</code>\r\n<code>14 </code><code>&quot;j&#39;ai des espaces&quot;</code>\r\n<code>15 </code><code>&gt;&gt;&gt;</code> <code>chaine</code><code>.</code><code>find</code><code>(</code><code>&#39;e&#39;</code><code>)</code> <code>#Recherche un sous-chaine dans une chaine de caract&egrave;res. Si\\</code>\r\n<code>16 </code> <code>la</code> <code>sous</code><code>-</code><code>chaine</code> <code>a</code> <code>&eacute;</code><code>t</code><code>&eacute;</code> <code>trouv</code><code>&eacute;</code><code>e</code><code>,</code> <code>l</code><code>&#39;indice de sa premi&egrave;re occurence est retourn&eacute;. D</code><code>\\</code>\r\n<code>17 </code><code>ans le cas contraire la valeur -1 est retourn&eacute;e.</code>\r\n<code>18 </code><code>7</code>\r\n<code>19 </code><code>&gt;&gt;&gt;</code> <code>chaine</code><code>.</code><code>find</code><code>(</code><code>&quot;z&quot;</code><code>)</code>\r\n<code>20 </code><code>-</code><code>1</code>\r\n<code>21 </code><code>&gt;&gt;&gt;</code> <code>chaine</code><code>.</code><code>strip</code><code>()</code><code>.</code><code>capitalize</code><code>()</code><code>.</code><code>replace</code><code>(</code><code>&#39;espaces&#39;</code><code>,</code> <code>&#39;femmes&#39;</code><code>)</code> <code>#Ce exemple parle d\\</code>\r\n<code>22 </code><code>e</code> <code>lui</code><code>-</code><code>m</code><code>&ecirc;</code><code>me</code> <code>:)</code>\r\n<code>23 </code><code>&quot;J&#39;ai des femmes &quot;</code>\r\n<code>24 </code><code>&gt;&gt;&gt;</code> <code>chaine</code> <code>=</code> <code>&quot;BARACK OBAMA&quot;</code>\r\n<code>25 </code><code>&gt;&gt;&gt;</code> <code>chaine</code><code>.</code><code>replace</code><code>(</code><code>&quot;A&quot;</code><code>,</code> <code>&quot;*&quot;</code><code>)</code>\r\n<code>26 </code><code>&#39;B*R*CK OB*M*&#39;</code>\r\n<code>27 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Comme vous l&rsquo;avez remarqu&eacute; avec <strong>chaine.strip().capitalize().replace(&lsquo;espaces&rsquo;, &lsquo;femmes&rsquo;)</strong>, nous avons la possibilit&eacute; de chainer les diff&eacute;rentes m&eacute;thodes. Ici on supprime premi&egrave;rement les espaces &agrave; gauche et &agrave; droite gr&acirc;ce &agrave; la methode <strong>strip()</strong>. Ensuite on met le premier caract&egrave;re en majuscule via la m&eacute;thode <strong>capitalize()</strong> et pour terminer pour le bon plaisir on remplace <strong>espaces</strong> par <strong>femmes</strong> en utilisant la m&eacute;thode <strong>replace()</strong>. Une petite remarque toutefois, ne tombez surtout pas dans l&rsquo;abus. Privili&eacute;giez toujours la lisibilit&eacute; &agrave; la paresse :)</p>\r\n\r\n<p>Pour plus de m&eacute;thodes, je vous invite &agrave; consulter la documentation.</p>\r\n\r\n<p>Attention ! les m&eacute;thodes appliqu&eacute;es &agrave; la cha&icirc;ne de caract&egrave;res ne la modifie en aucun cas. Elles renvoient tout simplement un nouvel objet (une nouvelle cha&icirc;ne de caract&egrave;res) modifi&eacute;.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>chaine</code> <code>=</code> <code>&quot;TEST&quot;</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>chaine</code><code>.</code><code>lower</code><code>()</code>\r\n<code>3 </code><code>&#39;test&#39;</code>\r\n<code>4 </code><code>&gt;&gt;&gt;</code> <code>chaine</code>\r\n<code>5 </code><code>&#39;TEST&#39;</code>\r\n<code>6 </code><code>&gt;&gt;&gt;</code> <code>chaine</code> <code>=</code> <code>chaine</code><code>.</code><code>lower</code><code>()</code>\r\n<code>7 </code><code>&gt;&gt;&gt;</code> <code>chaine</code>\r\n<code>8 </code><code>&#39;test&#39;</code>\r\n<code>9 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<h3>8.3 Les tuples</h3>\r\n\r\n<p>Au risque de me r&eacute;p&eacute;ter, les tuples tout comme les chaines de caract&egrave;res sont immuables, ce qui veut dire qu&rsquo;une fois cr&eacute;&eacute;s on ne peut pas les modifier.</p>\r\n\r\n<p>Un tuple peut contenir d&rsquo;autres tuples et n&rsquo;importe quel autre type de donn&eacute;es.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>mon_tuple</code> <code>=</code> <code>([</code><code>1</code><code>,</code><code>2</code><code>,</code><code>3</code><code>],</code> <code>True</code><code>,</code> <code>3.4</code><code>)</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>mon_tuple</code><code>[</code><code>0</code><code>]</code>\r\n<code>3 </code><code>[</code><code>1</code><code>,</code> <code>2</code><code>,</code> <code>3</code><code>]</code>\r\n<code>4 </code><code>&gt;&gt;&gt;</code> <code>mon_tuple</code><code>[</code><code>0</code><code>][</code><code>0</code><code>]</code>\r\n<code>5 </code><code>1</code>\r\n<code>6 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Nous avons toutefois la possibilit&eacute; de concat&eacute;ner plusieurs tuples.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>tuple1</code> <code>=</code> <code>(</code><code>1</code><code>,</code><code>2</code><code>,</code><code>3</code><code>)</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>tuple2</code> <code>=</code> <code>(</code><code>3</code><code>,</code><code>4</code><code>,</code><code>5</code><code>)</code>\r\n<code>3 </code><code>&gt;&gt;&gt;</code> <code>tuple1</code> <code>+</code> <code>tuple2</code>\r\n<code>4 </code><code>(</code><code>1</code><code>,</code> <code>2</code><code>,</code> <code>3</code><code>,</code> <code>3</code><code>,</code> <code>4</code><code>,</code> <code>5</code><code>)</code>\r\n<code>5 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Pour ajouter ainsi un seul &eacute;l&eacute;ment &agrave; un tuple d&eacute;j&agrave; cr&eacute;&eacute;, nous pouvons cr&eacute;er un nouveau tuple compos&eacute; de ce seul &eacute;l&eacute;ment, le concat&eacute;ner avec le premier tuple et ensuite l&rsquo;affecter &agrave; ce dernier.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>&gt;&gt;&gt;</code> <code>tuple_test</code> <code>=</code> <code>(</code><code>1</code><code>,</code><code>2</code><code>,</code><code>3</code><code>,</code><code>4</code><code>)</code>\r\n<code> 2 </code><code>&gt;&gt;&gt;</code> <code>tuple_new</code> <code>=</code> <code>(</code><code>5</code><code>,)</code> <code>#Sans la virgule, ce ne serait plus un tuple mais l&#39;entier \\</code>\r\n<code> 3 </code><code>5.</code>\r\n<code> 4 </code><code>&gt;&gt;&gt;</code> <code>tuple_test</code> <code>=</code> <code>tuple_test</code> <code>+</code> <code>tuple_new</code>\r\n<code> 5 </code><code>&gt;&gt;&gt;</code> <code>tuple_test</code>\r\n<code> 6 </code><code>(</code><code>1</code><code>,</code> <code>2</code><code>,</code> <code>3</code><code>,</code> <code>4</code><code>,</code> <code>5</code><code>)</code>\r\n<code> 7 </code><code>&gt;&gt;&gt;</code> <code>tuple_test</code> <code>=</code> <code>tuple_test</code><code>[</code><code>0</code><code>:</code><code>2</code><code>]</code> <code>+</code> <code>(</code><code>2.5</code><code>,)</code> <code>+</code> <code>tuple_test</code><code>[</code><code>3</code><code>:]</code>\r\n<code> 8 </code><code>&gt;&gt;&gt;</code> <code>tuple_test</code>\r\n<code> 9 </code><code>(</code><code>1</code><code>,</code> <code>2</code><code>,</code> <code>2.5</code><code>,</code> <code>4</code><code>,</code> <code>5</code><code>)</code>\r\n<code>10 </code><code>&gt;&gt;&gt;</code> <code>len</code><code>(</code><code>tuple_test</code><code>)</code>\r\n<code>11 </code><code>5</code>\r\n<code>12 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<h4>8.3.1 Parcourir un tuple</h4>\r\n\r\n<h5>Avec la boucle while</h5>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>tuple_test</code> <code>=</code> <code>(</code><code>1</code><code>,</code> <code>&#39;abc&#39;</code><code>,</code> <code>3.45</code><code>)</code>\r\n<code>2 </code><code>i</code> <code>=</code> <code>0</code>\r\n<code>3 </code>\r\n<code>4 </code><code>while</code><code>(</code> <code>i</code> <code>&lt;</code> <code>len</code><code>(</code><code>tuple_test</code> <code>)</code> <code>):</code>\r\n<code>5 </code>    <code>print</code><code>(</code><code>tuple_test</code> <code>[</code><code>i</code><code>])</code>\r\n<code>6 </code>    <code>i</code> <code>+=</code> <code>1</code>\r\n</pre>\r\n</div>\r\n\r\n<h5>Avec la boucle for</h5>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>tuple_test</code> <code>=</code> <code>(</code><code>1</code><code>,</code> <code>&#39;abc&#39;</code><code>,</code> <code>3.45</code><code>)</code>\r\n<code>2 </code>\r\n<code>3 </code><code>for</code> <code>element</code> <code>in</code> <code>tuple_test</code><code>:</code>\r\n<code>4 </code>    <code>print</code><code>(</code><code>element</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>tuple_test</code> <code>=</code> <code>(</code><code>1</code><code>,</code> <code>&#39;abc&#39;</code><code>,</code> <code>3.45</code><code>)</code>\r\n<code>2 </code>\r\n<code>3 </code><code>for</code> <code>i</code> <code>in</code> <code>range</code><code>(</code> <code>len</code><code>(</code><code>tuple_test</code><code>)</code> <code>):</code>\r\n<code>4 </code>    <code>print</code><code>(</code><code>tuple_test</code><code>[</code><code>i</code><code>])</code>\r\n</pre>\r\n</div>\r\n\r\n<h3>8.4 Les listes</h3>\r\n\r\n<p>Les listes sont muables, ce qui veut dire qu&rsquo;on peut les modifier une fois cr&eacute;&eacute;es. Cela repr&eacute;sente un avantage consid&eacute;rable par rapport aux tuples.</p>\r\n\r\n<p>Une liste compos&eacute;e de 10 fois le chiffre 3, ca vous tente ?</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>liste</code> <code>=</code> <code>[</code><code>3</code><code>,</code> <code>3</code><code>,</code> <code>3</code><code>,</code> <code>3</code><code>,</code> <code>3</code><code>,</code> <code>3</code><code>,</code> <code>3</code><code>,</code> <code>3</code><code>,</code> <code>3</code><code>,</code> <code>3</code><code>]</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>len</code><code>(</code><code>liste</code><code>)</code>\r\n<code>3 </code><code>10</code>\r\n<code>4 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Avouez que ca craint! Je vous propose une meilleure solution:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>liste</code> <code>=</code> <code>[</code><code>3</code><code>]</code><code>*</code><code>10</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>liste</code>\r\n<code>3 </code><code>[</code><code>3</code><code>,</code> <code>3</code><code>,</code> <code>3</code><code>,</code> <code>3</code><code>,</code> <code>3</code><code>,</code> <code>3</code><code>,</code> <code>3</code><code>,</code> <code>3</code><code>,</code> <code>3</code><code>,</code> <code>3</code><code>]</code>\r\n<code>4 </code><code>&gt;&gt;&gt;</code> <code>len</code><code>(</code><code>liste</code><code>)</code>\r\n<code>5 </code><code>10</code>\r\n<code>6 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>On peut utiliser &agrave; peu pr&egrave;s le m&ecirc;me principe avec les chaines de caract&egrave;res. Admirez:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>&quot;cou&quot;</code> <code>*</code> <code>2</code>\r\n<code>2 </code><code>&#39;coucou&#39;</code>\r\n<code>3 </code><code>&gt;&gt;&gt;</code> <code>&quot;cou&quot;</code> <code>*</code> <code>4</code>\r\n<code>4 </code><code>&#39;coucoucoucou&#39;</code>\r\n<code>5 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Le principe du slicing reste &eacute;galement valide:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>liste</code> <code>=</code> <code>list</code><code>(</code> <code>range</code><code>(</code><code>10</code><code>)</code> <code>)</code><code>#Nous sommes paresseux :)</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>liste</code>\r\n<code>3 </code><code>[</code><code>0</code><code>,</code> <code>1</code><code>,</code> <code>2</code><code>,</code> <code>3</code><code>,</code> <code>4</code><code>,</code> <code>5</code><code>,</code> <code>6</code><code>,</code> <code>7</code><code>,</code> <code>8</code><code>,</code> <code>9</code><code>]</code>\r\n<code>4 </code><code>&gt;&gt;&gt;</code> <code>liste</code><code>[</code><code>2</code><code>:]</code>\r\n<code>5 </code><code>[</code><code>2</code><code>,</code> <code>3</code><code>,</code> <code>4</code><code>,</code> <code>5</code><code>,</code> <code>6</code><code>,</code> <code>7</code><code>,</code> <code>8</code><code>,</code> <code>9</code><code>]</code>\r\n<code>6 </code><code>&gt;&gt;&gt;</code> <code>liste</code><code>[</code><code>3</code><code>:</code><code>6</code><code>]</code>\r\n<code>7 </code><code>[</code><code>3</code><code>,</code> <code>4</code><code>,</code> <code>5</code><code>]</code>\r\n<code>8 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<h4>8.4.1 Parcourir une liste</h4>\r\n\r\n<h5>Avec la boucle for</h5>\r\n\r\n<p>Je vous laisse ceci comme exercice.</p>\r\n\r\n<h5>Avec la boucle while</h5>\r\n\r\n<p>Je vous laisse cela &eacute;galement comme exercice :).</p>\r\n\r\n<h3>8.4.2 Le full slicing</h3>\r\n\r\n<p>Je vous avais dit qu&rsquo;on y reviendra sur cette &eacute;criture <strong>liste[:]</strong> encore appel&eacute;e <em>full slicing</em>. Le moment est enfin arriv&eacute;! Le <strong>full slicing</strong> nous permet de copier une liste dans une autre sans pour autant cr&eacute;er un alias. Ce qui permettra ainsi de modifier l&rsquo;une des deux listes ind&eacute;pendamment de l&rsquo; autre puisqu&rsquo;elles ne pointeront pas sur le m&ecirc;me objet.</p>\r\n\r\n<p>Un exemple:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>&gt;&gt;&gt;</code> <code>liste</code> <code>=</code> <code>[</code><code>&#39;Paris&#39;</code><code>,</code> <code>&#39;Rabbat&#39;</code><code>,</code> <code>&#39;Abidjan&#39;</code><code>]</code>\r\n<code> 2 </code><code>&gt;&gt;&gt;</code> <code>liste1</code> <code>=</code> <code>liste</code> <code>#liste et liste1 sont maintenant identiques. Modifier liste1 \\</code>\r\n<code> 3 </code><code>impliquera</code> <code>&eacute;</code><code>galement</code> <code>la</code> <code>modification</code> <code>de</code> <code>liste</code>\r\n<code> 4 </code><code>&gt;&gt;&gt;</code> <code>liste2</code> <code>=</code> <code>liste</code><code>[:]</code> <code>#On copie juste les valeurs de liste dans liste2. Ce sont \\</code>\r\n<code> 5 </code><code>donc</code> <code>deux</code> <code>listes</code> <code>distinctes</code>\r\n<code> 6 </code><code>&gt;&gt;&gt;</code> <code>liste1</code><code>[</code><code>1</code><code>]</code> <code>=</code> <code>&#39;Dakar&#39;</code> <code>#liste sera aussi modifi&eacute;e</code>\r\n<code> 7 </code><code>&gt;&gt;&gt;</code> <code>liste</code>\r\n<code> 8 </code><code>[</code><code>&#39;Paris&#39;</code><code>,</code> <code>&#39;Dakar&#39;</code><code>,</code> <code>&#39;Abidjan&#39;</code><code>]</code>\r\n<code> 9 </code><code>&gt;&gt;&gt;</code> <code>liste1</code>\r\n<code>10 </code><code>[</code><code>&#39;Paris&#39;</code><code>,</code> <code>&#39;Dakar&#39;</code><code>,</code> <code>&#39;Abidjan&#39;</code><code>]</code>\r\n<code>11 </code><code>&gt;&gt;&gt;</code> <code>liste2</code> <code>#liste2 n&#39;est pas du tout modifi&eacute;e</code>\r\n<code>12 </code><code>[</code><code>&#39;Paris&#39;</code><code>,</code> <code>&#39;Rabbat&#39;</code><code>,</code> <code>&#39;Abidjan&#39;</code><code>]</code>\r\n<code>13 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Les alias permettent de donner de multiples noms &agrave; un objet. Dans l&rsquo;exemple ci-dessus <strong>liste2</strong> est un alias.</p>\r\n\r\n<h3>8.5 Les m&eacute;thodes split et join</h3>\r\n\r\n<ul>\r\n	<li>La m&eacute;thode <strong>split()</strong> permet de convertir une cha&icirc;ne de caract&egrave;res en liste.</li>\r\n	<li>La m&eacute;thode <strong>join()</strong> permet de faire le contraire, c&rsquo;est-&agrave;-dire convertir une liste en cha&icirc;ne de caract&egrave;res.</li>\r\n</ul>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>chaine</code> <code>=</code> <code>&quot;Salut les amis&quot;</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>chaine</code><code>.</code><code>split</code><code>()</code>\r\n<code>3 </code><code>[</code><code>&#39;Salut&#39;</code><code>,</code> <code>&#39;les&#39;</code><code>,</code> <code>&#39;amis&#39;</code><code>]</code>\r\n<code>4 </code><code>&gt;&gt;&gt;</code> <code>liste</code> <code>=</code> <code>[</code><code>&#39;Salut&#39;</code><code>,</code> <code>&#39;Monsieur&#39;</code><code>]</code>\r\n<code>5 </code><code>&gt;&gt;&gt;</code> <code>&#39; &#39;</code><code>.</code><code>join</code><code>(</code><code>liste</code><code>)</code>\r\n<code>6 </code><code>&#39;Salut Monsieur&#39;</code>\r\n<code>7 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Vous avez peut-&ecirc;tre remarqu&eacute; que j&rsquo;employais le terme <strong>m&eacute;thodes</strong> en lieu et place de fonctions et de m&ecirc;me les m&eacute;thodes applicables aux chaines de caract&egrave;res que nous avons vues dans ce chapitre &eacute;taient appel&eacute;es un peu diff&eacute;remment par rapport aux fonctions que nous avons vues jusque-l&agrave; (Ex: <code>chaine.upper()</code> en lieu et place de <code>upper(chaine)</code>). En effet, cela est en rapport avec la notion de programmation orient&eacute;e objet en Python. Pour l&rsquo;instant, faites-moi confiance et essayez de juste accepter que vous devez les appeler ainsi. Nous verrons dans un chapitre d&eacute;di&eacute; le pourquoi.</p>\r\n\r\n<h3>8.6 R&eacute;sum&eacute;</h3>\r\n\r\n<p>Dans ce chapitre, nous avons appris que :</p>\r\n\r\n<ul>\r\n	<li>Les types non scalaires peuvent contenir plusieurs &eacute;l&eacute;ments &agrave; la fois, contrairement aux types scalaires qui eux ne peuvent contenir qu&rsquo;un seul &eacute;l&eacute;ment &agrave; la fois.</li>\r\n	<li>Les chaines de caract&egrave;res et les tuples sont dits immuables &eacute;tant donn&eacute; qu&rsquo;une fois d&eacute;finis, on ne peut pas changer la valeur d&rsquo;un &eacute;l&eacute;ment sp&eacute;cifique.</li>\r\n	<li>Les slices nous permettent de s&eacute;lectionner une partie ou toute une s&eacute;quence de donn&eacute;es.</li>\r\n	<li>En tapant help(str) au niveau de l&rsquo;interpr&eacute;teur, nous obtenons une liste exhaustive de m&eacute;thodes applicables aux chaines de caract&egrave;res.</li>\r\n	<li>Il est possible de concat&eacute;ner plusieurs tuples.</li>\r\n	<li>Pour d&eacute;clarer un tuple contenant un seul &eacute;l&eacute;ment, il nous faut rajouter une <strong>virgule</strong> &agrave; la fin. Ex: (&ldquo;toto&rdquo;,)</li>\r\n	<li>Les listes sont mutables, ce qui veut dire qu&rsquo;on peut les modifier une fois cr&eacute;&eacute;es. Cela repr&eacute;sente un avantage consid&eacute;rable par rapport aux tuples.</li>\r\n	<li>Le full slicing nous permet de copier une liste dans une autre sans pour autant cr&eacute;er un alias. Ce qui permettra ainsi de modifier l&rsquo;une des deux listes ind&eacute;pendamment de l&rsquo; autre puisqu&rsquo;elles ne pointeront pas sur le m&ecirc;me objet.</li>\r\n	<li>La m&eacute;thode split() permet de convertir une cha&icirc;ne de caract&egrave;res en liste.</li>\r\n	<li>La m&eacute;thode join() permet de faire le contraire, c&rsquo;est-&agrave;-dire convertir une liste en cha&icirc;ne de caract&egrave;res.</li>\r\n</ul>\r\n\r\n<h2>9. Modules &amp; Packages</h2>\r\n\r\n<p>Dans ce chapitre, nous continuerons notre exploration du concept du modularit&eacute; en d&eacute;crouvrant les notions de modules et de packages.</p>\r\n\r\n<h3>9.1 Les modules</h3>\r\n\r\n<h4>9.1.1 D&eacute;finition</h4>\r\n\r\n<p>Un module n&rsquo;est rien d&rsquo;autre qu&rsquo;un <strong>fichier</strong>. Dans un module l&rsquo;on peut regrouper plusieurs fonctions, variables et classes ayant un <strong>rapport</strong> entre elles. Par exemple dans un module <code>calcul</code>, on peut avoir une fonction qui permettra de faire l&rsquo;addition de deux nombres pass&eacute;s comme arguments, une autre qui se chargera de faire la multiplication et ainsi de suite&hellip; Apr&egrave;s lorsqu&rsquo;on voudra travailler avec les fonctionnalit&eacute;s offertes par le module <code>calcul</code>, il suffira de <strong>l&rsquo;importer</strong>.</p>\r\n\r\n<h4>9.1.2 La m&eacute;thode import</h4>\r\n\r\n<p>Python met &agrave; notre disposition un grand nombre de modules sans qu&rsquo;il ne soit n&eacute;cessaire d&rsquo;installer des biblioth&egrave;ques suppl&eacute;mentaires. Ces modules font partie de ce que l&rsquo;on appelle la <strong>Python Standard Library</strong> ou PSL (Librairie Standard Python pour les allergiques &agrave; la langue de Shakespeare). C&rsquo;est le cas par exemple du module <em>math</em> qui comporte comme son nom l&rsquo;indique des fonctions math&eacute;matiques, du module <em>random</em> qui contient un tas de fonctions ayant attraits &agrave; tout ce qui est al&eacute;atoire (le monde du hasard si vous le souhaitez).</p>\r\n\r\n<p>Pour utiliser des fonctions contenues dans un module, il va falloir en premier lieu importer ledit module au risque d&rsquo;avoir une erreur.</p>\r\n\r\n<p>Pour ce faire il suffit de taper:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>import</code> <code>nom_du_module</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Dans notre cas, si nous voulons utiliser le module <code>math</code> il nous faudra donc saisir:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>import</code> <code>math</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Une fois cette instruction ex&eacute;cut&eacute;e, Python va importer le module <code>math</code>, c&rsquo;est-&agrave;-dire que toutes les fonctions, variables, classes contenues dans ce module seront dor&eacute;navant accessibles.</p>\r\n\r\n<p>Au moment d&rsquo;importer votre module, Python va lire (ou cr&eacute;er s&rsquo;il n&rsquo;existe pas) un fichier <strong>.pyc</strong>. Depuis la version 3.2 de Python, ce fichier se trouve dans un dossier <strong>__pycache__</strong>. Ce fichier est g&eacute;n&eacute;r&eacute; par Python et contient le code compil&eacute; (ou presque) de votre module. Il ne s&rsquo;agit pas r&eacute;ellement de langage machine mais d&rsquo;un format que Python d&eacute;code un peu plus vite que le code que vous pouvez &eacute;crire. Tout ce que je viens de dire est purement technique, pas besoin de vous embrouiller avec tout ceci. Vous pourrez revenir lire cette partie si le moment o&ugrave; vous devez &eacute;pater vos confr&egrave;res se fait ressentir :).</p>\r\n\r\n<h4>9.1.3 Appel d&rsquo;une fonction d&rsquo;un module</h4>\r\n\r\n<p>Pour appeler une fonction d&rsquo;un module, il suffit de taper le nom du module suivi d&rsquo;un point <strong>&rdquo;.&rdquo;</strong>, suivi du nom de la fonction que l&rsquo;on souhaite appeler.</p>\r\n\r\n<p>Exemple:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>import</code> <code>math</code>\r\n<code>2 </code>\r\n<code>3 </code><code>print</code><code>(</code><code>math</code><code>.</code><code>ceil</code><code>(</code><code>1.5</code><code>))</code> <code># Affichera 2</code>\r\n<code>4 </code><code>print</code><code>(</code><code>math</code><code>.</code><code>floor</code><code>(</code><code>1.5</code><code>))</code> <code># Affichera 1</code>\r\n<code>5 </code><code>print</code><code>(</code><code>math</code><code>.</code><code>sqrt</code><code>(</code><code>4</code><code>))</code> <code># Affichera 2</code>\r\n</pre>\r\n</div>\r\n\r\n<ul>\r\n	<li>La fonction <strong>ceil</strong> du module math renvoie la valeur enti&egrave;re imm&eacute;diatement sup&eacute;rieure au nombre pass&eacute; en argument.</li>\r\n	<li>La fonction <strong>floor</strong> quant a elle renvoie la valeur enti&egrave;re imm&eacute;diatement inf&eacute;rieure au nombre pass&eacute; en argument.</li>\r\n	<li>La fonction sqrt (SQuare RooT ou racine carr&eacute;e) renvoie la racine carr&eacute;e du nombre pass&eacute; en argument.</li>\r\n</ul>\r\n\r\n<h4>9.1.4 La fonction help</h4>\r\n\r\n<p>La fonction <strong>help</strong> vous permet d&rsquo;avoir de la documentation que ce soit sur un module ou une fonction. Elle prend en argument la fonction ou le module sur lequel vous souhaitez obtenir de l&rsquo;aide.</p>\r\n\r\n<p>On peut &eacute;galement afficher la sp&eacute;cification d&rsquo;une fonction en tapant:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>print</code><code>(</code><code>nom_fonction</code><code>.</code><code>__doc__</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Vous vous rappelez du quiz haha :) ?</p>\r\n\r\n<p>Exemple:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>import</code> <code>math</code>\r\n<code>2 </code> <code>print</code><code>(</code> <code>math</code><code>.</code><code>sqrt</code><code>.</code><code>__doc__</code> <code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>sqrt</code><code>(</code><code>x</code><code>)</code>\r\n<code>2 </code>\r\n<code>3 </code><code>Return</code> <code>the</code> <code>square</code> <code>root</code> <code>of</code> <code>x</code><code>.</code>\r\n<code>4 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>En effet, la fonction <strong>help</strong> vous sera utile pour connaitre l&rsquo;ensemble des fonctions existantes pour un module et l&rsquo;utilit&eacute; de chacune d&rsquo;elles.</p>\r\n\r\n<p>Exemple:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>&gt;&gt;&gt;</code> <code>help</code><code>(</code><code>&quot;math&quot;</code><code>)</code>\r\n<code> 2 </code><code>Help</code> <code>on</code> <code>built</code><code>-</code><code>in</code> <code>module</code> <code>math</code><code>:</code>\r\n<code> 3 </code>\r\n<code> 4 </code><code>NAME</code>\r\n<code> 5 </code>    <code>math</code>\r\n<code> 6 </code>\r\n<code> 7 </code><code>DESCRIPTION</code>\r\n<code> 8 </code>    <code>This</code> <code>module</code> <code>is</code> <code>always</code> <code>available</code><code>.</code>  <code>It</code> <code>provides</code> <code>access</code> <code>to</code> <code>the</code>\r\n<code> 9 </code>    <code>mathematical</code> <code>functions</code> <code>defined</code> <code>by</code> <code>the</code> <code>C</code> <code>standard</code><code>.</code>\r\n<code>10 </code>\r\n<code>11 </code><code>FUNCTIONS</code>\r\n<code>12 </code>    <code>acos</code><code>(</code><code>...</code><code>)</code>\r\n<code>13 </code>        <code>acos</code><code>(</code><code>x</code><code>)</code>\r\n<code>14 </code>\r\n<code>15 </code>        <code>Return</code> <code>the</code> <code>arc</code> <code>cosine</code> <code>(</code><code>measured</code> <code>in</code> <code>radians</code><code>)</code> <code>of</code> <code>x</code><code>.</code>\r\n<code>16 </code>\r\n<code>17 </code>    <code>acosh</code><code>(</code><code>...</code><code>)</code>\r\n<code>18 </code>        <code>acosh</code><code>(</code><code>x</code><code>)</code>\r\n<code>19 </code>\r\n<code>20 </code>        <code>Return</code> <code>the</code> <code>hyperbolic</code> <code>arc</code> <code>cosine</code> <code>(</code><code>measured</code> <code>in</code> <code>radians</code><code>)</code> <code>of</code> <code>x</code><code>.</code>\r\n<code>21 </code>\r\n<code>22 </code>    <code>asin</code><code>(</code><code>...</code><code>)</code>\r\n<code>23 </code>        <code>asin</code><code>(</code><code>x</code><code>)</code>\r\n<code>24 </code>\r\n<code>25 </code>        <code>Return</code> <code>the</code> <code>arc</code> <code>sine</code> <code>(</code><code>measured</code> <code>in</code> <code>radians</code><code>)</code> <code>of</code> <code>x</code><code>.</code>\r\n<code>26 </code>\r\n<code>27 </code>    <code>asinh</code><code>(</code><code>...</code><code>)</code>\r\n<code>28 </code>        <code>asinh</code><code>(</code><code>x</code><code>)</code>\r\n<code>29 </code><code>...</code>\r\n<code>30 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>help</code><code>(</code><code>&quot;math.ceil&quot;</code><code>)</code>\r\n<code>2 </code><code>Help</code> <code>on</code> <code>built</code><code>-</code><code>in</code> <code>function</code> <code>ceil</code> <code>in</code> <code>math</code><code>:</code>\r\n<code>3 </code>\r\n<code>4 </code><code>math</code><code>.</code><code>ceil</code> <code>=</code> <code>ceil</code><code>(</code><code>...</code><code>)</code>\r\n<code>5 </code>    <code>ceil</code><code>(</code><code>x</code><code>)</code>\r\n<code>6 </code>\r\n<code>7 </code>    <code>Return</code> <code>the</code> <code>ceiling</code> <code>of</code> <code>x</code> <code>as</code> <code>an</code> <code>int</code><code>.</code>\r\n<code>8 </code>    <code>This</code> <code>is</code> <code>the</code> <code>smallest</code> <code>integral</code> <code>value</code> <code>&gt;=</code> <code>x</code><code>.</code>\r\n<code>9 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<h4>Les fameux undescores :)</h4>\r\n\r\n<p>Lorsqu&rsquo;on abordera la notion de programmation orient&eacute;e Objet en Python, faites-moi confiance, vous serez habitu&eacute;s &agrave; tous ces fameux underscores pr&eacute;sents &agrave; gauche et &agrave; droite&hellip;</p>\r\n\r\n<h4>9.1.5 Cr&eacute;er un alias d&rsquo;espace de noms</h4>\r\n\r\n<p>En tapant <code>import math</code>, nous cr&eacute;ons un espace de noms d&eacute;nomm&eacute; <strong>math</strong>, contenant les variables et les fonctions du module <code>math</code>.</p>\r\n\r\n<p>Un <strong>espace de noms ou namespace</strong> permet de regrouper certaines fonctions et variables sous un pr&eacute;fixe sp&eacute;cifique.</p>\r\n\r\n<p>Pour changer l&rsquo;espace de noms sous lequel le module sera import&eacute; il suffit de taper:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>import</code> <code>nom_du_module</code> <code>as</code> <code>nouveau_nom</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Les fonctions du module seront donc maintenant accessibles gr&acirc;ce &agrave; <strong>nouveau_nom.fonction</strong></p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>import</code> <code>math</code> <code>as</code> <code>m</code>\r\n<code>2 </code><code>print</code><code>(</code> <code>m</code><code>.</code><code>fabs</code><code>(</code><code>-</code><code>0.5</code><code>)</code> <code>)</code> <code>#Affiche 0.5</code>\r\n<code>3 </code>\r\n<code>4 </code><code>print</code><code>(</code> <code>math</code><code>.</code><code>fabs</code><code>(</code><code>-</code><code>0.5</code><code>)</code> <code>)</code> <code>#Affiche une erreur vu que le namespace math n&#39;existe p\\</code>\r\n<code>5 </code><code>lus</code><code>!</code>\r\n</pre>\r\n</div>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>Traceback</code> <code>(</code><code>most</code> <code>recent</code> <code>call</code> <code>last</code><code>):</code>\r\n<code>2 </code>  <code>File</code> <code>&quot;&lt;pyshell#2&gt;&quot;</code><code>,</code> <code>line</code> <code>1</code><code>,</code> <code>in</code> <code>&lt;</code><code>module</code><code>&gt;</code>\r\n<code>3 </code>    <code>print</code><code>(</code> <code>math</code><code>.</code><code>fabs</code><code>(</code><code>-</code><code>0.5</code><code>)</code> <code>)</code>\r\n<code>4 </code><code>NameError</code><code>:</code> <code>name</code> <code>&#39;math&#39;</code> <code>is</code> <code>not</code> <code>defined</code>\r\n<code>5 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>La fonction <strong>fabs</strong> du module <code>math</code> vous retourne la valeur absolue du nombre passe en argument. La valeur retourn&eacute;e est donc toujours positive.</p>\r\n\r\n<h4>Attention!</h4>\r\n\r\n<p>Pour rappel, le d&eacute;limiteur de la partie enti&egrave;re et la partie d&eacute;cimale d&rsquo;un nombre &agrave; virgule n&rsquo;est pas une virgule mais un <strong>point</strong>!</p>\r\n\r\n<h4>9.1.6 Importation de fonction sp&eacute;cifiques</h4>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>from</code> <code>nom_du_module</code> <code>import</code> <code>fonction1</code><code>,</code> <code>fonction2</code><code>,</code> <code>&hellip;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Avec cette instruction, tout le module ne sera pas import&eacute; mais seulement les fonctions dont on aura indiqu&eacute; le nom.</p>\r\n\r\n<p>Si l&rsquo;on veut importer tout un module avec cette syntaxe (ce qui revient &agrave; faire <strong>import nom_du_module</strong> avec tout de m&ecirc;me une petite diff&eacute;rence que nous verrons plus tard), il faudra taper:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>from</code> <code>nom_du_module</code> <code>import</code> <code>*</code>\r\n</pre>\r\n</div>\r\n\r\n<p>L&rsquo;&eacute;toile * signifie <strong>tout</strong>. En d&rsquo;autres termes, depuis le module <code>nom_du_module</code> importer tout.</p>\r\n\r\n<p>La seule diff&eacute;rence entre les techniques <strong>import</strong> et <strong>from-import</strong>, est que si nous utilisons la m&eacute;thode <strong>from &ndash; import</strong> pour importer des fonctions d&rsquo;un module celles-ci sont mises directement dans l&rsquo;espace de noms principal, ce qui revient &agrave; dire qu&rsquo;il ne serait plus question de pr&eacute;fixer la fonction avec le nom du module concern&eacute;.</p>\r\n\r\n<p>Voyons ceci avec des exemples pratiques:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>&gt;&gt;&gt;</code> <code>from</code> <code>math</code> <code>import</code> <code>ceil</code><code>,</code> <code>sqrt</code>\r\n<code> 2 </code><code>&gt;&gt;&gt;</code> <code>sqrt</code><code>(</code><code>25</code><code>)</code>\r\n<code> 3 </code><code>5.0</code>\r\n<code> 4 </code><code>&gt;&gt;&gt;</code> <code>ceil</code><code>(</code><code>5.7</code><code>)</code>\r\n<code> 5 </code><code>6</code>\r\n<code> 6 </code><code>&gt;&gt;&gt;</code> <code>fabs</code><code>(</code><code>12</code><code>)</code> <code>#Cette fonction n&#39;a pas &eacute;t&eacute; import&eacute;e</code>\r\n<code> 7 </code><code>Traceback</code> <code>(</code><code>most</code> <code>recent</code> <code>call</code> <code>last</code><code>):</code>\r\n<code> 8 </code>  <code>File</code> <code>&quot;&lt;pyshell#3&gt;&quot;</code><code>,</code> <code>line</code> <code>1</code><code>,</code> <code>in</code> <code>&lt;</code><code>module</code><code>&gt;</code>\r\n<code> 9 </code>    <code>fabs</code><code>(</code><code>12</code><code>)</code>\r\n<code>10 </code><code>NameError</code><code>:</code> <code>name</code> <code>&#39;fabs&#39;</code> <code>is</code> <code>not</code> <code>defined</code>\r\n<code>11 </code><code>&gt;&gt;&gt;</code> <code>math</code><code>.</code><code>ceil</code><code>(</code><code>0.5</code><code>)</code> <code>#Plus besoin de pr&eacute;fixe math</code>\r\n<code>12 </code><code>Traceback</code> <code>(</code><code>most</code> <code>recent</code> <code>call</code> <code>last</code><code>):</code>\r\n<code>13 </code>  <code>File</code> <code>&quot;&lt;pyshell#4&gt;&quot;</code><code>,</code> <code>line</code> <code>1</code><code>,</code> <code>in</code> <code>&lt;</code><code>module</code><code>&gt;</code>\r\n<code>14 </code>    <code>math</code><code>.</code><code>ceil</code><code>(</code><code>0.5</code><code>)</code>\r\n<code>15 </code><code>NameError</code><code>:</code> <code>name</code> <code>&#39;math&#39;</code> <code>is</code> <code>not</code> <code>defined</code>\r\n<code>16 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<h4>9.1.7 Cr&eacute;er son propre module</h4>\r\n\r\n<p>Comme je vous l&rsquo;avais dit, un module n&rsquo;est rien d&rsquo;autre qu&rsquo;un simple fichier python. Cr&eacute;ez donc un fichier <code>calcul.py</code> et ajoutez y le code suivant:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>&quot;&quot;&quot;Module contenant des fonctions pour les 4 op&eacute;rations arithm&eacute;tiques de base&quot;&quot;&quot;</code>\r\n<code> 2 </code>\r\n<code> 3 </code><code>def</code> <code>addition</code><code>(</code><code>a</code><code>,</code> <code>b</code><code>):</code>\r\n<code> 4 </code>    <code>return</code> <code>a</code> <code>+</code> <code>b</code>\r\n<code> 5 </code>\r\n<code> 6 </code><code>def</code> <code>soustraction</code><code>(</code><code>a</code><code>,</code> <code>b</code><code>):</code>\r\n<code> 7 </code>    <code>return</code> <code>a</code> <code>-</code> <code>b</code>\r\n<code> 8 </code>\r\n<code> 9 </code><code>def</code> <code>multiplication</code><code>(</code><code>a</code><code>,</code> <code>b</code><code>):</code>\r\n<code>10 </code>    <code>return</code> <code>a</code> <code>*</code> <code>b</code>\r\n<code>11 </code>\r\n<code>12 </code><code>def</code> <code>division</code><code>(</code><code>a</code><code>,</code> <code>b</code><code>):</code>\r\n<code>13 </code>    <code>if</code><code>(</code><code>b</code> <code>!=</code> <code>0</code><code>):</code>\r\n<code>14 </code>        <code>return</code> <code>a</code> <code>/</code> <code>b</code>\r\n<code>15 </code>    <code>else</code> <code>:</code>\r\n<code>16 </code>        <code>print</code><code>(</code><code>&quot;Division impossible&quot;</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Vu que notre fichier a pour nom <strong>calcul.py</strong>, le nom de notre module sera <strong>calcul</strong>. Souvenez vous que ce nom est implicite et est fonction du nom que vous donnerez &agrave; votre fichier.</p>\r\n\r\n<p>Maintenant que notre module a &eacute;t&eacute; cr&eacute;&eacute;, vous pouvez lancer votre programme comme si vous aviez affaire &agrave; un programme python habituel.</p>\r\n\r\n<p>Ensuite au niveau de l&rsquo;interpr&eacute;teur de commandes, tapez par exemple:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>&gt;&gt;&gt;</code> <code>help</code><code>(</code><code>&quot;calcul&quot;</code><code>)</code>\r\n<code> 2 </code><code>Help</code> <code>on</code> <code>module</code> <code>calcul</code><code>:</code>\r\n<code> 3 </code>\r\n<code> 4 </code><code>NAME</code>\r\n<code> 5 </code>    <code>calcul</code> <code>-</code> <code>Module</code> <code>contenant</code> <code>des</code> <code>fonctions</code> <code>pour</code> <code>les</code> <code>4</code> <code>op</code><code>&eacute;</code><code>rations</code> <code>arithm</code><code>&eacute;</code><code>tiques</code> \\\r\n<code> 6 </code><code>de</code> <code>base</code>\r\n<code> 7 </code>\r\n<code> 8 </code><code>FUNCTIONS</code>\r\n<code> 9 </code>    <code>addition</code><code>(</code><code>a</code><code>,</code> <code>b</code><code>)</code>\r\n<code>10 </code>\r\n<code>11 </code>    <code>division</code><code>(</code><code>a</code><code>,</code> <code>b</code><code>)</code>\r\n<code>12 </code>\r\n<code>13 </code>    <code>multiplication</code><code>(</code><code>a</code><code>,</code> <code>b</code><code>)</code>\r\n<code>14 </code>\r\n<code>15 </code>    <code>soustraction</code><code>(</code><code>a</code><code>,</code> <code>b</code><code>)</code>\r\n<code>16 </code>\r\n<code>17 </code><code>FILE</code>\r\n<code>18 </code>    <code>c</code><code>:</code>\\<code>users</code>\\<code>honore</code><code>.</code><code>h</code>\\<code>desktop</code>\\<code>calcul</code><code>.</code><code>py</code>\r\n<code>19 </code>\r\n<code>20 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<h4>9.1.8 Faire des tests &agrave; l&rsquo;int&eacute;rieur de son module</h4>\r\n\r\n<p>Il faudra rajouter une structure conditionnelle pour pouvoir faire des tests d&rsquo;ex&eacute;cution dans le module lui-m&ecirc;me.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code># test de la fonction addition</code>\r\n<code>2 </code><code>if</code><code>(</code><code>__name__</code> <code>==</code> <code>&quot;__main__&quot;</code><code>):</code>\r\n<code>3 </code>      <code>addition</code><code>(</code><code>1</code><code>,</code><code>5</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>La variable <strong>__name__</strong> existe d&egrave;s le lancement de l&rsquo;interpr&eacute;teur. Si elle vaut <strong>__main__</strong>, cela signifie que le fichier appel&eacute; est le fichier ex&eacute;cut&eacute;. Le code de test ne sera donc ex&eacute;cut&eacute; que lorsque qu&rsquo;on double-cliquera sur le fichier contenant le module.</p>\r\n\r\n<p>Pour des raisons d&rsquo;efficacit&eacute;, chaque module est import&eacute; une seule fois par ouverture de session de l&rsquo;interpr&eacute;teur. Ainsi si vous changez vos modules, vous devez red&eacute;marrer l&rsquo;interpr&eacute;teur ou si vous voulez juste tester un seul module de mani&egrave;re interactive, utilisez <strong>imp.reload()</strong>.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>import</code> <code>imp</code>\r\n<code>2 </code> <code>imp</code><code>.</code><code>reload</code><code>(</code><code>nom_du_module</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Encore une fois tout ce qui a &eacute;t&eacute; dit plus haut est purement technique et peut para&icirc;tre tr&egrave;s compliqu&eacute;. Ne vous efforcez pas &agrave; vouloir tout retenir :).</p>\r\n\r\n<p>Ce que j&rsquo;aimerais que vous puissiez retenir par contre est que ce code:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code># test de la fonction addition</code>\r\n<code>2 </code><code>if</code><code>(</code><code>__name__</code> <code>==</code> <code>&quot;__main__&quot;</code><code>):</code>\r\n<code>3 </code>      <code>addition</code><code>(</code><code>1</code><code>,</code><code>5</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>sera ex&eacute;cut&eacute; si et seulement si c&rsquo;est notre fichier <strong>calcul.py</strong> qui est ex&eacute;cut&eacute;. Dans le cas o&ugrave; on importe notre module, &agrave; partir d&rsquo;un autre fichier, ce code ne sera pas ex&eacute;cut&eacute;.</p>\r\n\r\n<p>Vous trouverez la plupart du temps sur le net des programmes Python basiques se pr&eacute;sentant comme ceci:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>def</code> <code>main</code><code>():</code>\r\n<code>2 </code>    <code>print</code><code>(</code><code>&quot;Hello, World&quot;</code><code>)</code>\r\n<code>3 </code>\r\n<code>4 </code><code>if</code><code>(</code><code>__name__</code> <code>=</code> <code>&quot;__main__&quot;</code><code>):</code>\r\n<code>5 </code>    <code>main</code><code>()</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Ne soyez donc pas du tout paniqu&eacute;. Vous &ecirc;tes maintenant en mesure de tout comprendre :).</p>\r\n\r\n<ul>\r\n	<li>On a tout simplement d&eacute;fini une fonction <strong>main()</strong> contenant notre code principal.</li>\r\n	<li>Ensuite, on sp&eacute;cifie que si le fichier appel&eacute; est le fichier ex&eacute;cut&eacute; (en gros si notre fichier est ex&eacute;cut&eacute; directement et non via importation) alors il faudra ex&eacute;cuter le contenu de la m&eacute;thode main().</li>\r\n</ul>\r\n\r\n<p>Si cela vous semble un peu compliqu&eacute;, donnez vous le temps d&rsquo;assimiler tout ceci. Ne soyez pas trop dur envers vous-m&ecirc;me. Vous pouvez faire une petite pause et pourquoi pas relire cette partie. La technique que j&rsquo;utilise lorsque je n&rsquo;arrive pas &agrave; comprendre quelque chose, c&rsquo;est de refaire cette m&ecirc;me chose plusieurs fois. A un moment donn&eacute; cela devient un automatisme. Je ne veux surtout pas dire qu&rsquo;il faudrait apprendre le code par c&oelig;ur sans le comprendre, loin de l&agrave; :). Ce que je veux dire, c&rsquo;est que la r&eacute;p&eacute;tition est tr&egrave;s souvent un bon moyen d&rsquo;apprentissage.</p>\r\n\r\n<h3>9.2 Les packages</h3>\r\n\r\n<h4>9.2.1 D&eacute;finition</h4>\r\n\r\n<ul>\r\n	<li>Les modules permettent de regrouper comme on l&rsquo;a vu pr&eacute;c&eacute;demment des fonctions, des classes, des variables&hellip;</li>\r\n	<li>Un package quant &agrave; lui permet de regrouper un ou plusieurs modules, de pr&eacute;f&eacute;rence ayant un rapport entre eux. Ils permettent entre autres, de hi&eacute;rarchiser nos programmes.</li>\r\n	<li>Un package peut contenir plusieurs autres packages.</li>\r\n	<li>A la diff&eacute;rence des modules qui sont des fichiers, les packages quant &agrave; eux sont des r&eacute;pertoires (des dossiers). Certains programmeurs appellent les packages, des biblioth&egrave;ques.</li>\r\n</ul>\r\n\r\n<h4>9.2.2 Importer un package</h4>\r\n\r\n<p>Un package s&rsquo;importe de la m&ecirc;me mani&egrave;re qu&rsquo;un module. On utilise donc soit les mots-cl&eacute;s <strong>from-import</strong> combin&eacute;s ou soit le mot-cl&eacute; <strong>import</strong> tout seul.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>import</code> <code>nom_package</code>\r\n<code>2 </code><code>from</code> <code>nom_package</code> <code>import</code> <code>mon_module</code>\r\n</pre>\r\n</div>\r\n\r\n<h4>9.2.3 Cr&eacute;er un package</h4>\r\n\r\n<p>On commence par cr&eacute;er un r&eacute;pertoire dans le m&ecirc;me dossier que notre programme python.</p>\r\n\r\n<p>Pour que Python sache que ce r&eacute;pertoire est un package, il faudra cr&eacute;er &agrave; l&rsquo;int&eacute;rieur de ce dernier un fichier nomm&eacute; <strong>__init__.py</strong>. Le contenu de ce fichier peut &ecirc;tre vide mais il est obligatoire qu&rsquo;il puisse exister pour que Python sache qu&rsquo;il s&rsquo;agit d&rsquo;un package.</p>\r\n\r\n<p>Vous pouvez par la suite cr&eacute;er dans ce r&eacute;pertoire vos modules ou cr&eacute;er d&rsquo;autres sous-packages qui devront &eacute;galement contenir un fichier <strong>__init__.py</strong>.</p>\r\n\r\n<p>Voil&agrave; c&rsquo;est ici que se termine notre exploration du concept de modularit&eacute;.</p>\r\n\r\n<h3>9.3 R&eacute;sum&eacute;</h3>\r\n\r\n<ul>\r\n	<li>Une fonction vous permet de regrouper un bloc d&rsquo;instructions que vous pourrez appeler comme vous le souhaitez et autant de fois que vous le souhaitez.</li>\r\n	<li>Un module n&rsquo;est rien d&rsquo;autre qu&rsquo;un fichier qui va nous permettre de regrouper nos fonctions, variables et classes ayant un rapport entre elles.</li>\r\n	<li>Un package est un dossier qui va permettre de regrouper un ensemble de modules ayant un rapport entre eux.</li>\r\n	<li>Un package peut contenir d&rsquo;autres packages.</li>\r\n</ul>\r\n\r\n<h2>10. Jeu de capitales</h2>\r\n\r\n<h3>10.1 Le principe du jeu</h3>\r\n\r\n<p>Le jeu que nous allons r&eacute;aliser dans ce chapitre sera un tout peu plus fun que ceux des chapitres pr&eacute;c&eacute;dents. Il consistera &agrave; afficher une s&eacute;rie al&eacute;atoire de pays et demander &agrave; l&rsquo;utilisateur de nous fournir les capitales respectives de ces pays. Si l&rsquo;utilisateur nous donne la bonne r&eacute;ponse, nous afficherons tout simplement &ldquo;Bonne r&eacute;ponse&rdquo; et incr&eacute;menterons son score actuel qui lui sera affich&eacute; &agrave; la fin de la s&eacute;rie. Si par contre, la r&eacute;ponse donn&eacute;e est fausse, ce sera l&rsquo;occasion pour nous de lui d&eacute;montrer notre super niveau en culture g&eacute;n&eacute;rale en lui affichant la r&eacute;ponse qu&rsquo;il aurait fallu donner.</p>\r\n\r\n<p>Ainsi si je choisis comme pays la <strong>France</strong> et que je vous demande sa capitale, vous me r&eacute;pondrez je parie <strong>Paris</strong>. (Belles rimes j&rsquo;avoue :) )</p>\r\n\r\n<p>Pour que ce soit un peu plus clair, je vous pr&eacute;sente un exemple d&rsquo;ex&eacute;cution de notre programme:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>&gt;&gt;&gt;</code>\r\n<code> 2 </code><code>Quelle</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>ce</code> <code>pays</code><code>:</code> <code>Gabon</code><code>?</code>\r\n<code> 3 </code><code>Libreville</code>\r\n<code> 4 </code><code>Bonne</code> <code>r</code><code>&eacute;</code><code>ponse</code><code>!</code>\r\n<code> 5 </code><code>Quelle</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>ce</code> <code>pays</code><code>:</code> <code>Burkina</code> <code>Faso</code><code>?</code>\r\n<code> 6 </code><code>OuAGADOUgou</code>\r\n<code> 7 </code><code>Bonne</code> <code>r</code><code>&eacute;</code><code>ponse</code><code>!</code>\r\n<code> 8 </code><code>Quelle</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>ce</code> <code>pays</code><code>:</code> <code>Mozambique</code><code>?</code>\r\n<code> 9 </code><code>Je</code> <code>ne</code> <code>sais</code> <code>pas</code> <code>:)</code>\r\n<code>10 </code><code>Mauvaise</code> <code>r</code><code>&eacute;</code><code>ponse</code><code>!</code> <code>Il</code> <code>fallait</code> <code>r</code><code>&eacute;</code><code>pondre</code><code>:</code> <code>Maputo</code>\r\n<code>11 </code><code>Quelle</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>ce</code> <code>pays</code><code>:</code> <code>France</code><code>?</code>\r\n<code>12 </code><code>Paris</code>\r\n<code>13 </code><code>Bonne</code> <code>r</code><code>&eacute;</code><code>ponse</code><code>!</code>\r\n<code>14 </code><code>Quelle</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>ce</code> <code>pays</code><code>:</code> <code>S</code><code>&eacute;</code><code>n</code><code>&eacute;</code><code>gal</code><code>?</code>\r\n<code>15 </code><code>Dakar</code>\r\n<code>16 </code><code>Bonne</code> <code>r</code><code>&eacute;</code><code>ponse</code><code>!</code>\r\n<code>17 </code><code>C</code><code>&#39;est termin&eacute;! &lt;&lt;Score: 4/5 &gt;&gt;</code>\r\n<code>18 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Alors comme dans le <a href="https://leanpub.com/premiers-pas-avec-python/read#premier-jeu">chapitre 4</a>, bien avant de se lancer &agrave; t&ecirc;te baiss&eacute;e dans l&rsquo;&eacute;criture de notre script, il va nous falloir r&eacute;pondre dans un premier temps &agrave; un bon nombre de questions.</p>\r\n\r\n<p>Comment stocker en m&eacute;moire nos diff&eacute;rents pays et leurs capitales respectives? Comment choisir une valeur de mani&egrave;re al&eacute;atoire en Python? Comment comparer deux valeurs (Nous en aurons besoin afin de d&eacute;terminer si la r&eacute;ponse entr&eacute;e par l&rsquo;utilisateur est exacte ou non)?</p>\r\n\r\n<p>Ce qui est int&eacute;ressant dans ces questions, c&rsquo;est que vous avez <strong>quasiment</strong> toutes les r&eacute;ponses :).</p>\r\n\r\n<ul>\r\n	<li>Comment stocker en m&eacute;moire nos diff&eacute;rents pays et leurs capitales respectives? Un dictionnaire pourquoi pas fera l&rsquo;affaire.</li>\r\n	<li>Comment comparer deux valeurs ? Les op&eacute;rateurs de comparaison nous seront d&rsquo;une grande utilit&eacute;.</li>\r\n	<li>Comment choisir une valeur de mani&egrave;re al&eacute;atoire en Python? Le module <strong>random</strong>.</li>\r\n</ul>\r\n\r\n<h4>Jamais tu ne nous as parl&eacute; de ce module random?</h4>\r\n\r\n<p>Regardez le titre de la prochaine section. Ah ah :)</p>\r\n\r\n<h3>10.2 Le module random</h3>\r\n\r\n<p>Lors du pr&eacute;c&eacute;dent chapitre, nous nous sommes attard&eacute;s sur un seul module: le module <strong>math</strong>. A l&rsquo;instar de ce module, Python met &agrave; votre disposition un tas d&rsquo;autres modules: le module <strong>datetime</strong> vous permettant de g&eacute;rer le temps (date, heure&hellip;), le module <strong>fractions</strong> vous permettant de g&eacute;rer les fractions, le module <strong>ftplib</strong> pour vous amuser un tout petit peu avec le protocole ftp et bien d&rsquo;autres.</p>\r\n\r\n<h4>Liste de tous les modules</h4>\r\n\r\n<p>Pour avoir une liste exhaustive des modules python disponibles visiter ce lien <a href="https://docs.python.org/3/py-modindex.html">https://docs.python.org/3/py-modindex.html</a></p>\r\n\r\n<p>Dans cette section, nous nous int&eacute;resserons particuli&egrave;rement au module <strong>random</strong> qui comme vous l&rsquo;aurez peut &ecirc;tre devin&eacute; va nous permettre de g&eacute;n&eacute;rer des nombres pseudo-al&eacute;atoires.</p>\r\n\r\n<p>En th&eacute;orie, un ordinateur ne conna&icirc;t pas le hasard. Mais tout ce que vous devez savoir, c&rsquo;est qu&rsquo;il fera de son mieux pour simuler ce monde du hasard. Des algorithmes hyper-sophistiqu&eacute;s ont donc d&eacute;j&agrave; &eacute;t&eacute; mis en place pour g&eacute;rer tous ces mushinishis (des valeurs de mani&egrave;re al&eacute;atoire). Vous n&rsquo;aurez donc pas &agrave; vous en soucier. Utilisez la m&eacute;thode appropri&eacute;e et vous aurez un r&eacute;sultat appropri&eacute;. Aussi simple que cela!</p>\r\n\r\n<p>Assez parl&eacute;, d&eacute;couvrons par la pratique ce fameux module <code>random</code>.</p>\r\n\r\n<p>Bien avant de faire nos petits tests, je tiens tout d&rsquo;abord &agrave; vous faire une petite d&eacute;claration:</p>\r\n\r\n<p>La documentation sur le module <code>random</code> est disponible &agrave; <a href="https://docs.python.org/3/library/random.html#module-random">cette adresse</a> Celle-ci contient &eacute;galement des exemples concrets d&rsquo;utilisation.</p>\r\n\r\n<p>Expliquer donc en long et en large chacune des fonctions de ce module, serait &agrave; mon avis anti-p&eacute;dagogique! Si un jour vous postez sur un forum un message du genre: A quoi sert la fonction <code>choice</code> du module random? ou encore combien d&rsquo;arguments prend la fonction <code>randrange</code> du module <code>random</code>? Vous aurez sans risque de me tromper cette r&eacute;ponse: <strong>RTFM (Read The Fucking Manual)</strong>. Petite traduction: Merci de bien vouloir lire la documentation SVP. (Ceux qui comprennent l&rsquo;anglais se mettront &agrave; rire :) )</p>\r\n\r\n<p>Ce que je veux donc dire, c&rsquo;est que vous devez toujours vous servir de la documentation en premier recours si vous bloquez sur quoi que ce soit. En g&eacute;n&eacute;ral, vous y trouverez votre r&eacute;ponse.</p>\r\n\r\n<h4>10.2.1 La fonction random</h4>\r\n\r\n<p>Synopsis: <strong>random.random()</strong></p>\r\n\r\n<p>La fonction random du module random nous retourne une valeur al&eacute;atoire (ici un nombre r&eacute;el) entre <code>0.0</code> et <code>1.0</code>. 1.0 &eacute;tant exclus. Ainsi math&eacute;matiquement parlant on a cet intervale [0.0, 1.0[.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>&gt;&gt;&gt;</code> <code>import</code> <code>random</code> <code>#On importe le module random</code>\r\n<code> 2 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>random</code><code>()</code>\r\n<code> 3 </code><code>0.6879157636029883</code>\r\n<code> 4 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>random</code><code>()</code>\r\n<code> 5 </code><code>0.739628459893686</code>\r\n<code> 6 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>random</code><code>()</code>\r\n<code> 7 </code><code>0.10960434825810839</code>\r\n<code> 8 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>random</code><code>()</code>\r\n<code> 9 </code><code>0.9443851801331767</code>\r\n<code>10 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>random</code><code>()</code>\r\n<code>11 </code><code>0.22761731499433735</code>\r\n<code>12 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>random</code><code>()</code>\r\n<code>13 </code><code>0.9221146293989106</code>\r\n<code>14 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>random</code><code>()</code>\r\n<code>15 </code><code>0.40612880708816845</code>\r\n<code>16 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>random</code><code>()</code>\r\n<code>17 </code><code>0.5208338016201847</code>\r\n<code>18 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<h4>10.2.2 La fonction randrange</h4>\r\n\r\n<p>Synopsis: <strong>random.randrange(stop)</strong> ou <strong>random.randrange(start, stop[, step])</strong></p>\r\n\r\n<p>La fonction <code>randrange</code> fonctionne &agrave; peu pr&egrave;s de la m&ecirc;me mani&egrave;re que la fonction <code>range</code> que nous avons eu &agrave; &eacute;tudier lors du chapitre consacr&eacute; aux boucles. Pour preuve, elles ont les m&ecirc;mes param&egrave;tres: le d&eacute;but, la fin, le pas.</p>\r\n\r\n<p>Voici quelques exemples:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>&gt;&gt;&gt;</code> <code>import</code> <code>random</code> <code>#Toujours importer le module avant de l&#39;utiliser</code>\r\n<code> 2 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>randrange</code><code>(</code><code>3</code><code>)</code> <code>#g&eacute;n&egrave;re un nombre al&eacute;atoire entre 0,1,2</code>\r\n<code> 3 </code><code>1</code>\r\n<code> 4 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>randrange</code><code>(</code><code>3</code><code>)</code>\r\n<code> 5 </code><code>2</code>\r\n<code> 6 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>randrange</code><code>(</code><code>3</code><code>)</code>\r\n<code> 7 </code><code>2</code>\r\n<code> 8 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>randrange</code><code>(</code><code>4</code><code>,</code> <code>9</code><code>)</code> <code>#g&eacute;n&egrave;re un nombre al&eacute;atoire entre 4,5,6,78</code>\r\n<code> 9 </code><code>7</code>\r\n<code>10 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>randrange</code><code>(</code><code>0</code><code>,</code> <code>1</code><code>)</code> <code>#g&eacute;n&egrave;re un nombre al&eacute;atoire entre 0 et 1 [1 exclus]. \\</code>\r\n<code>11 </code><code>On</code> <code>aura</code> <code>donc</code> <code>toujours</code> <code>0</code>\r\n<code>12 </code><code>0</code>\r\n<code>13 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>randrange</code><code>(</code><code>0</code><code>,</code> <code>1</code><code>)</code>\r\n<code>14 </code><code>0</code>\r\n<code>15 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>randrange</code><code>(</code><code>0</code><code>,</code> <code>10</code><code>,</code> <code>3</code><code>)</code> <code>#g&eacute;n&egrave;re un nombre al&eacute;atoire entre 0,3,6,9</code>\r\n<code>16 </code><code>0</code>\r\n<code>17 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>randrange</code><code>(</code><code>0</code><code>,</code> <code>10</code><code>,</code> <code>3</code><code>)</code>\r\n<code>18 </code><code>6</code>\r\n<code>19 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>randrange</code><code>(</code><code>0</code><code>,</code> <code>10</code><code>,</code> <code>3</code><code>)</code>\r\n<code>20 </code><code>9</code>\r\n<code>21 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<h4>10.2.3 La fonction randint</h4>\r\n\r\n<p>Synopsis: <strong>random.randint(a, b)</strong></p>\r\n\r\n<p>La fonction <code>randint</code> vous permet de g&eacute;n&egrave;rer une valeur entre a et b, mais cette fois-ci b est inclus dans l&rsquo;intervalle. L&rsquo;intervale sera donc [a, b].</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>&gt;&gt;&gt;</code> <code>import</code> <code>random</code>\r\n<code> 2 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>randint</code><code>(</code><code>0</code><code>,</code><code>1</code><code>)</code>\r\n<code> 3 </code><code>1</code>\r\n<code> 4 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>randint</code><code>(</code><code>0</code><code>,</code><code>1</code><code>)</code>\r\n<code> 5 </code><code>0</code>\r\n<code> 6 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>randint</code><code>(</code><code>10</code><code>,</code><code>100</code><code>)</code>\r\n<code> 7 </code><code>47</code>\r\n<code> 8 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>randint</code><code>(</code><code>10</code><code>,</code><code>100</code><code>)</code>\r\n<code> 9 </code><code>62</code>\r\n<code>10 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<h4>10.2.4 La fonction choice</h4>\r\n\r\n<p>Synopsis: <strong>random.choice(sequence)</strong></p>\r\n\r\n<p>La fonction <code>choice</code> que nous allons utiliser dans notre programme pour le jeu de capitales vous retourne une valeur al&eacute;atoire &agrave; partir d&rsquo;une s&eacute;quence de valeurs non vide fournie en argument. On pourra donc passer en argument un tuple, une liste, une chaine de caract&egrave;res&hellip;</p>\r\n\r\n<h4>Pourquoi une chaine de caract&egrave;res?</h4>\r\n\r\n<p>Souvenez-vous qu&rsquo;une chaine de caract&egrave;res n&rsquo;est rien d&rsquo;autre qu&rsquo;une s&eacute;quence de caract&egrave;res.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>choice</code><code>(</code><code>&#39;123456&#39;</code><code>)</code>\r\n<code> 2 </code><code>&#39;5&#39;</code>\r\n<code> 3 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>choice</code><code>(</code><code>&#39;123456&#39;</code><code>)</code>\r\n<code> 4 </code><code>&#39;4&#39;</code>\r\n<code> 5 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>choice</code><code>(</code><code>&#39;123456&#39;</code><code>)</code>\r\n<code> 6 </code><code>&#39;5&#39;</code>\r\n<code> 7 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>choice</code><code>(</code><code>&#39;123456&#39;</code><code>)</code>\r\n<code> 8 </code><code>&#39;2&#39;</code>\r\n<code> 9 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>choice</code><code>(</code><code>1</code><code>,</code><code>2</code><code>,</code><code>4</code><code>)</code> <code>#Ici les parenth&egrave;ses sont obligatoires pour un tuple</code>\r\n<code>10 </code><code>Traceback</code> <code>(</code><code>most</code> <code>recent</code> <code>call</code> <code>last</code><code>):</code>\r\n<code>11 </code>  <code>File</code> <code>&quot;&lt;pyshell#21&gt;&quot;</code><code>,</code> <code>line</code> <code>1</code><code>,</code> <code>in</code> <code>&lt;</code><code>module</code><code>&gt;</code>\r\n<code>12 </code>    <code>random</code><code>.</code><code>choice</code><code>(</code><code>1</code><code>,</code><code>2</code><code>,</code><code>4</code><code>)</code>\r\n<code>13 </code><code>TypeError</code><code>:</code> <code>choice</code><code>()</code> <code>takes</code> <code>2</code> <code>positional</code> <code>arguments</code> <code>but</code> <code>4</code> <code>were</code> <code>given</code>\r\n<code>14 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>choice</code><code>((</code><code>1</code><code>,</code><code>2</code><code>,</code><code>4</code><code>))</code>\r\n<code>15 </code><code>2</code>\r\n<code>16 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>choice</code><code>((</code><code>1</code><code>,</code><code>2</code><code>,</code><code>4</code><code>))</code>\r\n<code>17 </code><code>4</code>\r\n<code>18 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>choice</code><code>([</code><code>&quot;toto&quot;</code><code>,</code><code>&quot;tata&quot;</code><code>,</code><code>&quot;mama&quot;</code><code>])</code>\r\n<code>19 </code><code>&#39;mama&#39;</code>\r\n<code>20 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>choice</code><code>([</code><code>&quot;toto&quot;</code><code>,</code><code>&quot;tata&quot;</code><code>,</code><code>&quot;mama&quot;</code><code>])</code>\r\n<code>21 </code><code>&#39;toto&#39;</code>\r\n<code>22 </code><code>&gt;&gt;&gt;</code> <code>data</code> <code>=</code> <code>{</code><code>&quot;France&quot;</code> <code>:</code> <code>&quot;Paris&quot;</code><code>,</code> <code>&quot;Gabon&quot;</code> <code>:</code> <code>&quot;Libreville&quot;</code><code>,</code> <code>&quot;Chine&quot;</code> <code>:</code> <code>&quot;Pekin&quot;</code><code>}</code>\r\n<code>23 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>choice</code><code>(</code><code>data</code><code>)</code>\r\n<code>24 </code><code>Traceback</code> <code>(</code><code>most</code> <code>recent</code> <code>call</code> <code>last</code><code>):</code>\r\n<code>25 </code>  <code>File</code> <code>&quot;&lt;pyshell#4&gt;&quot;</code><code>,</code> <code>line</code> <code>1</code><code>,</code> <code>in</code> <code>&lt;</code><code>module</code><code>&gt;</code>\r\n<code>26 </code>    <code>random</code><code>.</code><code>choice</code><code>(</code><code>data</code><code>)</code>\r\n<code>27 </code>  <code>File</code> <code>&quot;C:\\Python34\\lib</code><code>\\r</code><code>andom.py&quot;</code><code>,</code> <code>line</code> <code>256</code><code>,</code> <code>in</code> <code>choice</code>\r\n<code>28 </code>    <code>return</code> <code>seq</code><code>[</code><code>i</code><code>]</code>\r\n<code>29 </code><code>KeyError</code><code>:</code> <code>0</code>\r\n<code>30 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>choice</code><code>(</code><code>data</code><code>.</code><code>keys</code><code>())</code>\r\n<code>31 </code><code>Traceback</code> <code>(</code><code>most</code> <code>recent</code> <code>call</code> <code>last</code><code>):</code>\r\n<code>32 </code>  <code>File</code> <code>&quot;&lt;pyshell#13&gt;&quot;</code><code>,</code> <code>line</code> <code>1</code><code>,</code> <code>in</code> <code>&lt;</code><code>module</code><code>&gt;</code>\r\n<code>33 </code>    <code>random</code><code>.</code><code>choice</code><code>(</code><code>data</code><code>.</code><code>keys</code><code>())</code>\r\n<code>34 </code>  <code>File</code> <code>&quot;C:\\Python34\\lib</code><code>\\r</code><code>andom.py&quot;</code><code>,</code> <code>line</code> <code>256</code><code>,</code> <code>in</code> <code>choice</code>\r\n<code>35 </code>    <code>return</code> <code>seq</code><code>[</code><code>i</code><code>]</code>\r\n<code>36 </code><code>TypeError</code><code>:</code> <code>&#39;dict_keys&#39;</code> <code>object</code> <code>does</code> <code>not</code> <code>support</code> <code>indexing</code>\r\n<code>37 </code><code>&gt;&gt;&gt;</code> <code>data</code><code>.</code><code>keys</code><code>()</code>\r\n<code>38 </code><code>dict_keys</code><code>([</code><code>&#39;Gabon&#39;</code><code>,</code> <code>&#39;Chine&#39;</code><code>,</code> <code>&#39;France&#39;</code><code>])</code>\r\n<code>39 </code><code>&gt;&gt;&gt;</code> <code>data</code><code>.</code><code>values</code><code>()</code>\r\n<code>40 </code><code>dict_values</code><code>([</code><code>&#39;Libreville&#39;</code><code>,</code> <code>&#39;Pekin&#39;</code><code>,</code> <code>&#39;Paris&#39;</code><code>])</code>\r\n<code>41 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>choice</code><code>(</code><code>list</code><code>(</code><code>data</code><code>))</code>\r\n<code>42 </code><code>&#39;Gabon&#39;</code>\r\n<code>43 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>choice</code><code>(</code><code>list</code><code>(</code><code>data</code><code>.</code><code>keys</code><code>()))</code>\r\n<code>44 </code><code>&#39;Chine&#39;</code>\r\n<code>45 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>choice</code><code>(</code><code>list</code><code>(</code><code>data</code><code>.</code><code>values</code><code>()))</code>\r\n<code>46 </code><code>&#39;Libreville&#39;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Les premiers exemples sont comme vous pouvez le voir, assez faciles &agrave; comprendre. Les choses commencent &agrave; se compliquer &agrave; la ligne o&ugrave; nous d&eacute;clarons notre fameux dictionnaire <strong>data</strong>.</p>\r\n\r\n<p>En tapant:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>data</code> <code>=</code> <code>{</code><code>&quot;France&quot;</code> <code>:</code> <code>&quot;Paris&quot;</code><code>,</code> <code>&quot;Gabon&quot;</code> <code>:</code> <code>&quot;Libreville&quot;</code><code>,</code> <code>&quot;Chine&quot;</code> <code>:</code> <code>&quot;Pekin&quot;</code><code>}</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>choice</code><code>(</code><code>data</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>on a une erreur parce que tout simplement un dictionnaire n&rsquo;est pas une s&eacute;quence de valeurs. Rappelez-vous je vous avais dit qu&rsquo;un dictionnaire n&rsquo;&eacute;tait rien d&rsquo;autre qu&rsquo;un ensemble de couples cl&eacute;-valeur. L&rsquo;erreur est donc dans ce cas justifi&eacute;e.</p>\r\n\r\n<p>Par contre ici:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>data</code> <code>=</code> <code>{</code><code>&quot;France&quot;</code> <code>:</code> <code>&quot;Paris&quot;</code><code>,</code> <code>&quot;Gabon&quot;</code> <code>:</code> <code>&quot;Libreville&quot;</code><code>,</code> <code>&quot;Chine&quot;</code> <code>:</code> <code>&quot;Pekin&quot;</code><code>}</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>choice</code><code>(</code><code>data</code><code>.</code><code>keys</code><code>())</code>\r\n</pre>\r\n</div>\r\n\r\n<p>C&rsquo;est un tout petit peu bizarre qu&rsquo;on ait une erreur n&rsquo;est-ce pas? En effet, on demande &agrave; r&eacute;cup&eacute;rer la liste des cl&eacute;s de notre dictionnaire. Cette liste sera donc bel et bien une s&eacute;quence de valeurs (chaque valeur repr&eacute;sentantera une cl&eacute; de notre dictionnaire). Mais l&rsquo;on s&rsquo;aper&ccedil;oit tr&egrave;s rapidement avec l&rsquo;instruction suivante, du pourquoi de cette erreur.</p>\r\n\r\n<p>En tapant:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>data</code> <code>=</code> <code>{</code><code>&quot;France&quot;</code> <code>:</code> <code>&quot;Paris&quot;</code><code>,</code> <code>&quot;Gabon&quot;</code> <code>:</code> <code>&quot;Libreville&quot;</code><code>,</code> <code>&quot;Chine&quot;</code> <code>:</code> <code>&quot;Pekin&quot;</code><code>}</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>data</code><code>.</code><code>keys</code><code>()</code>\r\n<code>3 </code><code>dict_keys</code><code>([</code><code>&#39;Gabon&#39;</code><code>,</code> <code>&#39;Chine&#39;</code><code>,</code> <code>&#39;France&#39;</code><code>])</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Ce qui est retourn&eacute; n&rsquo;est pas tout simplement une liste, mais un fameux type special <strong>dict_keys</strong>. Ainsi, pour r&eacute;soudre ce probl&egrave;me, il nous faudra convertir notre <code>dict_keys</code> en <code>liste</code>.</p>\r\n\r\n<p>Pour ce faire, il suffira d&rsquo;utiliser la fonction <code>list</code> mise &agrave; notre disposition gratuitement par Python.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>un_tuple</code> <code>=</code> <code>(</code><code>1</code><code>,</code><code>2</code><code>,</code><code>3</code><code>,</code><code>4</code><code>)</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>un_tuple_devient_une_liste</code> <code>=</code> <code>list</code><code>(</code><code>un_tuple</code><code>)</code>\r\n<code>3 </code><code>&gt;&gt;&gt;</code> <code>un_tuple_devient_une_liste</code>\r\n<code>4 </code><code>[</code><code>1</code><code>,</code> <code>2</code><code>,</code> <code>3</code><code>,</code> <code>4</code><code>]</code>\r\n<code>5 </code><code>&gt;&gt;&gt;</code> <code>list</code><code>({</code><code>1</code><code>:</code> <code>&quot;un&quot;</code><code>,</code> <code>2</code><code>:</code> <code>&quot;deux&quot;</code><code>})</code>\r\n<code>6 </code><code>[</code><code>1</code><code>,</code> <code>2</code><code>]</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Comme vous le voyez, la fonction <code>list</code> appliqu&eacute;e directement &agrave; un dictionnaire ne r&eacute;cup&egrave;re que les cl&eacute;s et non les valeurs.</p>\r\n\r\n<p>Il existe de m&ecirc;me des fonctions <code>tuple</code> et <code>dict</code> qui vous l&rsquo;aurez devin&eacute; permettront de &hellip;</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>tuple</code><code>([</code><code>1</code><code>,</code><code>2</code><code>,</code><code>3</code><code>,</code><code>4</code><code>])</code>\r\n<code>2 </code><code>(</code><code>1</code><code>,</code> <code>2</code><code>,</code> <code>3</code><code>,</code> <code>4</code><code>)</code>\r\n<code>3 </code><code>&gt;&gt;&gt;</code> <code>tuple</code><code>({</code><code>1</code><code>:</code> <code>&quot;un&quot;</code><code>,</code> <code>2</code><code>:</code> <code>&quot;deux&quot;</code><code>})</code>\r\n<code>4 </code><code>(</code><code>1</code><code>,</code> <code>2</code><code>)</code>\r\n<code>5 </code><code>&gt;&gt;&gt;</code> <code>un_dictionnaire_vide</code> <code>=</code> <code>dict</code><code>()</code>\r\n<code>6 </code><code>&gt;&gt;&gt;</code> <code>une_liste_vide</code> <code>=</code> <code>list</code><code>()</code>\r\n<code>7 </code><code>&gt;&gt;&gt;</code> <code>un_tuple_vide</code> <code>=</code> <code>tuple</code><code>()</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Vous pouvez maintenant comprendre ais&eacute;ment pourquoi les instructions suivantes ont fonctionn&eacute;:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>data</code> <code>=</code> <code>{</code><code>&quot;France&quot;</code> <code>:</code> <code>&quot;Paris&quot;</code><code>,</code> <code>&quot;Gabon&quot;</code> <code>:</code> <code>&quot;Libreville&quot;</code><code>,</code> <code>&quot;Chine&quot;</code> <code>:</code> <code>&quot;Pekin&quot;</code><code>}</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>choice</code><code>(</code><code>list</code><code>(</code><code>data</code><code>))</code>\r\n<code>3 </code><code>&#39;Gabon&#39;</code>\r\n<code>4 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>choice</code><code>(</code><code>list</code><code>(</code><code>data</code><code>.</code><code>keys</code><code>()))</code> <code>#Similaire &agrave; l&#39;instruction pr&eacute;c&eacute;dente</code>\r\n<code>5 </code><code>&#39;Chine&#39;</code>\r\n<code>6 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>choice</code><code>(</code><code>list</code><code>(</code><code>data</code><code>.</code><code>values</code><code>()))</code>\r\n<code>7 </code><code>&#39;Libreville&#39;</code>\r\n</pre>\r\n</div>\r\n\r\n<h4>10.2.5 La fonction sample</h4>\r\n\r\n<p>Synopsis: <strong>random.sample(population, k)</strong></p>\r\n\r\n<p>La fonction sample retourne une liste de taille k compos&eacute;e <strong>d&rsquo;&eacute;l&eacute;ments uniques</strong> choisis de fa&ccedil;on al&eacute;atoire au niveau de la s&eacute;quence <strong>population</strong>. Voyez un peu cette m&eacute;thode comme un moyen de r&eacute;cup&eacute;rer des &eacute;chantillons dans une s&eacute;quence donn&eacute;e. Encore une fois, si vous voulez avoir beaucoup plus d&rsquo;informations, n&rsquo;oubliez pas que la documentation n&rsquo;attend que vous :).</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>sample</code><code>(</code><code>range</code><code>(</code><code>10</code><code>),</code> <code>3</code><code>)</code>\r\n<code> 2 </code><code>[</code><code>8</code><code>,</code> <code>3</code><code>,</code> <code>2</code><code>]</code>\r\n<code> 3 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>sample</code><code>([</code><code>2</code><code>,</code><code>345</code><code>,</code> <code>5</code><code>,</code> <code>&quot;toto&quot;</code><code>],</code> <code>3</code><code>)</code>\r\n<code> 4 </code><code>[</code><code>2</code><code>,</code> <code>5</code><code>,</code> <code>&#39;toto&#39;</code><code>]</code>\r\n<code> 5 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>sample</code><code>(</code><code>&quot;tatattoto&quot;</code><code>,</code> <code>4</code><code>)</code>\r\n<code> 6 </code><code>[</code><code>&#39;t&#39;</code><code>,</code> <code>&#39;t&#39;</code><code>,</code> <code>&#39;o&#39;</code><code>,</code> <code>&#39;a&#39;</code><code>]</code>\r\n<code> 7 </code><code>&gt;&gt;&gt;</code> <code>data</code> <code>=</code> <code>{</code><code>&quot;France&quot;</code> <code>:</code> <code>&quot;Paris&quot;</code><code>,</code> <code>&quot;Gabon&quot;</code> <code>:</code> <code>&quot;Libreville&quot;</code><code>,</code> <code>&quot;Chine&quot;</code> <code>:</code> <code>&quot;Pekin&quot;</code><code>}</code>\r\n<code> 8 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>sample</code><code>(</code><code>data</code><code>.</code><code>keys</code><code>(),</code> <code>2</code><code>)</code> <code>#Cette fois-ci on peut utiliser directement da\\</code>\r\n<code> 9 </code><code>ta</code><code>.</code><code>keys</code><code>()</code>\r\n<code>10 </code><code>[</code><code>&#39;Chine&#39;</code><code>,</code> <code>&#39;Gabon&#39;</code><code>]</code>\r\n<code>11 </code><code>&gt;&gt;&gt;</code> <code>random</code><code>.</code><code>sample</code><code>(</code><code>list</code><code>(</code><code>data</code><code>),</code> <code>2</code><code>)</code>\r\n<code>12 </code><code>[</code><code>&#39;Gabon&#39;</code><code>,</code> <code>&#39;France&#39;</code><code>]</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Je crois que nous pouvons nous arr&ecirc;ter ici pour ce qui est de notre petite exploration du module random. J&rsquo;esp&egrave;re que vous avez appr&eacute;ci&eacute; cette courte visite guid&eacute;e et tout le personnel ose esp&eacute;rer vous revoir pour une prochain voyage avec Python Airways&hellip;</p>\r\n\r\n<h3>10.3 Challenge</h3>\r\n\r\n<p>A pr&eacute;sent vous avez toutes les cartes en main pour &eacute;crire notre jeu de capitales. Ce que je vous propose c&rsquo;est d&rsquo;&eacute;crire votre propre programme et apr&egrave;s de le comparer au mien. Il existe plusieurs solutions &agrave; un probl&egrave;me donn&eacute;. Suivez donc votre logique et produisez moi un programme mielleux. Je vous fais confiance.</p>\r\n\r\n<p>N&rsquo;h&eacute;sitez surtout pas a relire le principe du jeu afin de vous rappelez de ce dont il &eacute;tait question. Bonne chance !</p>\r\n\r\n<h3>10.4 Exemple de Solution</h3>\r\n\r\n<p>J&rsquo;esp&egrave;re que vous avez eu une solution &agrave; notre probl&egrave;me ou au mieux vous avez essay&eacute;. Si tel n&rsquo;est pas le cas, je vous conseille de le faire. Il n&rsquo;y a qu&rsquo;en forgeant que l&rsquo;on devient forgeron. Vous devez donc pratiquer afin d&rsquo;assimiler toute cette th&eacute;orie. J&rsquo;ose esp&eacute;rer que j&rsquo;ai &eacute;t&eacute; assez convaincant cette fois-ci pour les derniers rescap&eacute;s.</p>\r\n\r\n<p>Voici la solution que je vous propose. Bien s&ucirc;r, elle n&rsquo;est pas parole d&rsquo;&Eacute;vangile :)</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code># Jeu de capitales</code>\r\n<code> 2 </code><code># Python par la pratique</code>\r\n<code> 3 </code>\r\n<code> 4 </code><code># Nous aurons besoin uniquement de la fonction sample, pas besoin</code>\r\n<code> 5 </code><code># alors d&#39;importer tout le module</code>\r\n<code> 6 </code><code>from</code> <code>random</code> <code>import</code> <code>sample</code>\r\n<code> 7 </code>\r\n<code> 8 </code><code>#Ensemble de pays et leurs capitales respectives</code>\r\n<code> 9 </code><code>capitales</code> <code>=</code> <code>{</code>\r\n<code>10 </code>    <code>&quot;Senegal&quot;</code> <code>:</code> <code>&quot;Dakar&quot;</code><code>,</code>\r\n<code>11 </code>    <code>&quot;Nigeria&quot;</code><code>:</code> <code>&quot;Lagos&quot;</code><code>,</code>\r\n<code>12 </code>    <code>&quot;France&quot;</code><code>:</code> <code>&quot;Paris&quot;</code><code>,</code>\r\n<code>13 </code>    <code>&quot;Gabon&quot;</code> <code>:</code> <code>&quot;Libreville&quot;</code><code>,</code>\r\n<code>14 </code>    <code>&quot;Burkina Faso&quot;</code><code>:</code> <code>&quot;Ouagadougou&quot;</code><code>,</code>\r\n<code>15 </code>    <code>&quot;Allemagne&quot;</code> <code>:</code> <code>&quot;Berlin&quot;</code><code>,</code>\r\n<code>16 </code>    <code>&quot;Belgique&quot;</code> <code>:</code> <code>&quot;Bruxelles&quot;</code><code>,</code>\r\n<code>17 </code>    <code>&quot;Qatar&quot;</code> <code>:</code> <code>&quot;Doha&quot;</code><code>,</code>\r\n<code>18 </code>    <code>&quot;Zimbabwe&quot;</code> <code>:</code> <code>&quot;Harare&quot;</code><code>,</code>\r\n<code>19 </code>    <code>&quot;Perou&quot;</code> <code>:</code> <code>&quot;Lima&quot;</code><code>,</code>\r\n<code>20 </code>    <code>&quot;Mozambique&quot;</code> <code>:</code> <code>&quot;Maputo&quot;</code>\r\n<code>21 </code><code>}</code>\r\n<code>22 </code>\r\n<code>23 </code>\r\n<code>24 </code><code># On utilise ici une constante.</code>\r\n<code>25 </code><code># Ainsi, si nous voulons modifier plus tard le</code>\r\n<code>26 </code><code># nombre de questions, nous le ferons &agrave; cet unique</code>\r\n<code>27 </code><code># emplacement et notre changement sera r&eacute;percut&eacute; partout ailleurs</code>\r\n<code>28 </code><code>NBRE_TOTAL_DE_QUESTIONS</code> <code>=</code> <code>5</code>\r\n<code>29 </code>\r\n<code>30 </code><code>#Contiendra le score de l&#39;utilisateur</code>\r\n<code>31 </code><code>score</code> <code>=</code> <code>0</code>\r\n<code>32 </code>\r\n<code>33 </code><code>#On r&eacute;cup&egrave;re une liste al&eacute;atoire de [NBRE_TOTAL_DE_QUESTIONS] pays</code>\r\n<code>34 </code><code>liste_pays</code> <code>=</code> <code>sample</code><code>(</code><code>list</code><code>(</code><code>capitales</code><code>),</code> <code>NBRE_TOTAL_DE_QUESTIONS</code><code>)</code>\r\n<code>35 </code>\r\n<code>36 </code><code>for</code> <code>pays</code> <code>in</code> <code>liste_pays</code><code>:</code>\r\n<code>37 </code>    <code>print</code><code>(</code><code>&quot;Quelle est la capitale de ce pays: &quot;</code> <code>+</code> <code>pays</code> <code>+</code> <code>&quot; ?&quot;</code><code>)</code>\r\n<code>38 </code>    <code>reponse</code> <code>=</code> <code>input</code><code>()</code> <code>#on r&eacute;cup&egrave;re la r&eacute;ponse de l&#39;utilisateur</code>\r\n<code>39 </code>\r\n<code>40 </code>    <code>#La m&eacute;thode lower() nous permet de convertir une chaine de caract&egrave;res</code>\r\n<code>41 </code>    <code>#en minuscules. On le fait pour qu&#39;ainsi si l&#39;utilisateur tape OUagadoUgou e\\</code>\r\n<code>42 </code><code>n</code> <code>lieu</code>\r\n<code>43 </code>    <code>#et place de Ouagadougou, cela fonctionnera &eacute;galement.</code>\r\n<code>44 </code>    <code>if</code><code>(</code><code>reponse</code><code>.</code><code>lower</code><code>()</code> <code>==</code> <code>capitales</code><code>[</code><code>pays</code><code>]</code><code>.</code><code>lower</code><code>()):</code>\r\n<code>45 </code>        <code>print</code><code>(</code><code>&quot;Bonne reponse!&quot;</code><code>)</code>\r\n<code>46 </code>        <code>score</code> <code>+=</code> <code>1</code> <code>#On incr&eacute;mente son score</code>\r\n<code>47 </code>    <code>else</code><code>:</code>\r\n<code>48 </code>        <code>print</code><code>(</code><code>&quot;Mauvais r&eacute;ponse! Il fallait r&eacute;pondre: &quot;</code> <code>+</code> <code>capitales</code><code>[</code><code>pays</code><code>])</code>\r\n<code>49 </code>\r\n<code>50 </code><code>print</code><code>(</code><code>&quot;C&#39;est termin&eacute; ! &lt;&lt; Score: &quot;</code><code>,</code> <code>score</code><code>,</code> <code>&quot;/&quot;</code><code>,</code> <code>NBRE_TOTAL_DE_QUESTIONS</code><code>,</code> <code>&quot; &gt;&gt;&quot;</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<h3>10.5 Faites vous confiance !</h3>\r\n\r\n<p>Comme vous l&rsquo;avez vu, je n&rsquo;ai pas utilis&eacute; la fonction <code>choice</code> comme je l&rsquo;avais indiqu&eacute;. C&rsquo;&eacute;tait en effet un pi&egrave;ge, histoire de voir si vous allez vous efforcer &agrave; utilliser cette fonction alors qu&rsquo;elle n&rsquo;est pas forc&eacute;ment la plus adapt&eacute;e dans notre cas de figure!</p>\r\n\r\n<p>Si nous avions utilis&eacute; la fonction choice, nous aurons &eacute;t&eacute; dans l&rsquo;obligation de g&eacute;rer pas nous-m&ecirc;mes le fait qu&rsquo;une m&ecirc;me question ne puisse pas &ecirc;tre affich&eacute;e plus d&rsquo;une fois dans une s&eacute;rie de questions. Ainsi, notre code source final en sera un tout petit alourdi. Je vous laisse juger par vous-m&ecirc;me.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>#On utilise cette fois-ci la fonction choice</code>\r\n<code> 2 </code><code>from</code> <code>random</code> <code>import</code> <code>choice</code>\r\n<code> 3 </code>\r\n<code> 4 </code><code>#Ensemble de pays et leurs capitales respectives</code>\r\n<code> 5 </code><code>capitales</code> <code>=</code> <code>{</code>\r\n<code> 6 </code>    <code>&quot;Senegal&quot;</code> <code>:</code> <code>&quot;Dakar&quot;</code><code>,</code>\r\n<code> 7 </code>    <code>&quot;Nigeria&quot;</code><code>:</code> <code>&quot;Lagos&quot;</code><code>,</code>\r\n<code> 8 </code>    <code>&quot;France&quot;</code><code>:</code> <code>&quot;Paris&quot;</code><code>,</code>\r\n<code> 9 </code>    <code>&quot;Gabon&quot;</code> <code>:</code> <code>&quot;Libreville&quot;</code><code>,</code>\r\n<code>10 </code>    <code>&quot;Burkina Faso&quot;</code><code>:</code> <code>&quot;Ouagadougou&quot;</code><code>,</code>\r\n<code>11 </code>    <code>&quot;Allemagne&quot;</code> <code>:</code> <code>&quot;Berlin&quot;</code><code>,</code>\r\n<code>12 </code>    <code>&quot;Belgique&quot;</code> <code>:</code> <code>&quot;Bruxelles&quot;</code><code>,</code>\r\n<code>13 </code>    <code>&quot;Qatar&quot;</code> <code>:</code> <code>&quot;Doha&quot;</code><code>,</code>\r\n<code>14 </code>    <code>&quot;Zimbabwe&quot;</code> <code>:</code> <code>&quot;Harare&quot;</code><code>,</code>\r\n<code>15 </code>    <code>&quot;Perou&quot;</code> <code>:</code> <code>&quot;Lima&quot;</code><code>,</code>\r\n<code>16 </code>    <code>&quot;Mozambique&quot;</code> <code>:</code> <code>&quot;Maputo&quot;</code>\r\n<code>17 </code><code>}</code>\r\n<code>18 </code>\r\n<code>19 </code><code>NBRE_TOTAL_DE_QUESTIONS</code> <code>=</code> <code>5</code>\r\n<code>20 </code><code>score</code> <code>=</code> <code>0</code>\r\n<code>21 </code>\r\n<code>22 </code><code>#Contiendra la liste des pays d&eacute;j&agrave; choisis afin de ne pas</code>\r\n<code>23 </code><code>#afficher plus d&#39;une fois la m&ecirc;me question dans une m&ecirc;me s&eacute;rie</code>\r\n<code>24 </code><code>paysDejaChoisis</code> <code>=</code> <code>[]</code>\r\n<code>25 </code>\r\n<code>26 </code><code>#On r&eacute;cup&egrave;re la liste des pays</code>\r\n<code>27 </code><code>listePays</code> <code>=</code> <code>list</code><code>(</code> <code>capitales</code><code>.</code><code>keys</code><code>()</code> <code>)</code>\r\n<code>28 </code>\r\n<code>29 </code><code>#On r&eacute;p&egrave;te ce bloc [NBRE_TOTAL_DE_QUESTIONS] fois</code>\r\n<code>30 </code><code>for</code> <code>i</code> <code>in</code> <code>range</code><code>(</code><code>0</code><code>,</code> <code>NBRE_TOTAL_DE_QUESTIONS</code><code>):</code>\r\n<code>31 </code>    <code>pays</code> <code>=</code> <code>choice</code><code>(</code><code>listePays</code><code>)</code> <code>#On choisi un pays de mani&egrave;re al&eacute;atoire</code>\r\n<code>32 </code>\r\n<code>33 </code>   <code>#Si le pays fait d&eacute;j&agrave; partie de la liste, on en choisi un autre, et ce,</code>\r\n<code>34 </code>   <code>#tant que nous n&#39;avons pas trouv&eacute; un pays qui ne fait pas d&eacute;j&agrave; partie de la l\\</code>\r\n<code>35 </code><code>iste</code><code>.</code>\r\n<code>36 </code>    <code>while</code> <code>pays</code> <code>in</code> <code>paysDejaChoisis</code><code>:</code>\r\n<code>37 </code>         <code>pays</code> <code>=</code> <code>choice</code><code>(</code><code>listePays</code><code>)</code>\r\n<code>38 </code>\r\n<code>39 </code>    <code>#On ajoute le pays qui vient d&rsquo;&ecirc;tre s&eacute;lectionn&eacute;</code>\r\n<code>40 </code>    <code>#&agrave; notre liste de pays d&eacute;j&agrave; choisis pour ne</code>\r\n<code>41 </code>    <code>#pas avoir &agrave; le choisir une fois de plus</code>\r\n<code>42 </code>    <code>paysDejaChoisis</code><code>.</code><code>append</code><code>(</code><code>pays</code><code>)</code>\r\n<code>43 </code>\r\n<code>44 </code>    <code>print</code><code>(</code><code>&quot;Quelle est la capitale de ce pays: &quot;</code> <code>+</code> <code>pays</code> <code>+</code> <code>&quot; ?&quot;</code><code>)</code>\r\n<code>45 </code>    <code>reponse</code> <code>=</code> <code>input</code><code>()</code>\r\n<code>46 </code>\r\n<code>47 </code>    <code>#La m&eacute;thode lower() nous permet de convertir une chaine de caract&egrave;res</code>\r\n<code>48 </code>    <code>#en minuscules. On le fait pour qu&#39;ainsi si l&#39;utilisateur tape OUagadoUgou e\\</code>\r\n<code>49 </code><code>n</code> <code>lieu</code>\r\n<code>50 </code>    <code>#et place de Ouagadougou, cela fonctionnera &eacute;galement.</code>\r\n<code>51 </code>    <code>if</code><code>(</code><code>reponse</code><code>.</code><code>lower</code><code>()</code> <code>==</code> <code>capitales</code><code>[</code><code>pays</code><code>]</code><code>.</code><code>lower</code><code>()):</code>\r\n<code>52 </code>        <code>print</code><code>(</code><code>&quot;Bonne reponse!&quot;</code><code>)</code>\r\n<code>53 </code>        <code>score</code> <code>+=</code> <code>1</code> <code>#On incr&eacute;mente son score</code>\r\n<code>54 </code>    <code>else</code><code>:</code>\r\n<code>55 </code>        <code>print</code><code>(</code><code>&quot;Mauvais r&eacute;ponse! Il fallait r&eacute;pondre: &quot;</code> <code>+</code> <code>capitales</code><code>[</code><code>pays</code><code>])</code>\r\n<code>56 </code>\r\n<code>57 </code><code>print</code><code>(</code><code>&quot;C&#39;est termin&eacute; ! &lt;&lt; Score: &quot;</code><code>,</code> <code>score</code><code>,</code> <code>&quot;/&quot;</code><code>,</code> <code>NBRE_TOTAL_DE_QUESTIONS</code><code>,</code> <code>&quot; &gt;&gt;&quot;</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>J&rsquo;ai eu &agrave; documenter le code source afin que vous puissiez comprendre chacune des lignes. Si vous avez bien suivi jusque-l&agrave;, comprendre ce code devrait &ecirc; en r&eacute;alit&eacute; chose ais&eacute;e pour vous.</p>\r\n\r\n<h3>10.6 Petit exercice</h3>\r\n\r\n<p>Modifier notre programme afin de pouvoir donner la possibilit&eacute; &agrave; l&rsquo;utilisateur de pouvoir rejouer. Ainsi, si l&rsquo;utilisateur termine une partie, on lui demande s&rsquo;il souhaite rejouer ou non. S&rsquo;il r&eacute;pond par l&rsquo;affirmative alors on lui pr&eacute;pare une nouvelle partie, dans le cas contraire on lui dira gentiment <strong>Bye Bye</strong>.</p>\r\n\r\n<p>Vous pouvez donc utiliser ce petit test avec encore une fois notre fameuse m&eacute;thode <code>lower</code>. Nous en reparlerons au niveau du chapitre suivant. Ne vous inqui&eacute;tez donc pas.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>reponse</code> <code>=</code> <code>input</code><code>(</code><code>&quot;Voulez-vous rejouer (O/N)?&quot;</code><code>)</code>\r\n<code>2 </code>\r\n<code>3 </code><code>if</code><code>(</code><code>reponse</code><code>.</code><code>lower</code><code>()</code> <code>==</code> <code>&#39;o&#39;</code><code>):</code>\r\n<code>4 </code>    <code>#L&#39;utilisateur  veut rejouer</code>\r\n<code>5 </code><code>else</code><code>:</code>\r\n<code>6 </code>    <code>#On lui dit Bye Bye</code>\r\n</pre>\r\n</div>\r\n\r\n<p>En utilisant la m&eacute;thode <code>lower</code>, cela nous &eacute;vite d&rsquo;avoir &agrave; faire deux tests.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>reponse</code> <code>=</code> <code>input</code><code>(</code><code>&quot;Voulez-vous rejouer (O/N)?&quot;</code><code>)</code>\r\n<code>2 </code>\r\n<code>3 </code><code>if</code><code>(</code><code>reponse</code> <code>==</code> <code>&#39;O&#39;</code> <code>or</code> <code>reponse</code> <code>=</code> <code>&#39;o&#39;</code><code>):</code>\r\n<code>4 </code>    <code>#L&#39;utilisateur  veut rejouer</code>\r\n<code>5 </code><code>else</code><code>:</code>\r\n<code>6 </code>    <code>#On lui dit Bye Bye</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Rendez ensuite votre code modulaire en le d&eacute;coupant en de petites fonctions.</p>\r\n\r\n<h3>10.7 R&eacute;sum&eacute;</h3>\r\n\r\n<p>Dans ce chapitre, nous avons appris que:</p>\r\n\r\n<ul>\r\n	<li>En th&eacute;orie, un ordinateur ne connait pas le hasard. Il fait de son mieux pour simuler le monde du hasard.</li>\r\n	<li>Le module random nous permet de g&eacute;n&eacute;rer des valeurs pseudo-al&eacute;atoires selon une vari&eacute;t&eacute; de distribution.</li>\r\n	<li>Nous avons la possibilit&eacute; d&rsquo;utiliser les fonctions list, tuple, dict pour cr&eacute;er respectivement des listes, des tuples et des dictionnaires.</li>\r\n	<li>Vous devez toujours vous servir de la documentation en premier recours si vous bloquez sur quoi que ce soit.</li>\r\n	<li>Une constante est une variable dont le contenu ne sera pas amen&eacute; &agrave; changer au cours de l&rsquo;ex&eacute;cution d&rsquo;un notre programme.</li>\r\n	<li>Il existe toujours plusieurs solutions &agrave; probl&egrave;me donn&eacute;.</li>\r\n</ul>\r\n\r\n<h2>11. Les fichiers et les exceptions</h2>\r\n\r\n<p>Travailler sur des listes, des tuples&hellip; c&rsquo;est bien! Mais parfois ce n&rsquo;est pas suffisant. Tr&egrave;s souvent vos donn&eacute;es proviendront d&rsquo;un fichier, d&rsquo;une base de donn&eacute;es, depuis Internet etc.</p>\r\n\r\n<p>Je peux comprendre qu&rsquo;il soit un tout petit peu difficile &agrave; l&rsquo;heure actuelle pour vous de percevoir l&rsquo;utilit&eacute; des fichiers vu que nous avons travaill&eacute; jusque-l&agrave; que sur de petites donn&eacute;es, mais croyez-moi vous vous en rendrez compte au fur et &agrave; mesure que nous avancerons dans ce chapitre.</p>\r\n\r\n<p>Il sera tr&egrave;s facile de manipuler les fichiers avec Python et ceci n&rsquo;est pas une surprise avec Python :). Python met &agrave; notre disposition tout un arsenal de fonctions tr&egrave;s simples nous permettant de manipuler les fichiers. Toutefois vu que la manipulation des fichiers est un peu d&eacute;licate, vous serez amen&eacute;s &agrave; rencontrer quelques petits probl&egrave;mes dus &agrave; des situations exceptionnelles (vous avez sp&eacute;cifi&eacute; par exemple un nom de fichier incorrect par exemple) et il nous faudra g&eacute;rer tout ceci. Heureusement gr&acirc;ce &agrave; la gestion des exceptions pr&eacute;sentes au niveau du langage Python, cela sera un vrai jeu d&rsquo;enfants.</p>\r\n\r\n<h3>11.1 Les donn&eacute;es sont tr&egrave;s souvent externes</h3>\r\n\r\n<p>Comme je vous le disait en introduction, g&eacute;n&eacute;ralement, la plupart de nos programmes recevront des donn&eacute;es provenant de sources externes. Ces donn&eacute;es seront donc r&eacute;cup&eacute;r&eacute;es, trait&eacute;es, stock&eacute;es, affich&eacute;es, imprim&eacute;es, transf&eacute;r&eacute;es&hellip; En gros tout d&eacute;pendra de vous!</p>\r\n\r\n<p>A ce stade, j&rsquo;ose supposer que vous &ecirc;tes maintenant des experts en ce qui concerne le traitement de donn&eacute;es internes. Qu&rsquo;en est-il alors des donn&eacute;es provenant d&rsquo;une source externe? Comment r&eacute;cup&eacute;rer le contenu d&rsquo;un fichier par exemple?</p>\r\n\r\n<p>Pour bien comprendre l&rsquo;utilit&eacute; des fonctions qui vont suivre, je vais vous demander de vous faire une image de la proc&eacute;dure de manipulation des fichiers d&rsquo;un point de vue graphique.</p>\r\n\r\n<p>Si je veux lire le contenu d&rsquo;un fichier, qu&rsquo;est-ce que je dois faire?</p>\r\n\r\n<ul>\r\n	<li>Premi&egrave;rement chercher le fichier et l&rsquo;ouvrir,</li>\r\n	<li>Ensuite lire son contenu.</li>\r\n	<li>Faire ce que je veux avec ce contenu (le copier, le couper, le modifier&hellip;)</li>\r\n	<li>Et si je juge qu&rsquo;il ne me sera plus d&rsquo;une grande utilit&eacute;, je peux d&eacute;cider de le fermer.</li>\r\n</ul>\r\n\r\n<p>C&rsquo;est exactement de cette mani&egrave;re que Python proc&egrave;de. Il mettra donc &agrave; votre disposition une fonction pour chacune des ces &eacute;tapes l&agrave;.</p>\r\n\r\n<h3>11.2 La fonction open</h3>\r\n\r\n<p>Le contenu d&rsquo;un fichier n&rsquo;est rien d&rsquo;autre qu&rsquo;un ensemble de lignes. En effet, lorsque vous lisez le contenu d&rsquo;un fichier en Python, ce dernier vous sera fourni ligne par ligne. Vous lirez donc qu&rsquo;une seule ligne &agrave; la fois.</p>\r\n\r\n<p>La fonctionne <code>open</code> comme son nom l&rsquo;indique nous permettra d&rsquo;ouvrir un fichier. Si elle est ensuite combin&eacute;e avec la boucle for la lecture du contenu en est largement facilit&eacute;e.</p>\r\n\r\n<p>Si vous voulez ouvrir un fichier, il suffira d&rsquo;&eacute;crire: <strong>open(chemin_menant_au_fichier)</strong></p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>fichier</code> <code>=</code> <code>open</code><code>(</code><code>&quot;c:/Users/honore.h/Desktop/mon_fichier.txt&quot;</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Lorsque vous travaillez sur les fichiers la proc&eacute;dure sera la suivante:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>fichier</code> <code>=</code> <code>open</code><code>(</code><code>&quot;c:/Users/honore.h/Desktop/mon_fichier.txt&quot;</code><code>)</code>\r\n<code>2 </code><code># Faire quelque chose avec les donn&eacute;es r&eacute;cup&eacute;r&eacute;es depuis le fichier</code>\r\n<code>3 </code><code>fichier</code><code>.</code><code>close</code><code>()</code> <code>#Fermer le fichier</code>\r\n</pre>\r\n</div>\r\n\r\n<p>N&rsquo;oubliez jamais de fermer le fichier apr&egrave;s avoir termin&eacute; le traitement des donn&eacute;es. Cela vous permettra de lib&eacute;rer un tant soit peu de la ressource m&eacute;moire. Please guys, don&rsquo;t forget it !</p>\r\n\r\n<p>Essayons ensuite de voir ce que contient la variable <strong>fichier</strong></p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>fichier</code> <code>=</code> <code>open</code><code>(</code><code>&quot;c:/Users/honore.h/Desktop/mon_fichier.txt&quot;</code><code>)</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>fichier</code>\r\n<code>3 </code><code>&lt;</code><code>_io</code><code>.</code><code>TextIOWrapper</code> <code>name</code><code>=</code><code>&#39;c:/Users/honore.h/Desktop/mon_fichier.txt&#39;</code> <code>mode</code><code>=</code><code>&#39;r&#39;</code> <code>enc</code>\\\r\n<code>4 </code><code>oding</code><code>=</code><code>&#39;cp1252&#39;</code><code>&gt;</code>\r\n<code>5 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Tout ce que vous devez remarquer ici c&rsquo;est que notre variable fichier ne contient pas pour l&rsquo;instant le contenu de notre fichier. Nous disposons de ce qu&rsquo;on appelle un <strong>iterator</strong> qui va nous permettre de pouvoir parcourir notre fichier ligne apr&egrave;s ligne. Qui dit parcourir fait penser automatiquement aux boucles. Mais ne soyez pas press&eacute;s, voyons les choses &eacute;tape par &eacute;tape.</p>\r\n\r\n<p>Premi&egrave;rement voyons voir comment faire pour seulement sp&eacute;cifier le nom de notre fichier et non ce long chemin <strong>&ldquo;c:/Users/honore.h/Desktop/mon_fichier.txt&rdquo;</strong>.</p>\r\n\r\n<h4>11.2.1 Fichier capitales.txt</h4>\r\n\r\n<p>Veuillez cr&eacute;er un fichier capitales.txt au niveau d&rsquo;un dossier de votre choix et mettez y comme contenu:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>Dakar</code><code>-</code><code>S</code><code>&eacute;</code><code>n</code><code>&eacute;</code><code>gal</code>\r\n<code> 2 </code><code>Lagos</code><code>-</code><code>Nigeria</code>\r\n<code> 3 </code><code>Paris</code><code>-</code><code>France</code>\r\n<code> 4 </code><code>Libreville</code><code>-</code><code>Gabon</code>\r\n<code> 5 </code><code>Ouagadougou</code><code>-</code><code>Burkina</code> <code>Faso</code>\r\n<code> 6 </code><code>Berlin</code><code>-</code><code>Allemagne</code>\r\n<code> 7 </code><code>Bruxelles</code><code>-</code><code>Belgique</code>\r\n<code> 8 </code><code>Doha</code><code>-</code><code>Qatar</code>\r\n<code> 9 </code><code>Harare</code><code>-</code><code>Zimbabwe</code>\r\n<code>10 </code><code>Amsterdam</code><code>-</code><code>Pays</code><code>-</code><code>Bas</code>\r\n<code>11 </code><code>Lima</code><code>-</code><code>P</code><code>&eacute;</code><code>rou</code>\r\n<code>12 </code><code>Maputo</code><code>-</code><code>Mozambique</code>\r\n<code>13 </code><code>Monaco</code>\r\n<code>14 </code><code>Monrovia</code><code>-</code><code>Liberia</code>\r\n<code>15 </code><code>Panama</code>\r\n<code>16 </code><code>Rome</code><code>-</code><code>Italie</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Un peu de pratique :)</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>&gt;&gt;&gt;</code> <code>import</code> <code>os</code> <code>#On importe le module OS depuis la librairie standard</code>\r\n<code> 2 </code><code>&gt;&gt;&gt;</code> <code>os</code><code>.</code><code>getcwd</code><code>()</code> <code>#On d&eacute;termine le r&eacute;pertoire courant</code>\r\n<code> 3 </code><code>&#39;C:</code><code>\\\\</code><code>Python34&#39;</code>\r\n<code> 4 </code><code>&gt;&gt;&gt;</code> <code>os</code><code>.</code><code>chdir</code><code>(</code><code>&quot;c:/Users/honore.h/Desktop/&quot;</code><code>)</code> <code>#On choisit le r&eacute;pertoire qui contien\\</code>\r\n<code> 5 </code><code>t</code> <code>notre</code> <code>fichier</code> <code>capitales</code><code>.</code><code>txt</code> <code>comme</code> <code>nouveau</code> <code>r</code><code>&eacute;</code><code>pertoire</code> <code>de</code> <code>travail</code>\r\n<code> 6 </code><code>&gt;&gt;&gt;</code> <code>os</code><code>.</code><code>getcwd</code><code>()</code> <code>#Nous confirmons que nous sommes maintenant dans le bon r&eacute;pertoi\\</code>\r\n<code> 7 </code><code>re</code>\r\n<code> 8 </code><code>&#39;c:</code><code>\\\\</code><code>Users</code><code>\\\\</code><code>honore.h</code><code>\\\\</code><code>Desktop&#39;</code>\r\n<code> 9 </code><code>&gt;&gt;&gt;</code> <code>fichier</code> <code>=</code> <code>open</code><code>(</code><code>&#39;capitales.txt&#39;</code><code>)</code> <code>#On ouvre notre fichier et on affecte la val\\</code>\r\n<code>10 </code><code>eur</code> <code>retourn</code><code>&eacute;</code><code>e</code> <code>&agrave;</code> <code>une</code> <code>variable</code> <code>fichier</code>\r\n<code>11 </code><code>&gt;&gt;&gt;</code> <code>print</code><code>(</code><code>fichier</code><code>.</code><code>readline</code><code>())</code> <code>#On utilise la m&eacute;thode &quot;readline()&quot; pour lire une \\</code>\r\n<code>12 </code><code>ligne</code> <code>au</code> <code>niveau</code> <code>de</code> <code>notre</code> <code>fichier</code><code>,</code> <code>puis</code> <code>on</code> <code>utilise</code> <code>la</code> <code>fonction</code> <code>&quot;print()&quot;</code> <code>pour</code> <code>aff</code>\\\r\n<code>13 </code><code>icher</code> <code>la</code> <code>ligne</code> <code>r</code><code>&eacute;</code><code>cup</code><code>&eacute;</code><code>r</code><code>&eacute;</code><code>e</code><code>.</code>\r\n<code>14 </code><code>S</code><code>&eacute;</code><code>n</code><code>&eacute;</code><code>gal</code><code>-</code><code>Dakar</code>\r\n<code>15 </code>\r\n<code>16 </code><code>&gt;&gt;&gt;</code> <code>print</code><code>(</code><code>fichier</code><code>.</code><code>readline</code><code>(),</code> <code>end</code><code>=</code><code>&#39;&#39;</code><code>)</code> <code>#Pour ne pas avoir cette ligne vide de tro\\</code>\r\n<code>17 </code><code>p</code><code>,</code> <code>on</code> <code>rajoute</code> <code>l</code><code>&#39;argument end</code>\r\n<code>18 </code><code>Nigeria</code><code>-</code><code>Lagos</code>\r\n<code>19 </code><code>&gt;&gt;&gt;</code> <code>fichier</code><code>.</code><code>seek</code><code>(</code><code>0</code><code>)</code> <code>#Utilisons la m&eacute;thode &quot;seek()&quot;pour placer le curseur au d&eacute;bu\\</code>\r\n<code>20 </code><code>t</code> <code>de</code> <code>notre</code> <code>fichier</code><code>.</code>\r\n<code>21 </code><code>0</code>\r\n<code>22 </code><code>&gt;&gt;&gt;</code> <code>for</code> <code>ligne</code> <code>in</code> <code>fichier</code><code>:</code> <code>#Juste une boucle for pour lire toutes les lignes au n\\</code>\r\n<code>23 </code><code>iveau</code> <code>de</code> <code>notre</code> <code>fichier</code>\r\n<code>24 </code>    <code>print</code><code>(</code><code>ligne</code><code>,</code> <code>end</code><code>=</code><code>&#39;&#39;</code><code>)</code>\r\n<code>25 </code>\r\n<code>26 </code>\r\n<code>27 </code><code>Dakar</code><code>-</code><code>S</code><code>&eacute;</code><code>n</code><code>&eacute;</code><code>gal</code>\r\n<code>28 </code><code>Lagos</code><code>-</code><code>Nigeria</code>\r\n<code>29 </code><code>Paris</code><code>-</code><code>France</code>\r\n<code>30 </code><code>Libreville</code><code>-</code><code>Gabon</code>\r\n<code>31 </code><code>Ouagadougou</code><code>-</code><code>Burkina</code> <code>Faso</code>\r\n<code>32 </code><code>Berlin</code><code>-</code><code>Allemagne</code>\r\n<code>33 </code><code>Bruxelles</code><code>-</code><code>Belgique</code>\r\n<code>34 </code><code>Doha</code><code>-</code><code>Qatar</code>\r\n<code>35 </code><code>Harare</code><code>-</code><code>Zimbabwe</code>\r\n<code>36 </code><code>Amsterdam</code><code>-</code><code>Pays</code><code>-</code><code>Bas</code>\r\n<code>37 </code><code>Lima</code><code>-</code><code>P</code><code>&eacute;</code><code>rou</code>\r\n<code>38 </code><code>Maputo</code><code>-</code><code>Mozambique</code>\r\n<code>39 </code><code>Monaco</code>\r\n<code>40 </code><code>Monrovia</code><code>-</code><code>Liberia</code>\r\n<code>41 </code><code>Panama</code>\r\n<code>42 </code><code>Rome</code><code>-</code><code>Italie</code>\r\n<code>43 </code><code>&gt;&gt;&gt;</code> <code>fichier</code><code>.</code><code>close</code><code>()</code> <code>#N&#39;oublions pas de fermer notre fichier vu que nous avons te\\</code>\r\n<code>44 </code><code>rmin</code><code>&eacute;</code><code>.</code>\r\n<code>45 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<h4>Le module os</h4>\r\n\r\n<p>Le module <strong>os</strong> est un module qui vous permet de mani&egrave;re portable d&rsquo;utiliser des fonctionnalit&eacute;s propres aux syst&egrave;mes d&rsquo;exploitations. Si vous voulez avoir plus de d&eacute;tails sur ce dernier, comme des grands, vous pouvez vous servir de la documentation officielle de Python <a href="https://docs.python.org/2/library/os.html">https://docs.python.org/2/library/os.html</a>.</p>\r\n\r\n<h3>11.3 Contenu du fichier capitales.txt</h3>\r\n\r\n<p>Si vous ouvrez le fichier <code>capitales.txt</code>, vous remarquerez que sur chaque ligne nous avons tout simplement le nom d&rsquo;un pays suivi de celui de sa capitale. Toutefois, il est important de noter qu&rsquo;il suit un format bien pr&eacute;cis:</p>\r\n\r\n<p><strong>pays-capitale</strong></p>\r\n\r\n<p>Avec ce format, nous pouvons par exemple r&eacute;cup&eacute;rer uniquement le pays en utilisant la m&eacute;thode <strong>split()</strong> que nous avons d&eacute;j&agrave; &eacute;tudi&eacute;e.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>texte</code> <code>=</code> <code>&quot;Maman: Je t&#39;aime mon fils.&quot;</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>texte</code><code>.</code><code>split</code><code>(</code><code>&quot;:&quot;</code><code>)</code>\r\n<code>3 </code><code>[</code><code>&#39;Maman&#39;</code><code>,</code> <code>&quot; Je t&#39;aime mon fils.&quot;</code><code>]</code>\r\n<code>4 </code><code>&gt;&gt;&gt;</code> <code>texte</code> <code>=</code> <code>&quot;Paris-France&quot;</code>\r\n<code>5 </code><code>&gt;&gt;&gt;</code> <code>texte</code><code>.</code><code>split</code><code>(</code><code>&quot;-&quot;</code><code>)</code>\r\n<code>6 </code><code>[</code><code>&#39;Paris&#39;</code><code>,</code> <code>&#39;France&#39;</code><code>]</code>\r\n<code>7 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Tr&egrave;s simple n&rsquo;est-ce pas? Vous n&rsquo;avez qu&rsquo;&agrave; fournir en argument le s&eacute;parateur et la m&eacute;thode <strong>split()</strong> fera le reste du travail. Par d&eacute;faut, si aucun argument n&rsquo;est fourni <strong>l&rsquo;espace</strong> sera utilis&eacute; comme s&eacute;parateur.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>texte</code> <code>=</code> <code>&quot;Je suis un homme sans femme&quot;</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>texte</code><code>.</code><code>split</code><code>()</code>\r\n<code>3 </code><code>[</code><code>&#39;Je&#39;</code><code>,</code> <code>&#39;suis&#39;</code><code>,</code> <code>&#39;un&#39;</code><code>,</code> <code>&#39;homme&#39;</code><code>,</code> <code>&#39;sans&#39;</code><code>,</code> <code>&#39;femme&#39;</code><code>]</code>\r\n<code>4 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Pr&eacute;c&eacute;demment lorsque nous avons utilis&eacute; les deux points comme s&eacute;parateur, cette liste &eacute;tait retourn&eacute;e.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>[</code><code>&#39;Maman&#39;</code><code>,</code> <code>&quot; Je t&#39;aime mon fils.&quot;</code><code>]</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Pour r&eacute;cup&eacute;rer le nom et le message, on peut donc proc&eacute;der ainsi:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>texte</code> <code>=</code> <code>&quot;Maman: Je t&#39;aime mon fils.&quot;</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>donnees</code> <code>=</code> <code>texte</code><code>.</code><code>split</code><code>(</code><code>&quot;:&quot;</code><code>)</code> <code>#Les parenth&egrave;ses sont optionnelles</code>\r\n<code>3 </code><code>&gt;&gt;&gt;</code> <code>nom</code> <code>=</code> <code>donnees</code><code>[</code><code>0</code><code>]</code>\r\n<code>4 </code><code>&gt;&gt;&gt;</code> <code>message</code> <code>=</code> <code>donnees</code><code>[</code><code>1</code><code>]</code>\r\n<code>5 </code><code>&gt;&gt;&gt;</code> <code>nom</code>\r\n<code>6 </code><code>&#39;Maman&#39;</code>\r\n<code>7 </code><code>&gt;&gt;&gt;</code> <code>message</code>\r\n<code>8 </code><code>&quot; Je t&#39;aime mon fils.&quot;</code>\r\n<code>9 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Encore mieux, nous pouvons faire d&rsquo;une pierre deux coups et r&eacute;cup&eacute;rer &agrave; la fois le nom et le message en une seule ligne comme ceci:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>texte</code> <code>=</code> <code>&quot;Maman: Je t&#39;aime mon fils.&quot;</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>(</code><code>nom</code><code>,</code> <code>message</code><code>)</code> <code>=</code> <code>texte</code><code>.</code><code>split</code><code>(</code><code>&quot;:&quot;</code><code>)</code> <code>#Les parenth&egrave;ses sont optionnelles</code>\r\n<code>3 </code><code>&gt;&gt;&gt;</code> <code>nom</code>\r\n<code>4 </code><code>&#39;Maman&#39;</code>\r\n<code>5 </code><code>&gt;&gt;&gt;</code> <code>message</code>\r\n<code>6 </code><code>&quot; Je t&#39;aime mon fils.&quot;</code>\r\n<code>7 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Si nous appliquons ce que nous venons d&rsquo;apprendre au contenu de notre fichier capitales.txt, nous pouvons produire quelque chose comme ceci:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>&gt;&gt;&gt;</code> <code>fichier</code> <code>=</code> <code>open</code><code>(</code><code>&#39;capitales.txt&#39;</code><code>)</code>\r\n<code> 2 </code><code>&gt;&gt;&gt;</code> <code>for</code> <code>ligne</code> <code>in</code> <code>fichier</code><code>:</code>\r\n<code> 3 </code>        <code>capitale</code><code>,</code> <code>pays</code> <code>=</code> <code>ligne</code><code>.</code><code>split</code><code>(</code><code>&quot;-&quot;</code><code>)</code>\r\n<code> 4 </code>        <code>print</code><code>(</code><code>capitale</code><code>,</code> <code>end</code><code>=</code><code>&#39; est la capitale de &#39;</code><code>)</code>\r\n<code> 5 </code>        <code>print</code><code>(</code><code>pays</code><code>,</code> <code>end</code><code>=</code><code>&#39;&#39;</code><code>)</code>\r\n<code> 6 </code>\r\n<code> 7 </code>\r\n<code> 8 </code><code>Dakar</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>S</code><code>&eacute;</code><code>n</code><code>&eacute;</code><code>gal</code>\r\n<code> 9 </code><code>Lagos</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Nigeria</code>\r\n<code>10 </code><code>Paris</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>France</code>\r\n<code>11 </code><code>Libreville</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Gabon</code>\r\n<code>12 </code><code>Ouagadougou</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Burkina</code> <code>Faso</code>\r\n<code>13 </code><code>Berlin</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Allemagne</code>\r\n<code>14 </code><code>Bruxelles</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Belgique</code>\r\n<code>15 </code><code>Doha</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Qatar</code>\r\n<code>16 </code><code>Harare</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Zimbabwe</code>\r\n<code>17 </code><code>Traceback</code> <code>(</code><code>most</code> <code>recent</code> <code>call</code> <code>last</code><code>):</code>\r\n<code>18 </code>  <code>File</code> <code>&quot;&lt;pyshell#37&gt;&quot;</code><code>,</code> <code>line</code> <code>2</code><code>,</code> <code>in</code> <code>&lt;</code><code>module</code><code>&gt;</code>\r\n<code>19 </code>    <code>capitale</code><code>,</code> <code>pays</code> <code>=</code> <code>ligne</code><code>.</code><code>split</code><code>(</code><code>&quot;-&quot;</code><code>)</code>\r\n<code>20 </code><code>ValueError</code><code>:</code> <code>too</code> <code>many</code> <code>values</code> <code>to</code> <code>unpack</code> <code>(</code><code>expected</code> <code>2</code><code>)</code>\r\n<code>21 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Eh oui, je sais tr&egrave;s bien que nos phrases violent un tout petit peu la langue de Moli&egrave;re, mais &ccedil;a restera entre nous :).</p>\r\n\r\n<p>Comme vous pouvez le voir, nous avons droit &agrave; une belle erreur et cela est tout &agrave; fait normal si l&rsquo;on jette un petit coup d&rsquo;&oelig;il &agrave; notre fichier:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>Dakar</code><code>-</code><code>S</code><code>&eacute;</code><code>n</code><code>&eacute;</code><code>gal</code>\r\n<code> 2 </code><code>Lagos</code><code>-</code><code>Nigeria</code>\r\n<code> 3 </code><code>Paris</code><code>-</code><code>France</code>\r\n<code> 4 </code><code>Libreville</code><code>-</code><code>Gabon</code>\r\n<code> 5 </code><code>Ouagadougou</code><code>-</code><code>Burkina</code> <code>Faso</code>\r\n<code> 6 </code><code>Berlin</code><code>-</code><code>Allemagne</code>\r\n<code> 7 </code><code>Bruxelles</code><code>-</code><code>Belgique</code>\r\n<code> 8 </code><code>Doha</code><code>-</code><code>Qatar</code>\r\n<code> 9 </code><code>Harare</code><code>-</code><code>Zimbabwe</code>\r\n<code>10 </code><code>Amsterdam</code><code>-</code><code>Pays</code><code>-</code><code>Bas</code>\r\n<code>11 </code><code>Lima</code><code>-</code><code>P</code><code>&eacute;</code><code>rou</code>\r\n<code>12 </code><code>Maputo</code><code>-</code><code>Mozambique</code>\r\n<code>13 </code><code>Monaco</code>\r\n<code>14 </code><code>Monrovia</code><code>-</code><code>Liberia</code>\r\n<code>15 </code><code>Panama</code>\r\n<code>16 </code><code>Rome</code><code>-</code><code>Italie</code>\r\n</pre>\r\n</div>\r\n\r\n<p>La ligne num&eacute;ro <strong>10</strong> contient deux <strong>tirets</strong>. Ainsi lorsqu&rsquo;on fera le <strong>split(&ldquo;-&ldquo;)</strong>, nous n&rsquo;aurons pas en r&eacute;sultat une liste &agrave; deux &eacute;l&eacute;ments mais plut&ocirc;t une liste contenant 3 &eacute;l&eacute;ments et vu que notre programme ne sait quoi faire avec cette troisi&egrave;me valeur une exception de type <strong>ValueError</strong> sera lev&eacute;e.</p>\r\n\r\n<p>Pour preuve:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>texte</code> <code>=</code> <code>&quot;Amsterdam-Pays-Bas&quot;</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>texte</code><code>.</code><code>split</code><code>(</code><code>&quot;-&quot;</code><code>)</code>\r\n<code>3 </code><code>[</code><code>&#39;Amsterdam&#39;</code><code>,</code> <code>&#39;Pays&#39;</code><code>,</code> <code>&#39;Bas&#39;</code><code>]</code>\r\n<code>4 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<h3>11.4 Un code plus s&ucirc;r</h3>\r\n\r\n<p>Pour r&eacute;soudre notre probl&egrave;me, nous pouvons avoir comme premi&egrave;re id&eacute;e de changer pourquoi pas de s&eacute;parateur: utiliser <strong>les deux points</strong> en lieu et place du <strong>tiret</strong>. Cela est tout &agrave; fait exact je vous l&rsquo;accorde, mais avouez que tout ce qu&rsquo;on aura fait, c&rsquo;est fuir le probl&egrave;me et non le r&eacute;soudre :).</p>\r\n\r\n<p>Jetons plut&ocirc;t un coup d&rsquo;&oelig;il au niveau de la documentation sur la m&eacute;thode <strong>split()</strong> afin de savoir si oui ou non nous avons la possibilit&eacute; de pr&eacute;ciser le nombre de d&eacute;coupage maximum.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>&gt;&gt;&gt;</code> <code>texte</code> <code>=</code> <code>&quot;Amsterdam-Pays-Bas&quot;</code>\r\n<code> 2 </code><code>&gt;&gt;&gt;</code> <code>help</code><code>(</code><code>texte</code><code>.</code><code>split</code><code>)</code>\r\n<code> 3 </code><code>Help</code> <code>on</code> <code>built</code><code>-</code><code>in</code> <code>function</code> <code>split</code><code>:</code>\r\n<code> 4 </code>\r\n<code> 5 </code><code>split</code><code>(</code><code>...</code><code>)</code> <code>method</code> <code>of</code> <code>builtins</code><code>.</code><code>str</code> <code>instance</code>\r\n<code> 6 </code>    <code>S</code><code>.</code><code>split</code><code>(</code><code>sep</code><code>=</code><code>None</code><code>,</code> <code>maxsplit</code><code>=-</code><code>1</code><code>)</code> <code>-&gt;</code> <code>list</code> <code>of</code> <code>strings</code>\r\n<code> 7 </code>\r\n<code> 8 </code>    <code>Return</code> <code>a</code> <code>list</code> <code>of</code> <code>the</code> <code>words</code> <code>in</code> <code>S</code><code>,</code> <code>using</code> <code>sep</code> <code>as</code> <code>the</code>\r\n<code> 9 </code>    <code>delimiter</code> <code>string</code><code>.</code>  <code>If</code> <code>maxsplit</code> <code>is</code> <code>given</code><code>,</code> <code>at</code> <code>most</code> <code>maxsplit</code>\r\n<code>10 </code>    <code>splits</code> <code>are</code> <code>done</code><code>.</code> <code>If</code> <code>sep</code> <code>is</code> <code>not</code> <code>specified</code> <code>or</code> <code>is</code> <code>None</code><code>,</code> <code>any</code>\r\n<code>11 </code>    <code>whitespace</code> <code>string</code> <code>is</code> <code>a</code> <code>separator</code> <code>and</code> <code>empty</code> <code>strings</code> <code>are</code>\r\n<code>12 </code>    <code>removed</code> <code>from</code> <code>the</code> <code>result.</code>\r\n<code>13 </code>\r\n<code>14 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>La m&eacute;thode <strong>split()</strong> prend en effet un second argument <strong>max_split</strong> qui nous permettra de pr&eacute;ciser le nombre de d&eacute;coupage maximum. Ainsi dans notre cas, nous renseignerons comme valeur <strong>1</strong> afin de n&rsquo;avoir qu&rsquo;un seul d&eacute;coupage et donc deux (2) informations.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>texte</code> <code>=</code> <code>&quot;Amsterdam-Pays-Bas&quot;</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>texte</code><code>.</code><code>split</code><code>(</code><code>&quot;-&quot;</code><code>,</code> <code>1</code><code>)</code>\r\n<code>3 </code><code>[</code><code>&#39;Amsterdam&#39;</code><code>,</code> <code>&#39;Pays-Bas&#39;</code><code>]</code>\r\n<code>4 </code><code>&gt;&gt;&gt;</code> <code>len</code><code>(</code> <code>texte</code><code>.</code><code>split</code><code>(</code><code>&quot;-&quot;</code><code>,</code> <code>1</code><code>)</code> <code>)</code>\r\n<code>5 </code><code>2</code>\r\n<code>6 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>En utilisant donc ce second param&egrave;tre, notre <strong>premier</strong> probl&egrave;me est r&eacute;solu.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>&gt;&gt;&gt;</code> <code>fichier</code> <code>=</code> <code>open</code><code>(</code><code>&quot;capitales.txt&quot;</code><code>)</code>\r\n<code> 2 </code><code>&gt;&gt;&gt;</code> <code>for</code> <code>ligne</code> <code>in</code> <code>fichier</code><code>:</code>\r\n<code> 3 </code>        <code>capitale</code><code>,</code> <code>pays</code> <code>=</code> <code>ligne</code><code>.</code><code>split</code><code>(</code><code>&quot;-&quot;</code><code>,</code> <code>1</code><code>)</code>\r\n<code> 4 </code>        <code>print</code><code>(</code><code>capitale</code><code>,</code> <code>end</code><code>=</code><code>&#39; est la capitale de &#39;</code><code>)</code>\r\n<code> 5 </code>        <code>print</code><code>(</code><code>pays</code><code>,</code> <code>end</code><code>=</code><code>&#39;&#39;</code><code>)</code>\r\n<code> 6 </code>\r\n<code> 7 </code>\r\n<code> 8 </code><code>Dakar</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>S</code><code>&eacute;</code><code>n</code><code>&eacute;</code><code>gal</code>\r\n<code> 9 </code><code>Lagos</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Nigeria</code>\r\n<code>10 </code><code>Paris</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>France</code>\r\n<code>11 </code><code>Libreville</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Gabon</code>\r\n<code>12 </code><code>Ouagadougou</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Burkina</code> <code>Faso</code>\r\n<code>13 </code><code>Berlin</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Allemagne</code>\r\n<code>14 </code><code>Bruxelles</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Belgique</code>\r\n<code>15 </code><code>Doha</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Qatar</code>\r\n<code>16 </code><code>Harare</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Zimbabwe</code>\r\n<code>17 </code><code>Amsterdam</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Pays</code><code>-</code><code>Bas</code>\r\n<code>18 </code><code>Lima</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>P</code><code>&eacute;</code><code>rou</code>\r\n<code>19 </code><code>Maputo</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Mozambique</code>\r\n<code>20 </code><code>Traceback</code> <code>(</code><code>most</code> <code>recent</code> <code>call</code> <code>last</code><code>):</code>\r\n<code>21 </code>  <code>File</code> <code>&quot;&lt;pyshell#53&gt;&quot;</code><code>,</code> <code>line</code> <code>2</code><code>,</code> <code>in</code> <code>&lt;</code><code>module</code><code>&gt;</code>\r\n<code>22 </code>    <code>capitale</code><code>,</code> <code>pays</code> <code>=</code> <code>ligne</code><code>.</code><code>split</code><code>(</code><code>&quot;-&quot;</code><code>,</code> <code>1</code><code>)</code>\r\n<code>23 </code><code>ValueError</code><code>:</code> <code>need</code> <code>more</code> <code>than</code> <code>1</code> <code>value</code> <code>to</code> <code>unpack</code>\r\n<code>24 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<h4>Astuce</h4>\r\n\r\n<p>IDLE vous donne acc&egrave;s &agrave; l&rsquo;enti&egrave;re documentation python via le menu Help -&gt; Python Docs</p>\r\n\r\n<p>Comme vous pouvez vous en rendre compte, nous ne sommes pas &agrave; la fin de nos ennuis! Nous avons encore un nouveau probl&egrave;me &agrave; r&eacute;soudre. Normalement, si vous ouvrez votre fichier <strong>capitales.txt</strong> et que vous regardez attentivement chacune des lignes, vous saurez d&rsquo;o&ugrave; vient cette fameuse erreur.</p>\r\n\r\n<p>La premi&egrave;re chose &agrave; remarquer c&rsquo;est que l&rsquo;erreur que nous avons est diff&eacute;rente de celle que nous avions pr&eacute;c&eacute;demment. Avant on nous disait que nous avions trop de valeurs, mais maintenant c&rsquo;est le fait que nous n&rsquo;ayons pas assez de valeurs qui pose probl&egrave;me: <strong>ValueError: need more than 1 value to unpack</strong>.</p>\r\n\r\n<p>En effet si on analyse de nouveau notre fichier comme je le disais, on peut remarquer que certaines lignes ne sont pas du m&ecirc;me format que la grande majorit&eacute; des autres lignes. C&rsquo;est le cas par exemple de la ligne sur laquelle se trouve <strong>Monaco</strong> ou encore celle o&ugrave; nous voyons marqu&eacute; <strong>Panama</strong>. En effet, vu que la capitale de Monaco est Monaco, de m&ecirc;me que la capitale du Panama est Panama, j&rsquo;ai jug&eacute; judicieux de ne pas avoir &agrave; me r&eacute;p&eacute;ter. (Pour dire vrai, je cherchais &agrave; avoir ce probl&egrave;me afin de vous montrer quelques petites astuces :) ).</p>\r\n\r\n<p>Donc si on r&eacute;capitule, notre probl&egrave;me vient du fait que certaines lignes ne contiennent pas de tirets, ce qui pose probl&egrave;me lorsqu&rsquo;on appelle la m&eacute;thode <strong>split()</strong>.</p>\r\n\r\n<p>G&eacute;n&eacute;ralement lorsque nous devons traiter des situations exceptionnelles comme celle que nous avons, nous avons deux choix:</p>\r\n\r\n<ul>\r\n	<li>Ajouter une surcouche de logique afin de g&eacute;rer ladite situation exceptionnelle.</li>\r\n	<li>Laisser l&rsquo;erreur se produire, mais pr&eacute;parer &agrave; l&rsquo;avance un moyen de la r&eacute;soudre.</li>\r\n</ul>\r\n\r\n<p>L&rsquo;objectif sera de choisir la m&eacute;thode qui marche le mieux en fonction de notre cas de figure. Je sais que cela peut para&icirc;tre un peu confus, raison pour laquelle je vous invite &agrave; voir cela en pratique.</p>\r\n\r\n<h4>11.4.1 Ajouter encore plus de logique</h4>\r\n\r\n<p>En plus de la m&eacute;thode <strong>split()</strong>, toute cha&icirc;ne de caract&egrave;res sous Python dispose &eacute;galement d&rsquo;une m&eacute;thode <strong>find()</strong>. On peut demander &agrave; la m&eacute;thode <strong>find()</strong> de rechercher une sous-cha&icirc;ne dans une cha&icirc;ne de caract&egrave;res (rechercher par exemple la sous-cha&icirc;ne &ldquo;son&rdquo; dans la cha&icirc;ne de caract&egrave;res &ldquo;maison&rdquo;). Si la m&eacute;thode <code>find()</code> ne trouve pas la sous-cha&icirc;ne demand&eacute;e alors elle retournera la valeur -1. Par contre, si la m&eacute;thode <code>find()</code> trouve la sous-cha&icirc;ne demand&eacute;e, elle retournera l&rsquo;index de la sous-cha&icirc;ne dans la cha&icirc;ne.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>ligne</code> <code>=</code> <code>&quot;Monaco&quot;</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>ligne</code><code>.</code><code>find</code><code>(</code><code>&quot;-&quot;</code><code>)</code>\r\n<code>3 </code><code>-</code><code>1</code>\r\n<code>4 </code><code>&gt;&gt;&gt;</code> <code>ligne</code> <code>=</code> <code>&quot;Paris-France&quot;</code>\r\n<code>5 </code><code>&gt;&gt;&gt;</code> <code>ligne</code><code>.</code><code>find</code><code>(</code><code>&quot;-&quot;</code><code>)</code>\r\n<code>6 </code><code>5</code>\r\n<code>7 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<ul>\r\n	<li><strong>P</strong> a pour indice 0</li>\r\n	<li><strong>a</strong> a pour indice 1</li>\r\n	<li><strong>r</strong> a pour indice 2</li>\r\n	<li><strong>i</strong> a pour indice 3</li>\r\n	<li><strong>s</strong> a pour indice 4</li>\r\n	<li>et notre fameux <strong>&rdquo;-&ldquo;</strong> a &eacute;t&eacute; bel et bien trouv&eacute; &agrave; l&rsquo;indice 5.</li>\r\n</ul>\r\n\r\n<p>Nous pouvons &agrave; pr&eacute;sent r&eacute;soudre tr&egrave;s facilement notre probl&egrave;me en proc&eacute;dant comme suit:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>&gt;&gt;&gt;</code> <code>fichier</code> <code>=</code> <code>open</code><code>(</code><code>&quot;capitales.txt&quot;</code><code>)</code>\r\n<code> 2 </code><code>&gt;&gt;&gt;</code> <code>for</code> <code>ligne</code> <code>in</code> <code>fichier</code><code>:</code>\r\n<code> 3 </code>        <code>if</code><code>(</code> <code>ligne</code><code>.</code><code>find</code><code>(</code><code>&quot;-&quot;</code><code>)</code> <code>==</code> <code>-</code><code>1</code> <code>):</code> <code>#Si on ne trouve pas de tiret sur la ligne</code>\r\n<code> 4 </code>            <code>capitale</code> <code>=</code> <code>pays</code> <code>=</code> <code>ligne</code> <code>#Alors la ligne correspond &agrave; la fois &agrave; la ca\\</code>\r\n<code> 5 </code><code>pitale</code> <code>et</code> <code>au</code> <code>pays</code>\r\n<code> 6 </code>        <code>else</code><code>:</code>\r\n<code> 7 </code>            <code>capitale</code><code>,</code> <code>pays</code> <code>=</code> <code>ligne</code><code>.</code><code>split</code><code>(</code><code>&quot;-&quot;</code><code>,</code> <code>1</code><code>)</code>\r\n<code> 8 </code>        \r\n<code> 9 </code>        <code>print</code><code>(</code><code>capitale</code><code>,</code> <code>end</code><code>=</code><code>&#39; est la capitale de &#39;</code><code>)</code>\r\n<code>10 </code>        <code>print</code><code>(</code><code>pays</code><code>,</code> <code>end</code><code>=</code><code>&#39;&#39;</code><code>)</code>\r\n<code>11 </code>\r\n<code>12 </code>\r\n<code>13 </code><code>Dakar</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>S</code><code>&eacute;</code><code>n</code><code>&eacute;</code><code>gal</code>\r\n<code>14 </code><code>Lagos</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Nigeria</code>\r\n<code>15 </code><code>Paris</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>France</code>\r\n<code>16 </code><code>Libreville</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Gabon</code>\r\n<code>17 </code><code>Ouagadougou</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Burkina</code> <code>Faso</code>\r\n<code>18 </code><code>Berlin</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Allemagne</code>\r\n<code>19 </code><code>Bruxelles</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Belgique</code>\r\n<code>20 </code><code>Doha</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Qatar</code>\r\n<code>21 </code><code>Harare</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Zimbabwe</code>\r\n<code>22 </code><code>Amsterdam</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Pays</code><code>-</code><code>Bas</code>\r\n<code>23 </code><code>Lima</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>P</code><code>&eacute;</code><code>rou</code>\r\n<code>24 </code><code>Maputo</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Mozambique</code>\r\n<code>25 </code><code>Monaco</code>\r\n<code>26 </code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Monaco</code>\r\n<code>27 </code><code>Monrovia</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Liberia</code>\r\n<code>28 </code><code>Panama</code>\r\n<code>29 </code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Panama</code>\r\n<code>30 </code><code>Rome</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Italie</code>\r\n<code>31 </code><code>&gt;&gt;&gt;</code> <code>fichier</code><code>.</code><code>close</code><code>()</code>\r\n<code>32 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>capitale = pays = ligne &eacute;quivaut &agrave; &eacute;crire capitale = ligne puis pays = ligne</p>\r\n\r\n<p>Vous remarquez que nous avons un petit retour &agrave; la ligne apr&egrave;s Monaco et Panama qui d&eacute;forme un tant soit peu l&rsquo;affichage de notre texte. Pour r&eacute;soudre ce probl&egrave;me, on peut utiliser la m&eacute;thode <strong>strip()</strong> qui permet d&rsquo;enlever les espaces inconsistants. Comme d&rsquo;habitude, si vous voulez en savoir plus sur cette m&eacute;thode, je vous invite &agrave; vous servir de la documentation.</p>\r\n\r\n<p>On obtient donc le script suivant:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>&gt;&gt;&gt;</code> <code>fichier</code> <code>=</code> <code>open</code><code>(</code><code>&quot;capitales.txt&quot;</code><code>)</code>\r\n<code> 2 </code><code>&gt;&gt;&gt;</code> <code>for</code> <code>ligne</code> <code>in</code> <code>fichier</code><code>:</code>\r\n<code> 3 </code>        <code>if</code><code>(</code> <code>ligne</code><code>.</code><code>find</code><code>(</code><code>&quot;-&quot;</code><code>)</code> <code>==</code> <code>-</code><code>1</code> <code>):</code>\r\n<code> 4 </code>            <code>capitale</code> <code>=</code> <code>pays</code> <code>=</code> <code>ligne</code>\r\n<code> 5 </code>        <code>else</code><code>:</code>\r\n<code> 6 </code>            <code>capitale</code><code>,</code> <code>pays</code> <code>=</code> <code>ligne</code><code>.</code><code>split</code><code>(</code><code>&quot;-&quot;</code><code>,</code> <code>1</code><code>)</code>\r\n<code> 7 </code>        \r\n<code> 8 </code>        <code># C&#39;est ici que la magie s&rsquo;op&egrave;re</code>\r\n<code> 9 </code>        <code>print</code><code>(</code><code>capitale</code><code>.</code><code>strip</code><code>(),</code> <code>end</code><code>=</code><code>&#39; est la capitale de &#39;</code><code>)</code>\r\n<code>10 </code>        <code>print</code><code>(</code><code>pays</code><code>,</code> <code>end</code><code>=</code><code>&#39;&#39;</code><code>)</code>\r\n<code>11 </code>\r\n<code>12 </code>\r\n<code>13 </code><code>Dakar</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>S</code><code>&eacute;</code><code>n</code><code>&eacute;</code><code>gal</code>\r\n<code>14 </code><code>Lagos</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Nigeria</code>\r\n<code>15 </code><code>Paris</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>France</code>\r\n<code>16 </code><code>Libreville</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Gabon</code>\r\n<code>17 </code><code>Ouagadougou</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Burkina</code> <code>Faso</code>\r\n<code>18 </code><code>Berlin</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Allemagne</code>\r\n<code>19 </code><code>Bruxelles</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Belgique</code>\r\n<code>20 </code><code>Doha</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Qatar</code>\r\n<code>21 </code><code>Harare</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Zimbabwe</code>\r\n<code>22 </code><code>Amsterdam</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Pays</code><code>-</code><code>Bas</code>\r\n<code>23 </code><code>Lima</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>P</code><code>&eacute;</code><code>rou</code>\r\n<code>24 </code><code>Maputo</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Mozambique</code>\r\n<code>25 </code><code>Monaco</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Monaco</code>\r\n<code>26 </code><code>Monrovia</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Liberia</code>\r\n<code>27 </code><code>Panama</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Panama</code>\r\n<code>28 </code><code>Rome</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Italie</code>\r\n<code>29 </code><code>&gt;&gt;&gt;</code> <code>fichier</code><code>.</code><code>close</code><code>()</code>\r\n<code>30 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Ajouter une surcouche de logique, comme on vient de le confirmer, nous permet de r&eacute;soudre notre probl&egrave;me. Toutefois, cette m&eacute;thode pr&eacute;sente de nombreux inconv&eacute;nients. On peut citer entre autres le fait que :</p>\r\n\r\n<ul>\r\n	<li>Si le format du texte contenu dans notre fichier <strong>capitales.txt</strong> change, il faudra automatiquement penser &agrave; changer la condition et cela conduira tr&egrave;s souvent &agrave; un code plus complexe.</li>\r\n	<li>La condition utilis&eacute;e au niveau de notre instruction <strong>if</strong> sera &agrave; mon avis un peu difficile &agrave; lire et surtout &agrave; comprendre pour un autre d&eacute;veloppeur (ou m&ecirc;me pour nous apr&egrave;s plusieurs mois de repos :)).</li>\r\n	<li>Le code est encore fragile, et nous aurons droit &agrave; une autre erreur si une nouvelle situation exceptionnelle se pr&eacute;sente.</li>\r\n</ul>\r\n\r\n<h4>11.4.2 G&eacute;rer les exceptions</h4>\r\n\r\n<p>Tous les programmes informatiques sont con&ccedil;us pour &ecirc;tre utilis&eacute;s, et de surcro&icirc;t par des personnes n&rsquo;ayant certainement aucune connaissance en programmation. Ainsi pour ces derniers, il peut para&icirc;tre troublant de voir des erreurs s&rsquo;afficher lors de l&rsquo;ex&eacute;cution de votre programme. Comment g&eacute;rer au mieux ce probl&egrave;me ? Une seule r&eacute;ponse: <strong>les exceptions</strong> qui viennent en amont aux structures conditionnelles.</p>\r\n\r\n<p>Vous avez remarqu&eacute; que lorsqu&rsquo;on avait quelque chose qui ne tournait pas rond au niveau de notre programme, l&rsquo;interpr&eacute;teur Python affichait ce qu&rsquo;on appelle un <em>traceback</em> suivi d&rsquo;un message d&rsquo;erreur un peu plus explicite.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>Traceback</code> <code>(</code><code>most</code> <code>recent</code> <code>call</code> <code>last</code><code>):</code>\r\n<code>2 </code>  <code>File</code> <code>&quot;&lt;pyshell#53&gt;&quot;</code><code>,</code> <code>line</code> <code>2</code><code>,</code> <code>in</code> <code>&lt;</code><code>module</code><code>&gt;</code>\r\n<code>3 </code>    <code>capitale</code><code>,</code> <code>pays</code> <code>=</code> <code>ligne</code><code>.</code><code>split</code><code>(</code><code>&quot;-&quot;</code><code>,</code> <code>1</code><code>)</code>\r\n<code>4 </code><code>ValueError</code><code>:</code> <code>need</code> <code>more</code> <code>than</code> <code>1</code> <code>value</code> <code>to</code> <code>unpack</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Le <strong>traceback</strong> est un moyen pour Python de nous informer du fait que quelque chose d&rsquo;inattendu s&rsquo;&eacute;tait produit durant l&rsquo;ex&eacute;cution de notre programme. Ces erreurs &agrave; l&rsquo;ex&eacute;cution sont ce qu&rsquo;on appelle <strong>exceptions</strong> dans le monde Python.</p>\r\n\r\n<p>Vous avez en effet deux choix:</p>\r\n\r\n<ul>\r\n	<li>Ignorer les exceptions lorsqu&rsquo;elles ont lieu, mais soyez sur que votre programme s&rsquo;arr&ecirc;tera de mani&egrave;re brutale. On parle de crash du programme dans le jargon informatique (un peu comme un crash d&rsquo;avion :) ).</li>\r\n	<li>Capturer ces exceptions, ce qui vous donnera la chance de g&eacute;rer par vous-m&ecirc;me ces exceptions et ne pas faire ainsi crasher votre programme.</li>\r\n</ul>\r\n\r\n<p>Dans la suite de cette section, je vous montrerai comment capturer les exceptions afin de contr&ocirc;ler le comportement de votre programme &agrave; l&rsquo;ex&eacute;cution. Cela permettra de rendre vos programmes robustes face aux diff&eacute;rentes erreurs pouvant survenir &agrave; l&rsquo;ex&eacute;cution.</p>\r\n\r\n<h5>Les types d&rsquo;exception</h5>\r\n\r\n<p>A l&rsquo;ex&eacute;cution de votre programme, lorsque Python rencontre une erreur dans votre code ou dans une op&eacute;ration que vous lui demandez de faire, il l&egrave;ve une exception. Une exception ressemble &agrave; ceci:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>5</code> <code>/</code> <code>&#39;abc&#39;</code>\r\n<code>2 </code><code>Traceback</code> <code>(</code><code>most</code> <code>recent</code> <code>call</code> <code>last</code><code>):</code>\r\n<code>3 </code>  <code>File</code> <code>&quot;&lt;pyshell#0&gt;&quot;</code><code>,</code> <code>line</code> <code>1</code><code>,</code> <code>in</code> <code>&lt;</code><code>module</code><code>&gt;</code>\r\n<code>4 </code>    <code>5</code> <code>/</code> <code>&#39;abc&#39;</code>\r\n<code>5 </code><code>TypeError</code><code>:</code> <code>unsupported</code> <code>operand</code> <code>type</code><code>(</code><code>s</code><code>)</code> <code>for</code> <code>/</code><code>:</code> <code>&#39;int&#39;</code> <code>and</code> <code>&#39;str&#39;</code>\r\n<code>6 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Python a ici lev&eacute; une exception de type <strong>TypeError</strong>, et nous donne des informations suppl&eacute;mentaires pour que nous puissions comprendre d&rsquo;o&ugrave; vient l&rsquo;erreur. Il nous dit qu&rsquo;on ne peut diviser un entier par une cha&icirc;ne de caract&egrave;res.</p>\r\n\r\n<p>En plus des exceptions de type <em>TypeError</em>, il y a &eacute;galement les exceptions de type <em>ValueError</em>, <em>ZeroDivisionError</em>, <em>NameError</em>, <em>IndexError</em>, <em>AssertionError</em> et bien d&rsquo;autres&hellip;</p>\r\n\r\n<h5>Forme minimale</h5>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>try</code><code>:</code>\r\n<code>2 </code>    <code>instruction</code>\r\n<code>3 </code>    <code>...</code>\r\n<code>4 </code><code>except</code><code>:</code>\r\n<code>5 </code>    <code>instruction</code>\r\n<code>6 </code>    <code>...</code>\r\n</pre>\r\n</div>\r\n\r\n<p>On teste le bloc d&rsquo;instruction du <strong>try</strong>. Si une erreur survient, alors on ex&eacute;cute le bloc d&rsquo;instructions contenu dans <strong>except</strong>.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>try</code><code>:</code>\r\n<code>2 </code>    <code>test</code> <code>=</code> <code>3</code> <code>/</code> <code>0</code>\r\n<code>3 </code><code>except</code><code>:</code>\r\n<code>4 </code>    <code>print</code><code>(</code><code>&#39;Division par z&eacute;ro ill&eacute;gale!&#39;</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>A l&rsquo;ex&eacute;cution, nous obtenons la sortie suivante:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code>\r\n<code>2 </code><code>Division</code> <code>par</code> <code>z</code><code>&eacute;</code><code>ro</code> <code>ill</code><code>&eacute;</code><code>gale</code><code>!</code>\r\n<code>3 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<h5>Forme compl&egrave;te</h5>\r\n\r\n<p>Dans l&rsquo;exemple pr&eacute;c&eacute;dent, nous avons simplement dit que si une erreur survenait durant l&rsquo;ex&eacute;cution du bloc <em>try</em> (n&rsquo;importe laquelle des erreurs), il faudra afficher <em>Division par z&eacute;ro ill&eacute;gale!</em>. Ce que je ne vous ai pas dis, c&rsquo;est que vous avez la possibilit&eacute; d&rsquo;&ecirc;tre beaucoup plus explicite par rapport aux types d&rsquo;exceptions que vous souhaitez capturer. Je sais que cela peut para&icirc;tre confus, raison pour laquelle je vous propose de voir cela dans un exemple pratique.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>try</code><code>:</code>\r\n<code>2 </code>    <code>test</code> <code>=</code> <code>3</code> <code>/</code> <code>0</code>\r\n<code>3 </code><code>except</code> <code>ZeroDivisionError</code><code>:</code>\r\n<code>4 </code>    <code>print</code><code>(</code><code>&#39;Division par z&eacute;ro ill&eacute;gale!&#39;</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>A l&rsquo;ex&eacute;cution, nous obtenons la sortie suivante:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code>\r\n<code>2 </code><code>Division</code> <code>par</code> <code>z</code><code>&eacute;</code><code>ro</code> <code>ill</code><code>&eacute;</code><code>gale</code><code>!</code>\r\n<code>3 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<h5>R&eacute;cup&eacute;rer le message d&rsquo;erreur par d&eacute;faut</h5>\r\n\r\n<p>Vous avez la possibilit&eacute; de capturer une exception et afficher directement le message d&rsquo;erreur par d&eacute;faut si vous avez la flemme d&rsquo;en &eacute;crire le votre.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>try</code><code>:</code>\r\n<code>2 </code>    <code>#Bloc d&#39;instructions</code>\r\n<code>3 </code><code>except</code> <code>TypeDeNotreException</code> <code>as</code> <code>exception_retournee</code><code>:</code>\r\n<code>4 </code>    <code>print</code><code>(</code><code>&quot;Voici l&#39;erreur: &quot;</code><code>,</code> <code>exception_retournee</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Comme vous pouvez le voir, seul le mot-cl&eacute; <strong>as</strong> fait la diff&eacute;rence.</p>\r\n\r\n<p>On peut avoir l&rsquo;exemple suivant:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>try</code><code>:</code>\r\n<code>2 </code>    <code>calcul</code> <code>=</code> <code>3</code> <code>/</code> <code>0</code>\r\n<code>3 </code><code>except</code> <code>ZeroDivisionError</code> <code>as</code> <code>exception</code><code>:</code>\r\n<code>4 </code>    <code>print</code><code>(</code><code>&quot;Voici l&#39;erreur:&quot;</code><code>,</code> <code>exception</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>A l&rsquo;ex&eacute;cution, on obtient le r&eacute;sultat suivant:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code>\r\n<code>2 </code><code>Voici</code> <code>l</code><code>&#39;erreur: division by zero</code>\r\n<code>3 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<h5>Le mot-cl&eacute; else</h5>\r\n\r\n<p>Dans un bloc <em>try</em>, le mot-cl&eacute; <strong>else</strong> vous permet d&rsquo;ex&eacute;cuter une action si aucune n&rsquo;exception n&rsquo;a &eacute;t&eacute; lev&eacute;e dans le bloc.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>try</code><code>:</code>\r\n<code> 2 </code>    <code>resultat</code> <code>=</code> <code>numerateur</code> <code>/</code> <code>denominateur</code>\r\n<code> 3 </code><code>except</code> <code>NameError</code><code>:</code>\r\n<code> 4 </code>    <code>print</code><code>(</code><code>&quot;La variable num&eacute;rateur ou d&eacute;nominateur n&#39;a pas &eacute;t&eacute; d&eacute;finie.&quot;</code><code>)</code>\r\n<code> 5 </code><code>except</code> <code>TypeError</code><code>:</code>\r\n<code> 6 </code>    <code>print</code><code>(</code><code>&quot;La variable num&eacute;rateur ou d&eacute;nominateur poss&egrave;de un type incompatible a</code><code>\\</code>\r\n<code> 7 </code><code>vec la division.&quot;</code><code>)</code>\r\n<code> 8 </code><code>except</code> <code>ZeroDivisionError</code><code>:</code>\r\n<code> 9 </code>    <code>print</code><code>(</code><code>&quot;La variable d&eacute;nominateur est &eacute;gale &agrave; 0.&quot;</code><code>)</code>\r\n<code>10 </code><code>else</code><code>:</code>\r\n<code>11 </code>    <code>print</code><code>(</code><code>&quot;Le r&eacute;sultat obtenu est: &quot;</code><code>,</code> <code>resultat</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>En gros, dans ce code, on indique que si il y a une exception, on la capture et on en informe l&rsquo;utilisateur, dans le cas contraire on affiche gentiment le r&eacute;sultat de la division.</p>\r\n\r\n<h5>Le mot-cl&eacute; finally</h5>\r\n\r\n<p>Le mot-cl&eacute; <strong>finally</strong> vous permet d&rsquo;ex&eacute;cuter du code apr&egrave;s un bloc <em>try</em>, quelque soit le r&eacute;sultat de l&rsquo;ex&eacute;cution dudit bloc.</p>\r\n\r\n<p>Vous pouvez &ecirc;tre tent&eacute;s de le demander &agrave; quoi cela pourrait bien servir? Eh bien je vais vous donner un exemple tr&egrave;s simple. Supposons que vous avez un programme qui traite certaines valeurs provenant d&rsquo;un fichier. Il peut arriver que lors de ex&eacute;cution de votre programme, une erreur survient et le programme crashe et que le bloc <code>except</code> soit ex&eacute;cut&eacute; dans le cas o&ugrave; vous avez d&eacute;cid&eacute; de g&eacute;rer les exceptions.</p>\r\n\r\n<p>Nous avons toutefois un petit probl&egrave;me. Nous devons en effet nous assurer que le fichier soit toujours ferm&eacute; apr&egrave;s traitement, qu&rsquo;il y ait eu erreur ou non. Si nous fermons notre fichier &agrave; la fin du bloc try, cette instruction risque de ne pas &ecirc;tre ex&eacute;cut&eacute;e au cas ou une erreur survenait, vu que notre bloc <code>except</code> sera automatiquement ex&eacute;cut&eacute;. Nous ne pouvons pas &eacute;galement mettre l&rsquo;instruction de fermeture du fichier dans le bloc except, dans la mesure o&ugrave; lorsqu&rsquo;il n&rsquo;y aura pas d&rsquo;erreur ce bloc ne sera jamais ex&eacute;cut&eacute; et notre fichier ne sera pas ainsi ferm&eacute;. C&rsquo;est justement l&agrave; que le bloc <code>finally</code> fait son entr&eacute;e en fanfare. Qu&rsquo;il y ait erreur ou non, ce bloc sera toujours ex&eacute;cut&eacute;.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>try</code><code>:</code>\r\n<code>2 </code>    <code># Test d&#39;instruction(s)</code>\r\n<code>3 </code><code>except</code> <code>Type_d_instruction</code><code>:</code>\r\n<code>4 </code>    <code># Traitement en cas d&#39;erreur</code>\r\n<code>5 </code><code>finally</code><code>:</code>\r\n<code>6 </code>    <code># Instruction(s) ex&eacute;cut&eacute;e(s) qu&#39;il y ait eu des erreurs ou non</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Si nous appliquons cela &agrave; notre petit exemple &eacute;nonc&eacute; plus haut, nous obtenons le code suivant:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>try</code><code>:</code>\r\n<code>2 </code>    <code>fichier</code> <code>=</code> <code>open</code><code>(</code><code>&quot;toto.txt&quot;</code><code>)</code>\r\n<code>3 </code>    <code>#quelques traitements</code>\r\n<code>4 </code>    <code>...</code>\r\n<code>5 </code><code>except</code><code>:</code>\r\n<code>6 </code>    <code># Traitement en cas d&#39;erreur</code>\r\n<code>7 </code><code>finally</code><code>:</code>\r\n<code>8 </code>    <code>fichier</code><code>.</code><code>close</code><code>()</code>\r\n</pre>\r\n</div>\r\n\r\n<h5>Le mot-cl&eacute; pass</h5>\r\n\r\n<p>Le mot-cl&eacute; <em>pass</em> est utilis&eacute; lorsque vous n&rsquo;avez pas pour l&rsquo;instant d&rsquo;impl&eacute;mentation concr&egrave;te pour un bloc donn&eacute;.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>try</code><code>:</code>\r\n<code>2 </code>    <code># Test d&#39;instruction(s)</code>\r\n<code>3 </code><code>except</code> <code>Type_d_instruction</code><code>:</code>\r\n<code>4 </code>    <code># Rien ne doit se passer en cas d&rsquo;erreur</code>\r\n<code>5 </code>    <code>pass</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Il peut &ecirc;tre utilis&eacute; pour n&rsquo;importe lequel des bloc d&rsquo;instructions if, while&hellip;</p>\r\n\r\n<p>Vu qu&rsquo;une fonction, regroupe &eacute;galement un bloc d&rsquo;instructions, vous pouvez avoir ce type de d&eacute;claration:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>def</code> <code>une_fonction_qui_fera_quelque_chose</code><code>():</code>\r\n<code>2 </code>    <code>pass</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Vous pourrez ainsi revenir apr&egrave;s et impl&eacute;menter cette fonction. L&rsquo;utilit&eacute; du mot-cl&eacute; <em>pass</em> r&eacute;side dans le fait que gr&acirc;ce &agrave; ce dernier, vous n&rsquo;aurez pas d&rsquo;erreur, alors qu&rsquo;une d&eacute;claration de fonction de ce genre aurait g&eacute;n&eacute;r&eacute; une erreur.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>def</code> <code>une_fonction_qui_fera_quelque_chose</code><code>():</code>\r\n</pre>\r\n</div>\r\n\r\n<h5>Lever une exception</h5>\r\n\r\n<p>Il peut &ecirc;tre parfois indispensable de lever soi-m&ecirc;me des exceptions. Pour ce faire, il suffit de taper le mot-cl&eacute; <strong>raise</strong> suivi du type d&rsquo;exception &agrave; lever et entre parenth&egrave;ses le message &agrave; afficher.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>raise</code> <code>TypeDeLException</code><code>(</code><code>&quot;message &agrave; afficher&quot;</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Supposons que vous souhaitiez cr&eacute;er une fonction <strong>que_des_valeurs_paires</strong> qui sera cens&eacute;e recevoir que des valeurs paires. Au cas o&ugrave;, une valeur impaire est pass&eacute;e en argument, une exception de type <code>ValueError</code> sera lev&eacute;e. Comme vous allez le voir ce sera tr&egrave;s simple en proc&eacute;dant comme suit:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>def</code> <code>que_des_valeurs_paires</code><code>(</code><code>valeur</code><code>):</code>\r\n<code>2 </code>    <code>if</code><code>(</code> <code>valeur</code> <code>%</code> <code>2</code> <code>==</code> <code>0</code><code>):</code>\r\n<code>3 </code>        <code>print</code><code>(</code><code>&quot;Good Job.&quot;</code><code>)</code>\r\n<code>4 </code>    <code>else</code><code>:</code>\r\n<code>5 </code>        <code>raise</code> <code>ValueError</code><code>(</code><code>&quot;Seules les valeurs paires sont autorisees. Merci.&quot;</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>A l&rsquo;ex&eacute;cution, vous aurez ceci:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>&gt;&gt;&gt;</code> <code>que_des_valeurs_paires</code><code>(</code><code>2</code><code>)</code>\r\n<code> 2 </code><code>Good</code> <code>Job</code><code>.</code>\r\n<code> 3 </code><code>&gt;&gt;&gt;</code> <code>que_des_valeurs_paires</code><code>(</code><code>14</code><code>)</code>\r\n<code> 4 </code><code>Good</code> <code>Job</code><code>.</code>\r\n<code> 5 </code><code>&gt;&gt;&gt;</code> <code>que_des_valeurs_paires</code><code>(</code><code>1</code><code>)</code>\r\n<code> 6 </code><code>Traceback</code> <code>(</code><code>most</code> <code>recent</code> <code>call</code> <code>last</code><code>):</code>\r\n<code> 7 </code>  <code>File</code> <code>&quot;&lt;pyshell#3&gt;&quot;</code><code>,</code> <code>line</code> <code>1</code><code>,</code> <code>in</code> <code>&lt;</code><code>module</code><code>&gt;</code>\r\n<code> 8 </code>    <code>que_des_valeurs_paires</code><code>(</code><code>1</code><code>)</code>\r\n<code> 9 </code>  <code>File</code> <code>&quot;C:\\Users\\honore.h\\Desktop\\game.py&quot;</code><code>,</code> <code>line</code> <code>5</code><code>,</code> <code>in</code> <code>que_des_valeurs_paires</code>\r\n<code>10 </code>    <code>raise</code> <code>ValueError</code><code>(</code><code>&quot;Seules les valeurs paires sont autorisees. Merci.&quot;</code><code>)</code>\r\n<code>11 </code><code>ValueError</code><code>:</code> <code>Seules</code> <code>les</code> <code>valeurs</code> <code>paires</code> <code>sont</code> <code>autorisees</code><code>.</code> <code>Merci</code><code>.</code>\r\n<code>12 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Ainsi, avec la gestion des exceptions, nous pourrons &eacute;crire un bien meilleur programme comme celui-ci:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>try</code><code>:</code>\r\n<code>2 </code>    <code>que_des_valeurs_paires</code><code>(</code><code>1</code><code>)</code>\r\n<code>3 </code><code>except</code> <code>ValueError</code> <code>as</code> <code>exception</code><code>:</code>\r\n<code>4 </code>    <code>print</code><code>(</code><code>exception</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code>\r\n<code>2 </code><code>Seules</code> <code>les</code> <code>valeurs</code> <code>paires</code> <code>sont</code> <code>autorisees</code><code>.</code> <code>Merci</code><code>.</code>\r\n<code>3 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Cool n&rsquo;est-ce pas?</p>\r\n\r\n<h4>11.4.3 Revenons &agrave; nos moutons</h4>\r\n\r\n<p>Maintenant que vous &ecirc;tes &agrave; l&rsquo;aise avec la gestion des exceptions, nous pouvons utiliser tout ce que nous avons vu jusque l&agrave; pour r&eacute;soudre notre probl&egrave;me pr&eacute;c&eacute;dent avec le contenu du fichier <code>capitales.txt</code>.</p>\r\n\r\n<p>Pour rappel, le probl&egrave;me que nous avions &eacute;tait le suivant:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>&gt;&gt;&gt;</code> <code>fichier</code> <code>=</code> <code>open</code><code>(</code><code>&quot;capitales.txt&quot;</code><code>)</code>\r\n<code> 2 </code><code>&gt;&gt;&gt;</code> <code>for</code> <code>ligne</code> <code>in</code> <code>fichier</code><code>:</code>\r\n<code> 3 </code>    <code>capitale</code><code>,</code> <code>pays</code> <code>=</code> <code>ligne</code><code>.</code><code>split</code><code>(</code><code>&quot;-&quot;</code><code>,</code> <code>1</code><code>)</code>\r\n<code> 4 </code>    <code>print</code><code>(</code><code>capitale</code><code>,</code> <code>end</code><code>=</code><code>&#39; est la capitale de &#39;</code><code>)</code>\r\n<code> 5 </code>    <code>print</code><code>(</code><code>pays</code><code>,</code> <code>end</code><code>=</code><code>&#39;&#39;</code><code>)</code>\r\n<code> 6 </code>\r\n<code> 7 </code>\r\n<code> 8 </code><code>Dakar</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>S</code><code>&eacute;</code><code>n</code><code>&eacute;</code><code>gal</code>\r\n<code> 9 </code><code>Lagos</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Nigeria</code>\r\n<code>10 </code><code>Paris</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>France</code>\r\n<code>11 </code><code>Libreville</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Gabon</code>\r\n<code>12 </code><code>Ouagadougou</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Burkina</code> <code>Faso</code>\r\n<code>13 </code><code>Berlin</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Allemagne</code>\r\n<code>14 </code><code>Bruxelles</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Belgique</code>\r\n<code>15 </code><code>Doha</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Qatar</code>\r\n<code>16 </code><code>Harare</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Zimbabwe</code>\r\n<code>17 </code><code>Amsterdam</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Pays</code><code>-</code><code>Bas</code>\r\n<code>18 </code><code>Lima</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>P</code><code>&eacute;</code><code>rou</code>\r\n<code>19 </code><code>Maputo</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Mozambique</code>\r\n<code>20 </code><code>Traceback</code> <code>(</code><code>most</code> <code>recent</code> <code>call</code> <code>last</code><code>):</code>\r\n<code>21 </code>  <code>File</code> <code>&quot;&lt;pyshell#53&gt;&quot;</code><code>,</code> <code>line</code> <code>2</code><code>,</code> <code>in</code> <code>&lt;</code><code>module</code><code>&gt;</code>\r\n<code>22 </code>    <code>capitale</code><code>,</code> <code>pays</code> <code>=</code> <code>ligne</code><code>.</code><code>split</code><code>(</code><code>&quot;-&quot;</code><code>,</code> <code>1</code><code>)</code>\r\n<code>23 </code><code>ValueError</code><code>:</code> <code>need</code> <code>more</code> <code>than</code> <code>1</code> <code>value</code> <code>to</code> <code>unpack</code>\r\n<code>24 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Nous l&rsquo;avons r&eacute;solu pr&eacute;c&eacute;demment en utilisant une combinaison if - else. Ce que je vous propose, c&rsquo;est de r&eacute;soudre le m&ecirc;me probl&egrave;me en utilisant cette fois-ci les exceptions. Saurez-vous le faire? Je dirais OUI &agrave; 100%. Alors au travail !</p>\r\n\r\n<h4>Indice</h4>\r\n\r\n<p>Comme nous pouvons le voir dans le traceback que nous fournit l&rsquo;interpr&eacute;teur Python, l&rsquo;exception lev&eacute;e est de type <code>ValueError</code>.</p>\r\n\r\n<p>Long moment de r&eacute;flexion&hellip;</p>\r\n\r\n<p>J&rsquo;esp&egrave;re que vous avez trouv&eacute; une solution &agrave; notre probl&egrave;me. J&rsquo;avoue qu&rsquo;il n&rsquo;y avait rien de bien compliqu&eacute;. Je vous propose rapidement ma solution.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>fichier</code> <code>=</code> <code>open</code><code>(</code><code>&quot;capitales.txt&quot;</code><code>)</code>\r\n<code> 2 </code><code>for</code> <code>ligne</code> <code>in</code> <code>fichier</code><code>:</code>\r\n<code> 3 </code>    <code>try</code><code>:</code>\r\n<code> 4 </code>        <code>capitale</code><code>,</code> <code>pays</code> <code>=</code> <code>ligne</code><code>.</code><code>split</code><code>(</code><code>&quot;-&quot;</code><code>,</code> <code>1</code><code>)</code>\r\n<code> 5 </code>    <code>except</code> <code>ValueError</code><code>:</code>\r\n<code> 6 </code>        <code>capitale</code> <code>=</code> <code>pays</code> <code>=</code> <code>ligne</code>\r\n<code> 7 </code>    <code>finally</code><code>:</code>\r\n<code> 8 </code>        <code>print</code><code>(</code><code>capitale</code><code>.</code><code>strip</code><code>(),</code> <code>end</code><code>=</code><code>&#39; est la capitale de &#39;</code><code>)</code>\r\n<code> 9 </code>        <code>print</code><code>(</code><code>pays</code><code>,</code> <code>end</code><code>=</code><code>&#39;&#39;</code><code>)</code>\r\n<code>10 </code>\r\n<code>11 </code><code>fichier</code><code>.</code><code>close</code><code>()</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Et comme r&eacute;sultat, au niveau de la console d&rsquo;interpr&eacute;tation on a:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>&gt;&gt;&gt;</code>\r\n<code> 2 </code><code>Dakar</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>S</code><code>&eacute;</code><code>n</code><code>&eacute;</code><code>gal</code>\r\n<code> 3 </code><code>Lagos</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Nigeria</code>\r\n<code> 4 </code><code>Paris</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>France</code>\r\n<code> 5 </code><code>Libreville</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Gabon</code>\r\n<code> 6 </code><code>Ouagadougou</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Burkina</code> <code>Faso</code>\r\n<code> 7 </code><code>Berlin</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Allemagne</code>\r\n<code> 8 </code><code>Bruxelles</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Belgique</code>\r\n<code> 9 </code><code>Doha</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Qatar</code>\r\n<code>10 </code><code>Harare</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Zimbabwe</code>\r\n<code>11 </code><code>Amsterdam</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Pays</code><code>-</code><code>Bas</code>\r\n<code>12 </code><code>Lima</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>P</code><code>&eacute;</code><code>rou</code>\r\n<code>13 </code><code>Maputo</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Mozambique</code>\r\n<code>14 </code><code>Monaco</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Monaco</code>\r\n<code>15 </code><code>Monrovia</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Liberia</code>\r\n<code>16 </code><code>Panama</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Panama</code>\r\n<code>17 </code><code>Rome</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>Italie</code>\r\n<code>18 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Je n&rsquo;ai pas mis l&rsquo;instruction <strong>fichier.close()</strong> au niveau du bloc <code>finally</code> parce que tout simplement cela aurait fermer notre fichier bien que nos traitements sur ce dernier ne soient pas termin&eacute;s. et nous aurons eu droit &agrave; une belle erreur de ce type:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>Dakar</code> <code>est</code> <code>la</code> <code>capitale</code> <code>de</code> <code>S</code><code>&eacute;</code><code>n</code><code>&eacute;</code><code>gal</code>\r\n<code>2 </code><code>Traceback</code> <code>(</code><code>most</code> <code>recent</code> <code>call</code> <code>last</code><code>):</code>\r\n<code>3 </code>  <code>File</code> <code>&quot;C:\\Users\\honore.h\\Desktop\\game.py&quot;</code><code>,</code> <code>line</code> <code>2</code><code>,</code> <code>in</code> <code>&lt;</code><code>module</code><code>&gt;</code>\r\n<code>4 </code>    <code>for</code> <code>ligne</code> <code>in</code> <code>fichier</code><code>:</code>\r\n<code>5 </code><code>ValueError</code><code>:</code> <code>I</code><code>/</code><code>O</code> <code>operation</code> <code>on</code> <code>closed</code> <code>file</code><code>.</code>\r\n<code>6 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<h4>11.4.4 Une derni&egrave;re chose &agrave; g&eacute;rer</h4>\r\n\r\n<p>Notre programme est quasi parfait, mais nous n&rsquo;avons toutefois pas g&eacute;rer une derni&egrave;re &eacute;ventualit&eacute;. Vous devinez laquelle? Qu&rsquo;est-ce qui se passera si le fichier <code>capitales.txt</code> n&rsquo;existe pas? Nous aurons donc tent&eacute; d&rsquo;ouvrir un fichier fant&ocirc;me et bang nous aurons droit &agrave; une erreur. Heureusement au niveau du module <code>os</code> nous avons une m&eacute;thode qui nous permet de v&eacute;rifier l&rsquo;existence d&rsquo;un fichier.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>import</code> <code>os</code>\r\n<code>2 </code><code>&gt;&gt;&gt;</code> <code>os</code><code>.</code><code>path</code><code>.</code><code>exists</code><code>(</code><code>&quot;capitales.txt&quot;</code><code>)</code>\r\n<code>3 </code><code>True</code>\r\n<code>4 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Ainsi nous pouvons soit utiliser un bloc if - else pour g&eacute;rer ce dernier cas o&ugrave; utiliser tout simplement les exceptions que nous aimons tant. Je vous propose les deux m&eacute;thodes pour ne pas faire de jaloux. Apr&egrave;s, vous pourrez par vous-m&ecirc;me voir la m&eacute;thode que vous sied le mieux.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>#Methode 1: if - else</code>\r\n<code> 2 </code>\r\n<code> 3 </code><code>import</code> <code>os</code>\r\n<code> 4 </code>\r\n<code> 5 </code><code>if</code> <code>os</code><code>.</code><code>path</code><code>.</code><code>exists</code><code>(</code><code>&#39;capitales.txt&#39;</code><code>):</code>\r\n<code> 6 </code>    <code>fichier</code> <code>=</code> <code>open</code><code>(</code><code>&quot;capitales.txt&quot;</code><code>)</code>\r\n<code> 7 </code>\r\n<code> 8 </code>    <code>for</code> <code>ligne</code> <code>in</code> <code>fichier</code><code>:</code>\r\n<code> 9 </code>        <code>if</code><code>(</code> <code>ligne</code><code>.</code><code>find</code><code>(</code><code>&quot;-&quot;</code><code>)</code> <code>==</code> <code>-</code><code>1</code> <code>):</code>\r\n<code>10 </code>            <code>capitale</code> <code>=</code> <code>pays</code> <code>=</code> <code>ligne</code>\r\n<code>11 </code>        <code>else</code><code>:</code>\r\n<code>12 </code>            <code>capitale</code><code>,</code> <code>pays</code> <code>=</code> <code>ligne</code><code>.</code><code>split</code><code>(</code><code>&quot;-&quot;</code><code>,</code> <code>1</code><code>)</code>\r\n<code>13 </code>\r\n<code>14 </code>        <code>print</code><code>(</code><code>capitale</code><code>.</code><code>strip</code><code>(),</code> <code>end</code><code>=</code><code>&#39; est la capitale de &#39;</code><code>)</code>\r\n<code>15 </code>        <code>print</code><code>(</code><code>pays</code><code>,</code> <code>end</code><code>=</code><code>&#39;&#39;</code><code>)</code>\r\n<code>16 </code>\r\n<code>17 </code>    <code>fichier</code><code>.</code><code>close</code><code>()</code>\r\n<code>18 </code><code>else</code><code>:</code>\r\n<code>19 </code>    <code>print</code><code>(</code><code>&quot;Le fichier de donn&eacute;es est manquant.&quot;</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>#Methode 2: Exceptions</code>\r\n<code> 2 </code><code>#Comme vous le voyez, nous n&#39;avons plus besoin d&#39;importer le module os</code>\r\n<code> 3 </code>\r\n<code> 4 </code><code>try</code><code>:</code>\r\n<code> 5 </code>    <code>fichier</code> <code>=</code> <code>open</code><code>(</code><code>&quot;capitales.txt&quot;</code><code>)</code>\r\n<code> 6 </code>\r\n<code> 7 </code>    <code>for</code> <code>ligne</code> <code>in</code> <code>fichier</code><code>:</code>\r\n<code> 8 </code>        <code>try</code><code>:</code>\r\n<code> 9 </code>            <code>capitale</code><code>,</code> <code>pays</code> <code>=</code> <code>ligne</code><code>.</code><code>split</code><code>(</code><code>&quot;-&quot;</code><code>,</code> <code>1</code><code>)</code>\r\n<code>10 </code>        <code>except</code> <code>ValueError</code><code>:</code>\r\n<code>11 </code>            <code>capitale</code> <code>=</code> <code>pays</code> <code>=</code> <code>ligne</code>\r\n<code>12 </code>\r\n<code>13 </code>        <code>print</code><code>(</code><code>capitale</code><code>.</code><code>strip</code><code>(),</code> <code>end</code><code>=</code><code>&#39; est la capitale de &#39;</code><code>)</code>\r\n<code>14 </code>        <code>print</code><code>(</code><code>pays</code><code>,</code> <code>end</code><code>=</code><code>&#39;&#39;</code><code>)</code>\r\n<code>15 </code>\r\n<code>16 </code>    <code>fichier</code><code>.</code><code>close</code><code>()</code>\r\n<code>17 </code><code>except</code> <code>FileNotFoundError</code><code>:</code>\r\n<code>18 </code>    <code>print</code><code>(</code><code>&quot;Le fichier de donn&eacute;es est manquant.&quot;</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Pour savoir qu&rsquo;il fallait capturer une exception de type <em>FileNotFoundError</em>, j&rsquo;ai tout simplement fait crasher volontairement notre programme en donnant &agrave; la fonction <em>open()</em> le nom d&rsquo;un fichier qui n&rsquo;existe pas et comme vous pouvez le voir l&rsquo;interpr&eacute;teur Python nous a gentiment retourn&eacute; ce que nous cherchons.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>&gt;&gt;&gt;</code> <code>open</code><code>(</code><code>&quot;fichier_de_ouf.txt&quot;</code><code>)</code>\r\n<code>2 </code><code>Traceback</code> <code>(</code><code>most</code> <code>recent</code> <code>call</code> <code>last</code><code>):</code>\r\n<code>3 </code>  <code>File</code> <code>&quot;&lt;pyshell#0&gt;&quot;</code><code>,</code> <code>line</code> <code>1</code><code>,</code> <code>in</code> <code>&lt;</code><code>module</code><code>&gt;</code>\r\n<code>4 </code>    <code>open</code><code>(</code><code>&quot;fichier_de_ouf.txt&quot;</code><code>)</code>\r\n<code>5 </code><code>FileNotFoundError</code><code>:</code> <code>[</code><code>Errno</code> <code>2</code><code>]</code> <code>No</code> <code>such</code> <code>file</code> <code>or</code> <code>directory</code><code>:</code> <code>&#39;fichier_de_ouf.txt&#39;</code>\r\n<code>6 </code><code>&gt;&gt;&gt;</code>\r\n</pre>\r\n</div>\r\n\r\n<h3>11.5 Jeu de capites - Version 2</h3>\r\n\r\n<p>Notre jeu de capitales du chapitre pr&eacute;c&eacute;dent qui stockait les donn&eacute;es directement au niveau d&rsquo;un dictionnaire avait un tout petit probl&egrave;me. Un utilisateur lambda qui ne ma&icirc;trise pas la programmation n&rsquo;aurait pas pu par lui-m&ecirc;me rajouter de nouveaux pays et leurs capitales respectives au dictionnaire de peur de bousiller le programme.</p>\r\n\r\n<p>Pour ce faire, notre utilisateur vous a donc fait appel et vous a fourni un fichier <strong>capitales_game.txt</strong> contenant une liste de pays et leurs capitales respectives.</p>\r\n\r\n<p>Le fichier suit le format suivant <code>Pays:Capitale</code>. A noter que m&ecirc;me pour les pays qui ont le m&ecirc;me nom que leur capitale (comme Monaco et Panama), ce m&ecirc;me format sera toujours utilis&eacute;.</p>\r\n\r\n<p>Je vous pr&eacute;sente un aper&ccedil;u du contenu de notre fichier afin que tout soit clair dans votre esprit:</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code>S</code><code>&eacute;</code><code>n</code><code>&eacute;</code><code>gal</code><code>:</code><code>Dakar</code>\r\n<code> 2 </code><code>Nigeria</code><code>:</code><code>Lagos</code>\r\n<code> 3 </code><code>France</code><code>:</code><code>Paris</code>\r\n<code> 4 </code><code>Gabon</code><code>:</code><code>Libreville</code>\r\n<code> 5 </code><code>Burkina</code> <code>Faso</code><code>:</code><code>Ouagadougou</code>\r\n<code> 6 </code><code>Allemagne</code><code>:</code><code>Berlin</code>\r\n<code> 7 </code><code>Belgique</code><code>:</code><code>Bruxelles</code>\r\n<code> 8 </code><code>Qatar</code><code>:</code><code>Doha</code>\r\n<code> 9 </code><code>Zimbabwe</code><code>:</code><code>Harare</code>\r\n<code>10 </code><code>Pays</code><code>-</code><code>Bas</code><code>:</code><code>Amsterdam</code>\r\n<code>11 </code><code>P</code><code>&eacute;</code><code>rou</code><code>:</code><code>Lima</code>\r\n<code>12 </code><code>Mozambique</code><code>:</code><code>Maputo</code>\r\n<code>13 </code><code>Monaco</code><code>:</code><code>Monaco</code>\r\n<code>14 </code><code>Liberia</code><code>:</code><code>Monrovia</code>\r\n<code>15 </code><code>Panama</code><code>:</code><code>Panama</code>\r\n<code>16 </code><code>Italie</code><code>:</code><code>Rome</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Vous avez si je m&rsquo;en abuse, toutes les cartes en main pour r&eacute;soudre ce probl&egrave;me et rendre heureux votre tr&egrave;s cher ami. Ma solution vous sera propos&eacute;e comme d&rsquo;habitude tout juste en bas, mais je vous invite &agrave; chercher par vous-m&ecirc;me et avoir votre propre solution. Bonne chance !</p>\r\n\r\n<h4>11.5.1 Exemple de solution</h4>\r\n\r\n<p>Ce code, j&rsquo;ose l&rsquo;esp&eacute;rer n&rsquo;aura pas besoin d&rsquo;explication suppl&eacute;mentaire :).</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code> 1 </code><code># Jeu de capitales v2</code>\r\n<code> 2 </code><code># Python par la pratique</code>\r\n<code> 3 </code>\r\n<code> 4 </code><code>from</code> <code>random</code> <code>import</code> <code>sample</code>\r\n<code> 5 </code>\r\n<code> 6 </code><code>try</code><code>:</code>\r\n<code> 7 </code>    <code>fichier</code> <code>=</code> <code>open</code><code>(</code><code>&quot;capitales_game.txt&quot;</code><code>)</code>\r\n<code> 8 </code>\r\n<code> 9 </code>    <code>#Contiendra l&#39;ensemble des pays et leurs capitales respectives</code>\r\n<code>10 </code>    <code>capitales</code> <code>=</code> <code>{}</code>\r\n<code>11 </code>\r\n<code>12 </code>    <code>for</code> <code>ligne</code> <code>in</code> <code>fichier</code><code>:</code>\r\n<code>13 </code>        <code>#On r&eacute;cup&egrave;re chaque pays et sa capitale associ&eacute;e</code>\r\n<code>14 </code>        <code>parts</code> <code>=</code> <code>ligne</code><code>.</code><code>split</code><code>(</code><code>&quot;:&quot;</code><code>)</code>\r\n<code>15 </code>        <code>pays</code> <code>=</code> <code>parts</code><code>[</code><code>0</code><code>]</code><code>.</code><code>strip</code><code>()</code>\r\n<code>16 </code>        <code>capitale</code> <code>=</code> <code>parts</code><code>[</code><code>1</code><code>]</code><code>.</code><code>strip</code><code>()</code>\r\n<code>17 </code>\r\n<code>18 </code>        <code># On ajoute progressivement les donn&eacute;es &agrave; notre dictionnaire</code>\r\n<code>19 </code>        <code>capitales</code><code>[</code><code>pays</code><code>]</code> <code>=</code> <code>capitale</code>\r\n<code>20 </code>\r\n<code>21 </code>    <code>fichier</code><code>.</code><code>close</code><code>()</code> <code>#Fermeture du fichier</code>\r\n<code>22 </code>\r\n<code>23 </code>    <code>#Nombre total de questions par s&eacute;rie</code>\r\n<code>24 </code>    <code>NBRE_TOTAL_DE_QUESTIONS</code> <code>=</code> <code>6</code>\r\n<code>25 </code>\r\n<code>26 </code>    <code>#Contiendra le score de l&#39;utilisateur</code>\r\n<code>27 </code>    <code>score</code> <code>=</code> <code>0</code>\r\n<code>28 </code>\r\n<code>29 </code>    <code>#On r&eacute;cup&egrave;re une liste al&eacute;atoire de [NBRE_TOTAL_DE_QUESTIONS] pays</code>\r\n<code>30 </code>    <code>liste_pays</code> <code>=</code> <code>sample</code><code>(</code><code>list</code><code>(</code><code>capitales</code><code>),</code> <code>NBRE_TOTAL_DE_QUESTIONS</code><code>)</code>\r\n<code>31 </code>\r\n<code>32 </code>    <code>for</code> <code>pays</code> <code>in</code> <code>liste_pays</code><code>:</code>\r\n<code>33 </code>        <code>print</code><code>(</code><code>&quot;Quelle est la capitale de ce pays: &quot;</code> <code>+</code> <code>pays</code> <code>+</code> <code>&quot; ?&quot;</code><code>)</code>\r\n<code>34 </code>        <code>reponse</code> <code>=</code> <code>input</code><code>()</code>\r\n<code>35 </code>\r\n<code>36 </code>        <code>if</code><code>(</code><code>reponse</code><code>.</code><code>lower</code><code>()</code> <code>==</code> <code>capitales</code><code>[</code><code>pays</code><code>]</code><code>.</code><code>lower</code><code>()):</code>\r\n<code>37 </code>            <code>print</code><code>(</code><code>&quot;Bonne r&eacute;ponse!&quot;</code><code>)</code>\r\n<code>38 </code>            <code>score</code> <code>+=</code> <code>1</code> <code>#On incr&eacute;mente son score</code>\r\n<code>39 </code>        <code>else</code><code>:</code>\r\n<code>40 </code>            <code>print</code><code>(</code><code>&quot;Mauvaise r&eacute;ponse! Il fallait r&eacute;pondre: &quot;</code> <code>+</code> <code>capitales</code><code>[</code><code>pays</code><code>])</code>\r\n<code>41 </code>\r\n<code>42 </code>    <code>print</code><code>(</code><code>&quot;C&#39;est termin&eacute; ! &lt;&lt; Score: &quot;</code><code>,</code> <code>score</code><code>,</code> <code>&quot;/&quot;</code><code>,</code> <code>NBRE_TOTAL_DE_QUESTIONS</code><code>,</code> <code>&quot; &gt;</code><code>\\</code>\r\n<code>43 </code><code>&gt;&quot;</code><code>)</code>\r\n<code>44 </code><code>except</code> <code>FileNotFoundError</code><code>:</code>\r\n<code>45 </code>    <code>print</code><code>(</code><code>&quot;Le fichier de donn&eacute;es est manquant.&quot;</code><code>)</code>\r\n</pre>\r\n</div>\r\n\r\n<h3>11.6 Petit exercice</h3>\r\n\r\n<p>Modifier notre programme afin de pouvoir donner la possibilit&eacute; &agrave; l&rsquo;utilisateur de pouvoir rejouer. Ainsi, si l&rsquo;utilisateur termine une partie, on lui demande s&rsquo;il souhaite rejouer ou non. S&rsquo;il r&eacute;pond par l&rsquo;affirmative alors on lui pr&eacute;pare une nouvelle partie, dans le cas contraire on lui dira gentiment <strong>Bye Bye</strong>.</p>\r\n\r\n<p>Vous pouvez donc utiliser ce petit test avec encore une fois notre fameuse m&eacute;thode <code>lower</code>.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>reponse</code> <code>=</code> <code>input</code><code>(</code><code>&quot;Voulez-vous rejouer (O/N)?&quot;</code><code>)</code>\r\n<code>2 </code>\r\n<code>3 </code><code>if</code><code>(</code><code>reponse</code><code>.</code><code>lower</code><code>()</code> <code>==</code> <code>&#39;o&#39;</code><code>):</code>\r\n<code>4 </code>    <code>#L&#39;utilisateur  veut rejouer</code>\r\n<code>5 </code><code>else</code><code>:</code>\r\n<code>6 </code>    <code>#On lui dit Bye Bye</code>\r\n</pre>\r\n</div>\r\n\r\n<p>En utilisant la m&eacute;thode <code>lower</code>, cela nous &eacute;vite d&rsquo;avoir &agrave; faire deux tests.</p>\r\n\r\n<div class="highlight">\r\n<pre>\r\n<code>1 </code><code>reponse</code> <code>=</code> <code>input</code><code>(</code><code>&quot;Voulez-vous rejouer (O/N)?&quot;</code><code>)</code>\r\n<code>2 </code>\r\n<code>3 </code><code>if</code><code>(</code><code>reponse</code> <code>==</code> <code>&#39;O&#39;</code> <code>or</code> <code>reponse</code> <code>=</code> <code>&#39;o&#39;</code><code>):</code>\r\n<code>4 </code>    <code>#L&#39;utilisateur  veut rejouer</code>\r\n<code>5 </code><code>else</code><code>:</code>\r\n<code>6 </code>    <code>#On lui dit Bye Bye</code>\r\n</pre>\r\n</div>\r\n\r\n<p>Rendez ensuite votre code modulaire en le d&eacute;coupant en de petites fonctions.</p>\r\n\r\n<h3>11.7 R&eacute;sum&eacute;</h3>\r\n\r\n<p>Etant donn&eacute; qu&rsquo;il s&rsquo;agit du dernier chapitre, essayez par vous-m&ecirc;me de le parcourir afin d&rsquo;en faire un r&eacute;sum&eacute;.</p>\r\n\r\n<p>Je vous fais confiance :).</p>\r\n\r\n<h2>Conclusion</h2>\r\n\r\n<p>Comme j&rsquo;ai voulu le d&eacute;montrer tout au long de cet ouvrage, Python est non seulement un langage assez simple &agrave; apprendre mais il regorge &eacute;galement d&rsquo;une pl&eacute;thore de fonctionnalit&eacute;s. Malheureusement, ce que nous avons vu dans ce livre ne repr&eacute;sente que le seizi&egrave;me de ce dont Python est capable de faire.</p>\r\n\r\n<p>Mais soyez-en rassur&eacute;s, ce n&rsquo;est pas la fin! En fait, nous ne faisons que commencer. Je n&rsquo;ai pas &eacute;cris <em>Python par la pratique</em> pour le publier et ensuite le jeter aux oubliettes, loin de l&agrave;. Ce livre sera amen&eacute; &agrave; &ecirc;tre continuellement mis &agrave; jour dans le courant de l&rsquo;ann&eacute;e 2016, pour refl&eacute;ter non seulement les meilleures pratiques de d&eacute;veloppement en Python mais &eacute;galement aborder d&rsquo;autres notions qui n&rsquo;ont pas eu la chance d&rsquo;&ecirc;tre &eacute;tudi&eacute;es dans cette premi&egrave;re &eacute;dition (on peut citer entre autres les interfaces graphiques, le d&eacute;veloppement web en Python, l&rsquo;interaction avec les bases de donn&eacute;es, la programmation orient&eacute;e objet en Python, la gestion des r&eacute;seaux avec Python&hellip;).</p>\r\n\r\n<p>D&rsquo;ici l&agrave; portez vous bien, et n&rsquo;h&eacute;sitez surtout pas &agrave; faire un tour sur la cha&icirc;ne Youtube des <a href="http://youtube.com/hounwanou1993">TEACHERS DU NET</a>, pour apprendre encore plus sur le monde de la programmation.</p>\r\n\r\n<p>Faire un <a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=LGFM78CBR2J2Q">don</a>.</p>', NULL, 0, 'honore-python-par-la-pratique-2017-03-07-17-41', 'mercuryseries@gmail.com', NULL);
INSERT INTO `advert` (`id`, `image_id`, `published`, `date`, `title`, `author`, `content`, `updated_at`, `nb_applications`, `slug`, `email`, `ip`) VALUES
(67, 63, 1, '2017-05-07 16:58:00', 'Moi, Mon Rêve, Ma Passion', 'Ousmane  TOURE', '<p>De naissance, Ousmane ALASSANE, j&#39;ai longtemps r&ecirc;v&eacute; de pouvoir r&eacute;ussir &agrave; r&eacute;aliser des grandes choses pour me remplir pleinement et les autres avec moi.</p>\r\n\r\n<p>Des periodes difficiles, j&#39;en ai connu.</p>\r\n\r\n<p>Je crois fermement &agrave; cela un jour.</p>\r\n\r\n<p>&nbsp;</p>', NULL, 0, 'moi-mon-reve-ma-passion-2017-05-07-16-58', 'cb82f3f2@opayq.com', NULL),
(68, 64, 1, '2017-07-07 19:47:00', 'Apprentissage OAB', 'Ousmane', '<p>Bonjour,</p>\r\n\r\n<p>Tout se passe bien</p>\r\n\r\n<p>Ci-joint</p>\r\n\r\n<p>&nbsp;</p>', NULL, 0, 'apprentissage-oab-2017-07-07-19-47', 'ousmane.alassane@orange.col', NULL),
(69, 65, 1, '2018-07-07 18:08:00', '[NuitDesCodesBientotDemarrees]', 'Oussou Toure', '<p>La nuit des codes va bientot demarr&eacute;.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>', NULL, 0, 'nuitdescodesbientotdemarrees-2018-07-07-18-08', 'ALASSANEOUSMANE071@GMAIL.COM', NULL),
(70, 66, 1, '2018-07-21 00:27:00', 'Titre de l''annonce', 'TOURE', '<p style="text-align:center"><span style="font-family:Tahoma,Geneva,sans-serif">Sad!</span></p>\r\n\r\n<p>&nbsp;</p>', NULL, 0, 'titre-de-l-annonce-2018-07-21-00-27', 'ousmanealassane.toure@gmail.com', NULL);

-- --------------------------------------------------------

--
-- Structure de la table `advert_category`
--

CREATE TABLE `advert_category` (
  `advert_id` int(11) NOT NULL,
  `category_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Contenu de la table `advert_category`
--

INSERT INTO `advert_category` (`advert_id`, `category_id`) VALUES
(54, 13),
(54, 14),
(54, 15),
(54, 16),
(54, 17),
(54, 18),
(56, 13),
(58, 13),
(58, 14),
(58, 15),
(58, 16),
(58, 17),
(58, 18),
(58, 25),
(58, 26),
(58, 27),
(58, 28),
(58, 29),
(58, 30),
(60, 13),
(60, 14),
(60, 15),
(61, 30),
(62, 13),
(63, 13),
(63, 14),
(63, 15),
(63, 16),
(63, 17),
(63, 18),
(63, 25),
(63, 26),
(63, 27),
(63, 28),
(63, 29),
(63, 30),
(65, 29),
(65, 30),
(66, 13),
(66, 29),
(66, 30),
(68, 13),
(68, 14),
(68, 15),
(68, 16),
(68, 17),
(68, 18),
(68, 25),
(68, 26),
(68, 27),
(68, 28),
(68, 29),
(68, 30),
(69, 13);

-- --------------------------------------------------------

--
-- Structure de la table `advert_skill`
--

CREATE TABLE `advert_skill` (
  `id` int(11) NOT NULL,
  `advert_id` int(11) NOT NULL,
  `skill_id` int(11) NOT NULL,
  `level` varchar(255) COLLATE utf8_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Structure de la table `application`
--

CREATE TABLE `application` (
  `id` int(11) NOT NULL,
  `advert_id` int(11) NOT NULL,
  `author` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `content` longtext COLLATE utf8_unicode_ci NOT NULL,
  `date` datetime NOT NULL,
  `ip` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Structure de la table `category`
--

CREATE TABLE `category` (
  `id` int(11) NOT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Contenu de la table `category`
--

INSERT INTO `category` (`id`, `name`) VALUES
(13, 'Développement web'),
(14, 'Développement mobile'),
(15, 'Graphisme'),
(16, 'Intégration'),
(17, 'Réseau'),
(18, 'CyberSécurité'),
(25, 'Développement web'),
(26, 'Développement mobile'),
(27, 'Graphisme'),
(28, 'Intégration'),
(29, 'Réseau'),
(30, 'CyberSécurité');

-- --------------------------------------------------------

--
-- Structure de la table `image`
--

CREATE TABLE `image` (
  `id` int(11) NOT NULL,
  `url` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `alt` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `advert_id` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Contenu de la table `image`
--

INSERT INTO `image` (`id`, `url`, `alt`, `title`, `advert_id`) VALUES
(50, 'jpeg', 'secnumedu2017_photofinish.jpg', 'secnumedu2017_photofinish.jpg', NULL),
(52, 'jpeg', 'IMG_20170124_231452.jpg', 'IMG_20170124_231452.jpg', NULL),
(54, 'jpeg', 'IMG_20170124_231452.jpg', 'IMG_20170124_231452.jpg', NULL),
(56, 'png', 'Capture du 2017-02-17 00-21-41.png', 'Capture du 2017-02-17 00-21-41.png', NULL),
(57, 'png', 'Capture du 2017-02-17 00-21-18.png', 'Capture du 2017-02-17 00-21-18.png', NULL),
(58, 'png', 'alassane-ousmane.png', 'alassane-ousmane.png', NULL),
(59, 'png', 'alassane-ousmane.png', 'alassane-ousmane.png', NULL),
(61, 'jpeg', 'logo_anssi-300-300.jpg', 'logo_anssi-300-300.jpg', NULL),
(62, 'png', 'photo-honore.png', 'photo-honore.png', NULL),
(63, 'png', 'photo-professionnel.png', 'photo-professionnel.png', NULL),
(64, 'jpeg', 'alassane.jpg', 'alassane.jpg', NULL),
(65, 'jpeg', 'alassane.jpg', 'alassane.jpg', NULL),
(66, 'jpeg', 'physique-quantique.jpg', 'physique-quantique.jpg', NULL);

-- --------------------------------------------------------

--
-- Structure de la table `skill`
--

CREATE TABLE `skill` (
  `id` int(11) NOT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Contenu de la table `skill`
--

INSERT INTO `skill` (`id`, `name`) VALUES
(10, 'HTML'),
(11, 'CSS'),
(12, 'PHP'),
(13, 'Symfony'),
(14, 'C++'),
(15, 'Java'),
(16, 'Photoshop'),
(17, 'Blender'),
(18, 'Bloc-note'),
(28, 'HTML'),
(29, 'CSS'),
(30, 'PHP'),
(31, 'Symfony'),
(32, 'C++'),
(33, 'Java'),
(34, 'Photoshop'),
(35, 'Blender'),
(36, 'Bloc-note');

-- --------------------------------------------------------

--
-- Structure de la table `user`
--

CREATE TABLE `user` (
  `id` int(11) NOT NULL,
  `username` varchar(180) COLLATE utf8_unicode_ci NOT NULL,
  `username_canonical` varchar(180) COLLATE utf8_unicode_ci NOT NULL,
  `email` varchar(180) COLLATE utf8_unicode_ci NOT NULL,
  `email_canonical` varchar(180) COLLATE utf8_unicode_ci NOT NULL,
  `enabled` tinyint(1) NOT NULL,
  `salt` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `password` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `last_login` datetime DEFAULT NULL,
  `confirmation_token` varchar(180) COLLATE utf8_unicode_ci DEFAULT NULL,
  `password_requested_at` datetime DEFAULT NULL,
  `roles` longtext COLLATE utf8_unicode_ci NOT NULL COMMENT '(DC2Type:array)'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Contenu de la table `user`
--

INSERT INTO `user` (`id`, `username`, `username_canonical`, `email`, `email_canonical`, `enabled`, `salt`, `password`, `last_login`, `confirmation_token`, `password_requested_at`, `roles`) VALUES
(2, 'Winzou', 'winzou', 'winzou@symfony.com', 'winzou@symfony.com', 1, '1IUxsoD62UzI9.dDJhBZ.cLPzSceqjZkE4mzSKF8ol0', 'qWO7/b/B8uOs6DjlBVjWfJWfmDZgnfRtQmK+euJpMmyMeRMSt/yf28VKD2U8TYvajQTX1TSQG90wFg5P4o2/zw==', '2017-02-13 19:23:24', NULL, NULL, 'a:1:{i:0;s:15:"ROLE_MODERATEUR";}'),
(3, 'alassane', 'alassane', 'alassane@cludima.org', 'alassane@cludima.org', 1, 'kAwatiiJAX.//tffqigZVNSpGurAyTJzMy.0.NKr6fc', '4wWQLPtSvV+6+4dOt62hv0zMYWWAhS9CBGt4ExfkJkexxbQWYj04CONwKqW4cvJkG/5sIoHACsF4jLnsct2d4w==', '2017-05-01 00:42:21', NULL, NULL, 'a:1:{i:0;s:15:"ROLE_MODERATEUR";}'),
(4, 'admin', 'admin', 'admin@alassane.com', 'admin@alassane.com', 1, 'ZOKuYD1Tg4RqbipkEmlxckxAyi0myWKNlsMLP8LFl9A', 'nyw1pPJioJO2X20p7GPzgy0WcZWpGp71xnJEGdRMnB3U/IAOlddcXnQnh1vCD0agNEgMUzgIvzPkx8v5t75FXw==', '2017-02-13 19:45:56', NULL, NULL, 'a:1:{i:0;s:15:"ROLE_MODERATEUR";}'),
(5, 'root', 'root', 'alassane.ousmane@facebook.com', 'alassane.ousmane@facebook.com', 1, 'aoceOm0EHISM7cxaeQgU1PpeKi.tvgux7t5n9ruCv48', 'NYhZVqmuehi7crebjbUdGP3QOKXxpW//am+JeRfD6fcZxHOXWugAbreCfL2JGjaNDrsFI4rbUDb9cmaXTN56OQ==', '2018-09-17 22:07:32', NULL, NULL, 'a:1:{i:0;s:10:"ROLE_ADMIN";}'),
(7, 'Ousmane', 'ousmane', 'alassaneousmane071@gmail.com', 'alassaneousmane071@gmail.com', 1, 'QthSwku7DwEm.Bj0Aqb1GrgmKhwB4uVvXODRy/Og/7I', 'nTQm3qwbmPNQlAOGIy0eIgtTpno56W2O2DRci9X5kKrub1nroSya8PaJg42msrzXsB3jnrUc4861dufrlSR29Q==', '2017-03-14 19:36:13', NULL, NULL, 'a:1:{i:0;s:15:"ROLE_MODERATEUR";}');

--
-- Index pour les tables exportées
--

--
-- Index pour la table `advert`
--
ALTER TABLE `advert`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `UNIQ_54F1F40B2B36786B` (`title`),
  ADD UNIQUE KEY `UNIQ_54F1F40B3DA5256D` (`image_id`),
  ADD UNIQUE KEY `UNIQ_54F1F40B989D9B62` (`slug`);

--
-- Index pour la table `advert_category`
--
ALTER TABLE `advert_category`
  ADD PRIMARY KEY (`advert_id`,`category_id`),
  ADD KEY `IDX_84EEA340D07ECCB6` (`advert_id`),
  ADD KEY `IDX_84EEA34012469DE2` (`category_id`);

--
-- Index pour la table `advert_skill`
--
ALTER TABLE `advert_skill`
  ADD PRIMARY KEY (`id`),
  ADD KEY `IDX_5619F91BD07ECCB6` (`advert_id`),
  ADD KEY `IDX_5619F91B5585C142` (`skill_id`);

--
-- Index pour la table `application`
--
ALTER TABLE `application`
  ADD PRIMARY KEY (`id`),
  ADD KEY `IDX_A45BDDC1D07ECCB6` (`advert_id`);

--
-- Index pour la table `category`
--
ALTER TABLE `category`
  ADD PRIMARY KEY (`id`);

--
-- Index pour la table `image`
--
ALTER TABLE `image`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `UNIQ_C53D045FD07ECCB6` (`advert_id`);

--
-- Index pour la table `skill`
--
ALTER TABLE `skill`
  ADD PRIMARY KEY (`id`);

--
-- Index pour la table `user`
--
ALTER TABLE `user`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `UNIQ_8D93D64992FC23A8` (`username_canonical`),
  ADD UNIQUE KEY `UNIQ_8D93D649A0D96FBF` (`email_canonical`),
  ADD UNIQUE KEY `UNIQ_8D93D649C05FB297` (`confirmation_token`);

--
-- AUTO_INCREMENT pour les tables exportées
--

--
-- AUTO_INCREMENT pour la table `advert`
--
ALTER TABLE `advert`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=71;
--
-- AUTO_INCREMENT pour la table `advert_skill`
--
ALTER TABLE `advert_skill`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT pour la table `application`
--
ALTER TABLE `application`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT pour la table `category`
--
ALTER TABLE `category`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=31;
--
-- AUTO_INCREMENT pour la table `image`
--
ALTER TABLE `image`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=67;
--
-- AUTO_INCREMENT pour la table `skill`
--
ALTER TABLE `skill`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=37;
--
-- AUTO_INCREMENT pour la table `user`
--
ALTER TABLE `user`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=8;
--
-- Contraintes pour les tables exportées
--

--
-- Contraintes pour la table `advert`
--
ALTER TABLE `advert`
  ADD CONSTRAINT `FK_54F1F40B3DA5256D` FOREIGN KEY (`image_id`) REFERENCES `image` (`id`);

--
-- Contraintes pour la table `advert_category`
--
ALTER TABLE `advert_category`
  ADD CONSTRAINT `FK_84EEA34012469DE2` FOREIGN KEY (`category_id`) REFERENCES `category` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `FK_84EEA340D07ECCB6` FOREIGN KEY (`advert_id`) REFERENCES `advert` (`id`) ON DELETE CASCADE;

--
-- Contraintes pour la table `advert_skill`
--
ALTER TABLE `advert_skill`
  ADD CONSTRAINT `FK_5619F91B5585C142` FOREIGN KEY (`skill_id`) REFERENCES `skill` (`id`),
  ADD CONSTRAINT `FK_5619F91BD07ECCB6` FOREIGN KEY (`advert_id`) REFERENCES `advert` (`id`);

--
-- Contraintes pour la table `application`
--
ALTER TABLE `application`
  ADD CONSTRAINT `FK_A45BDDC1D07ECCB6` FOREIGN KEY (`advert_id`) REFERENCES `advert` (`id`);

--
-- Contraintes pour la table `image`
--
ALTER TABLE `image`
  ADD CONSTRAINT `FK_C53D045FD07ECCB6` FOREIGN KEY (`advert_id`) REFERENCES `advert` (`id`);

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
